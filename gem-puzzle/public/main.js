(()=>{"use strict";const t=new class{constructor(){this.history=[],this.size=4,this.emptyX=0,this.emptyY=0,this.animationTime=400,this.cellSize=10.4,this.removeBoard=()=>{document.querySelectorAll(".board").forEach((t=>{document.body.removeChild(t)}))}}move(t){switch(t){case"up":console.log(this.history.length-2,this.history.length,this.emptyX-1),this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX-1][this.emptyY],this.arr[this.emptyX-1][this.emptyY]=0,this.emptyX-=1;break;case"down":this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX+1][this.emptyY],this.arr[this.emptyX+1][this.emptyY]=0,this.emptyX+=1;break;case"right":this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY+1],this.arr[this.emptyX][this.emptyY+1]=0,this.emptyY+=1;break;case"left":this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY-1],this.arr[this.emptyX][this.emptyY-1]=0,this.emptyY-=1;break;default:throw new Error(">:(")}}shuffle(){this.history.push([this.emptyX,this.emptyY]);for(let t=0;t<this.size**3;t+=1)switch(Math.floor(4*Math.random())){case 0:0!==this.emptyX?this.move("up"):this.move("down"),this.history.push([this.emptyX,this.emptyY]);break;case 1:this.emptyY!==this.size-1?this.move("right"):this.move("left"),this.history.push([this.emptyX,this.emptyY]);break;case 2:this.emptyX!==this.size-1?this.move("down"):this.move("up"),this.history.push([this.emptyX,this.emptyY]);break;case 3:0!==this.emptyY?this.move("left"):(this.move("right"),this.history.push([this.emptyX,this.emptyY]));break;default:throw t-=1,new Error(">:(")}console.log(this.history)}renderBoard(){document.querySelector(".move").innerHTML=this.movesCounter;let t="";const e=this.cellSize*this.size+"rem";let i;for(let s=0,r=1;s<this.size;s+=1)for(let o=0;o<this.size;o+=1){i=this.arr[s][o];const h=this.arr[s][o]?"cell":"cell empty",n=!!this.arr[s][o],a=`${Math.round(100/(this.size-1)*o)}% ${Math.round(100/(this.size-1)*s)}%`;r+=1,t+=`<div style='order:${r}; background-position: ${a}; background-size: ${e};' id='cell-${i}' class='${h}' draggable="${n}">${i}</div>`}const s=document.createElement("div");s.classList.add("board"),s.style.width=e,s.innerHTML=t,document.body.appendChild(s),console.log(s.style.width,""+Math.floor(this.cellSize*this.size))}createBoard(){this.arr=[],this.emptyX=this.size-1,this.emptyY=this.size-1;for(let t=0;t<this.size;t+=1){this.arr[t]=[];for(let e=0;e<this.size;e+=1)t+e!==2*(this.size-1)?this.arr[t][e]=t*this.size+e+1:this.arr[t][e]=0}}draw(){const t=this.cellSize/this.animationTime*this.timePassed;switch(this.direction){case"up":this.e.style.transform=`translate( 0, ${-t}rem)`;break;case"down":this.e.style.transform=`translate( 0, ${t}rem)`;break;case"left":this.e.style.transform=`translate( ${-t}rem, 0)`;break;case"right":this.e.style.transform=`translate( ${t}rem, 0)`;break;default:throw new Error(">:(")}}moveAnimation(){this.inAnimation=!0,this.start=Date.now(),this.timer=setInterval((()=>{if(this.timePassed=Date.now()-this.start,this.timePassed>=this.animationTime)return clearInterval(this.timer),void(this.inAnimation=!1);this.draw()}),20)}checkWin(){const t=[];for(let e=0;e<this.size;e+=1){t[e]=[];for(let i=0;i<this.size;i+=1)e+i!==2*(this.size-1)?t[e][i]=e*this.size+i+1:t[e][i]=0}console.log("check for win!",t,this.arr);for(let e=0;e<this.size;e+=1)for(let i=0;i<this.size;i+=1)if(e+i!==2*(this.size-1)&&t[e][i]!==this.arr[e][i])return!1;return console.log("win!",t,this.arr),!0}swap(t){if(!this.inAnimation)for(let e=0;e<this.arr.length;e+=1)for(let i=0;i<this.arr[e].length;i+=1)if(this.arr[e][i]===t&&(Math.abs(this.emptyX-e)<=1&&this.emptyY-i==0||Math.abs(this.emptyY-i)<=1&&this.emptyX-e==0)){this.movesCounter+=1,document.querySelector(".move").innerHTML=this.movesCounter;const t=document.querySelector("#cell-"+this.arr[this.emptyX][this.emptyY]);return this.e=document.querySelector("#cell-"+this.arr[e][i]),this.emptyX-e<0?(console.log("up!"),this.direction="up",this.moveAnimation()):this.emptyX-e>0?(this.direction="down",this.moveAnimation()):this.emptyY-i<0?(this.direction="left",this.moveAnimation(),console.log("left")):this.emptyY-i>0&&(this.direction="right",this.moveAnimation(),console.log("right")),setTimeout((()=>{const e=t.style.order;t.style.order=this.e.style.order,this.e.style.order=e,this.e.style.transform="",this.emptyX===this.emptyY&&this.emptyY===this.size-1&&this.checkWin()&&(document.querySelector(".board").innerHTML+=`Ура! Вы решили головоломку за ${document.querySelector(".time").innerHTML} и ${document.querySelector(".move").innerHTML} ходов`)}),this.animationTime),[this.arr[e][i],this.arr[this.emptyX][this.emptyY]]=[this.arr[this.emptyX][this.emptyY],this.arr[e][i]],this.emptyX=e,this.emptyY=i,void console.table(this.arr)}}init(){this.size=document.getElementById("fieldSize").value,this.removeBoard(),this.createBoard(),this.shuffle(),this.movesCounter=0,this.renderBoard(),console.table(this.arr),document.querySelectorAll(".cell").forEach((t=>{t.addEventListener("mouseup",(t=>{const e=t.target;this.swap(parseInt(e.innerHTML,10))})),t.addEventListener("dragstart",this.dragStart),t.addEventListener("dragover",this.dragOver),t.addEventListener("drop",this.dragDrop),t.addEventListener("dragend",this.dragEnd)}))}load(){document.querySelector(".move").innerHTML=this.movesCounter,this.removeBoard(),this.renderBoard(),console.table(this.arr),document.querySelectorAll(".cell").forEach((t=>{t.addEventListener("mouseup",(t=>{const e=t.target;this.swap(parseInt(e.innerHTML,10))})),t.addEventListener("dragstart",this.dragStart),t.addEventListener("dragover",this.dragOver),t.addEventListener("drop",this.dragDrop),t.addEventListener("dragend",this.dragEnd)}))}},e=new class{constructor(){this.currentTime=0}calcCurrentTime(){this.time=setInterval((()=>{this.currentTime+=1,this.secToMinAndSec()}),1e3)}secToMinAndSec(){this.minutes=Math.floor(this.currentTime/60),this.sec=(this.currentTime%60).toFixed(0),this.timer=`${this.minutes}:${this.sec<10?"0":""}${this.sec}`,this.renderTimer()}timerStop(){clearInterval(this.time),this.timer="0:00",this.renderTimer()}renderTimer(){document.querySelector(".time").innerHTML=this.timer}init(){this.timerStop(),this.currentTime=null,this.calcCurrentTime()}load(){this.timerStop(),this.secToMinAndSec(),this.renderTimer(),this.calcCurrentTime()}},i=document.createElement("header");i.innerHTML='  \n<header class="header">\n  <button class="new-game">New game</button>\n  <button class="save">Save</button>\n  <button class="load">Load</button>\n  <div class="timer"><span>Timer:</span><span class="time">0:00</span></div>\n  <div class="moves"><span>Moves:</span><span class="move">0</span></div>\n  <label for="fieldSize">Field size:</label>\n  <select id="fieldSize">\n  <option value="3">3</option>\n  <option selected="selected" value="4">4</option>\n  <option value="5">5</option>\n  <option value="6">6</option>\n  <option value="7">7</option>\n  <option value="8">8</option>\n</select>\n</header>',document.body.appendChild(i),t.init(),e.init(),document.querySelector(".new-game").addEventListener("click",(()=>{t.init(),e.init()})),document.querySelector(".save").addEventListener("click",(()=>{localStorage.setItem("gameSave",JSON.stringify({history:t.history,size:t.size,boardTable:t.arr,time:e.currentTime,moves:t.movesCounter,zero:[t.emptyX,t.emptyY]}))})),document.querySelector(".load").addEventListener("click",(()=>{const{history:i,size:s,boardTable:r,time:o,moves:h,zero:n}=JSON.parse(localStorage.getItem("gameSave"));t.history=i,t.size=s,e.currentTime=o,t.movesCounter=h,t.arr=r,t.load(),e.load(),[t.emptyX,t.emptyY]=n,console.log(t.movesCounter)})),document.getElementById("fieldSize").addEventListener("change",(i=>{console.log(i.target.value),t.init(),e.init()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,