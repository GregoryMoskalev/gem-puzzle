(()=>{"use strict";const e=[];let t,r,o=[];function n(e){switch(e){case"up":o[t][r]=o[t-1][r],o[t-1][r]=0,t-=1;break;case"down":o[t][r]=o[t+1][r],o[t+1][r]=0,t+=1;break;case"right":o[t][r]=o[t][r+1],o[t][r+1]=0,r+=1;break;case"left":o[t][r]=o[t][r-1],o[t][r-1]=0,r-=1;break;default:throw new Error(">:(")}}!function(){const l=document.createElement("div");l.classList.add("board"),l.innerHTML=function(l=4){for(let e=0;e<l;e+=1){o[e]=[];for(let t=0;t<l;t+=1)o[e][t]=e+t!==2*(l-1)?e*l+t+1:0}return o=function(l=4){t=l-1,r=l-1,e.push([t,r]);for(let o=0;o<80;o+=1)switch(Math.floor(4*Math.random())){case 0:n(0!==t?"up":"down"),e.push([t,r]);break;case 1:n(r!==l-1?"right":"left"),e.push([t,r]);break;case 2:n(t!==l-1?"down":"up"),e.push([t,r]);break;case 3:0!==r?n("left"):(n("right"),e.push([t,r]));break;default:throw o-=1,new Error(">:(")}return o}(),console.log(o),function(e=4){let t,r="";for(let n=0,l=1;n<e;n+=1)for(let c=0;c<e;c+=1){t=o[n][c];const e=o[n][c]?"cell":"empty";l+=1,r+=`<div style='order:${l};' id='cell-${t}' class='${e}'>${t}</div>`}return r}()}(),console.table(e),document.body.appendChild(l)}(),document.querySelectorAll(".cell").forEach((e=>{e.addEventListener("mousedown",(e=>{const n=e.target.innerHTML;!function(e){for(let n=0;n<o.length;n+=1)for(let l=0;l<o[n].length;l+=1)if(o[n][l]===e&&(Math.abs(t-n)<=1&&r-l==0||Math.abs(r-l)<=1&&t-n==0)){const e=document.querySelector("#cell-"+o[t][r]),c=document.querySelector("#cell-"+o[n][l]),s=e.style.order;return e.style.order=c.style.order,c.style.order=s,[o[n][l],o[t][r]]=[o[t][r],o[n][l]],t=n,void(r=l)}}(parseInt(n,10))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,