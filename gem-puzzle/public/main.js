(()=>{"use strict";let e,t,o=[],n=[];function r(o){switch(o){case"up":n[e][t]=n[e-1][t],n[e-1][t]=0,e-=1;break;case"down":n[e][t]=n[e+1][t],n[e+1][t]=0,e+=1;break;case"right":n[e][t]=n[e][t+1],n[e][t+1]=0,t+=1;break;case"left":n[e][t]=n[e][t-1],n[e][t-1]=0,t-=1}}!function(){const l=document.createElement("div");l.classList.add("board"),l.innerHTML=function(l=4){for(let e=0;e<l;++e){n[e]=[];for(let t=0;t<l;++t)n[e][t]=e+t!==2*(l-1)?e*l+t+1:0}return n=function(n,l=4){e=l-1,t=l-1,o.push([e,t]);for(let n=0;n<80;n++)switch(Math.floor(4*Math.random())){case 0:r(0!=e?"up":"down"),o.push([e,t]);break;case 1:r(t!=l-1?"right":"left"),o.push([e,t]);break;case 2:r(e!=l-1?"down":"up"),o.push([e,t]);break;case 3:0!=t?r("left"):(r("right"),o.push([e,t]));break;default:throw n--,new Error(">:(")}return n}(n),console.log(n),function(e=4){let t,o="";for(let r=0,l=0;r<e;r++)for(let a=0;a<e;a++){t=n[r][a];let e=n[r][a]?"cell":"empty";o+=`<div style='order:${l++};' id='cell-${t}' class='${e}'>${t}</div>`}return o}()}(),console.table(o),document.body.appendChild(l)}(),document.querySelectorAll(".cell").forEach((o=>{o.addEventListener("mousedown",(o=>{!function(o){console.log("in swap"),o=parseInt(o);for(let r=0;r<n.length;r++)for(let l=0;l<n[r].length;l++)n[r][l]===o&&(console.log(n[r][l],n[e][t]),(Math.abs(e-r)<=1&&t-l==0||Math.abs(t-l)<=1&&e-r==0)&&([n[r][l],n[e][t]]=[n[e][t],n[r][l]],e=r,t=l,console.log(n)))}(o.target.innerHTML)}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,