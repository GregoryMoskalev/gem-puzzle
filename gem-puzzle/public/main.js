(()=>{"use strict";const t=new class{constructor(){this.history=[],this.size=4,this.emptyX=0,this.emptyY=0,this.arr=[],this.movesCounter=null,this.animationTime=300,this.cellSize=104,this.removeBoard=()=>{document.querySelectorAll(".board").forEach((t=>{document.body.removeChild(t)}))}}move(t){switch(t){case"up":this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX-1][this.emptyY],this.arr[this.emptyX-1][this.emptyY]=0,this.emptyX-=1;break;case"down":this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX+1][this.emptyY],this.arr[this.emptyX+1][this.emptyY]=0,this.emptyX+=1;break;case"right":this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY+1],this.arr[this.emptyX][this.emptyY+1]=0,this.emptyY+=1;break;case"left":this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY-1],this.arr[this.emptyX][this.emptyY-1]=0,this.emptyY-=1;break;default:throw new Error(">:(")}}shuffle(){this.history.push([this.emptyX,this.emptyY]);for(let t=0;t<this.size**3;t+=1)switch(Math.floor(4*Math.random())){case 0:0!==this.emptyX?this.move("up"):this.move("down"),this.history.push([this.emptyX,this.emptyY]);break;case 1:this.emptyY!==this.size-1?this.move("right"):this.move("left"),this.history.push([this.emptyX,this.emptyY]);break;case 2:this.emptyX!==this.size-1?this.move("down"):this.move("up"),this.history.push([this.emptyX,this.emptyY]);break;case 3:0!==this.emptyY?this.move("left"):(this.move("right"),this.history.push([this.emptyX,this.emptyY]));break;default:throw t-=1,new Error(">:(")}}renderBoard(){this.movesCounter=0,document.querySelector(".move").innerHTML=this.movesCounter;let t,e="";for(let s=0,i=1;s<this.size;s+=1)for(let r=0;r<this.size;r+=1){t=this.arr[s][r];const h=this.arr[s][r]?"cell":"cell empty",a=!!this.arr[s][r];i+=1,e+=`<div style='order:${i};' id='cell-${t}' class='${h}' draggable="${a}">${t}</div>`}const s=document.createElement("div");s.classList.add("board"),s.innerHTML=e,document.body.appendChild(s)}createBoard(){this.emptyX=this.size-1,this.emptyY=this.size-1;for(let t=0;t<this.size;t+=1){this.arr[t]=[];for(let e=0;e<this.size;e+=1)t+e!==2*(this.size-1)?this.arr[t][e]=t*this.size+e+1:this.arr[t][e]=0}}draw(){const t=this.cellSize/this.animationTime*this.timePassed;switch(this.direction){case"up":this.e.style.transform=`translate( 0, ${-t}px)`;break;case"down":this.e.style.transform=`translate( 0, ${t}px)`;break;case"left":this.e.style.transform=`translate( ${-t}px, 0)`;break;case"right":this.e.style.transform=`translate( ${t}px, 0)`;break;default:throw new Error(">:(")}}moveAnimation(){this.start=Date.now(),this.timer=setInterval((()=>{this.timePassed=Date.now()-this.start,this.timePassed>=this.animationTime?clearInterval(this.timer):this.draw()}),20)}swap(t){for(let e=0;e<this.arr.length;e+=1)for(let s=0;s<this.arr[e].length;s+=1)if(this.arr[e][s]===t&&(Math.abs(this.emptyX-e)<=1&&this.emptyY-s==0||Math.abs(this.emptyY-s)<=1&&this.emptyX-e==0)){this.movesCounter+=1,document.querySelector(".move").innerHTML=this.movesCounter;const t=document.querySelector("#cell-"+this.arr[this.emptyX][this.emptyY]);return this.e=document.querySelector("#cell-"+this.arr[e][s]),this.emptyX-e<0?(console.log("up!"),this.direction="up",this.moveAnimation()):this.emptyX-e>0?(this.direction="down",this.moveAnimation()):this.emptyY-s<0?(this.direction="left",this.moveAnimation(),console.log("left")):this.emptyY-s>0&&(this.direction="right",this.moveAnimation(),console.log("right")),setTimeout((()=>{const e=t.style.order;t.style.order=this.e.style.order,this.e.style.order=e,this.e.style.transform=""}),this.animationTime),[this.arr[e][s],this.arr[this.emptyX][this.emptyY]]=[this.arr[this.emptyX][this.emptyY],this.arr[e][s]],this.emptyX=e,this.emptyY=s,void console.table(this.arr)}}init(){this.removeBoard(),this.createBoard(),this.shuffle(),this.renderBoard(),console.table(this.arr),document.querySelectorAll(".cell").forEach((t=>{t.addEventListener("mouseup",(t=>{const e=t.target;this.swap(parseInt(e.innerHTML,10))})),t.addEventListener("dragstart",this.dragStart),t.addEventListener("dragover",this.dragOver),t.addEventListener("drop",this.dragDrop),t.addEventListener("dragend",this.dragEnd)}))}},e=document.createElement("header");e.innerHTML='  \n<header class="header">\n  <button class="new-game">New game</button>\n  <div class="timer"><span>Timer:</span><span class="time">0</span></div>\n  <div class="moves"><span>Moves:</span><span class="move">0</span></div>\n</header>',document.body.appendChild(e),t.init(),document.querySelector(".new-game").addEventListener("click",(()=>{t.init()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,