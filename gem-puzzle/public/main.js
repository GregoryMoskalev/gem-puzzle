(()=>{"use strict";class t{constructor(){this.currentTime=0}calcCurrentTime(){this.time=setInterval((()=>{this.currentTime+=1,this.secToMinAndSec()}),1e3)}secToMinAndSec(){this.minutes=Math.floor(this.currentTime/60),this.sec=(this.currentTime%60).toFixed(0),this.timer=`${this.minutes}:${this.sec<10?"0":""}${this.sec}`,this.renderTimer()}timerStop(){clearInterval(this.time),this.timer="0:00",this.renderTimer()}timerPause(){clearInterval(this.time)}renderTimer(){document.querySelector(".time").innerHTML=this.timer}init(){this.timerStop(),this.currentTime=null,this.calcCurrentTime()}load(){this.timerStop(),this.secToMinAndSec(),this.renderTimer(),this.calcCurrentTime()}}const e=new class{constructor(){this.timerC=new t,this.history=[],this.size=4,this.emptyX=0,this.emptyY=0,this.animationTime=200,this.boardWidth=40.8,this.marginSize=.1,this.soundOn=!0,this.winSound=new Audio("../assets/win.mp3"),this.slideSound=new Audio("../assets/slide.mp3"),this.slideSound.volume=.2,this.removeBoard=()=>{document.querySelectorAll(".board").forEach((t=>{document.body.removeChild(t)}))}}randomImgNumber(t,e){this.imgNumb=Math.floor(Math.random()*(t-e)+e)}back(){this.history.pop(),this.backTimer()}backTimer(){setTimeout((()=>{if(this.history.length){const[t,e]=this.history.pop();this.e=document.querySelector("#cell-"+this.arr[t][e]),this.moveAnimation([t,e]),setTimeout((()=>{const i=this.arr[this.emptyX][this.emptyY];this.arr[this.emptyX][this.emptyY]=this.arr[t][e],this.arr[t][e]=i,this.emptyX=t,this.emptyY=e,this.removeBoard(),this.renderBoard(),this.playSlideSound(),this.backTimer()}),this.animationTime)}else this.checkWin(!0)}),this.animationTime)}move(t){switch(t){case"up":0!==this.emptyX&&(this.history.length<=2||this.emptyX-1!==this.history[this.history.length-2][0])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX-1][this.emptyY],this.arr[this.emptyX-1][this.emptyY]=0,this.emptyX-=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"down":this.emptyX!==this.size-1&&(this.history.length<=2||this.emptyX+1!==this.history[this.history.length-2][0])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX+1][this.emptyY],this.arr[this.emptyX+1][this.emptyY]=0,this.emptyX+=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"right":this.emptyY!==this.size-1&&(this.history.length<=2||this.emptyY+1!==this.history[this.history.length-2][1])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY+1],this.arr[this.emptyX][this.emptyY+1]=0,this.emptyY+=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"left":0!==this.emptyY&&(this.history.length<=2||this.emptyY-1!==this.history[this.history.length-2][1])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY-1],this.arr[this.emptyX][this.emptyY-1]=0,this.emptyY-=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;default:throw new Error(">:(")}}createBoard(){const t=[];this.bgPosArr=[];for(let e=0;e<this.size;e+=1){t[e]=[];for(let i=0;i<this.size;i+=1)e+i!==2*(this.size-1)?(t[e][i]=e*this.size+i+1,this.bgPosArr.push(`${Math.round(100/(this.size-1)*i)}% ${Math.round(100/(this.size-1)*e)}%`)):t[e][i]=0}return t}shuffle(){for(this.history.push([this.emptyX,this.emptyY]),this.counter=0;this.counter<this.size**3;this.counter+=1)switch(Math.floor(4*Math.random())){case 0:this.move("up");break;case 1:this.move("right");break;case 2:this.move("down");break;case 3:this.move("left");break;default:throw new Error(">:(")}}renderBoard(){let t='<div class="score-list">test</div>';const e=this.boardWidth+"rem";let i;for(let s=0,r=1;s<this.size;s+=1)for(let n=0;n<this.size;n+=1){i=this.arr[s][n];const h=this.arr[s][n]?"cell":"cell empty",o=!!this.arr[s][n],a=this.bgPosArr[i-1],m=this.arr[s][n]?`background: url(../assets/images/${this.imgNumb}.jpg); background-position: ${a}; background-size: ${e};`:"";r+=1,t+=`<div \n          style='width:${this.cellSize}rem;\n          height:${this.cellSize}rem;\n          order:${r};\n          ${m}'\n          id='cell-${i}'\n          class='${h}'\n          draggable="${o}">${i}</div>`}const s=document.createElement("div");s.classList.add("board"),s.style.width=e,s.innerHTML=t,document.body.appendChild(s)}draw(){const t=this.cellSize/this.animationTime*this.timePassed;switch(this.direction){case"up":this.e.style.transform=`translate( 0, ${-t}rem)`;break;case"down":this.e.style.transform=`translate( 0, ${t}rem)`;break;case"left":this.e.style.transform=`translate( ${-t}rem, 0)`;break;case"right":this.e.style.transform=`translate( ${t}rem, 0)`;break;default:throw new Error(">:(")}}moveAnimation([t,e]){this.emptyX<t?this.direction="up":this.emptyX>t?this.direction="down":this.emptyY<e?this.direction="left":this.emptyY>e&&(this.direction="right"),this.inAnimation=!0,this.start=Date.now(),this.timer=setInterval((()=>{if(this.timePassed=Date.now()-this.start,this.timePassed>=this.animationTime)return clearInterval(this.timer),void(this.inAnimation=!1);this.draw()}),20)}toggleSound(){this.soundOn=!this.soundOn}swap(t){if(!this.inAnimation)for(let e=0;e<this.arr.length;e+=1)for(let i=0;i<this.arr[e].length;i+=1)if(this.arr[e][i]===t&&(Math.abs(this.emptyX-e)<=1&&this.emptyY-i==0||Math.abs(this.emptyY-i)<=1&&this.emptyX-e==0)){this.movesCounter+=1,document.querySelector(".move").innerHTML=this.movesCounter;const t=document.querySelector("#cell-"+this.arr[this.emptyX][this.emptyY]);return this.e=document.querySelector("#cell-"+this.arr[e][i]),this.moveAnimation([e,i]),this.playSlideSound(),setTimeout((()=>{const e=t.style.order;t.style.order=this.e.style.order,this.e.style.order=e,this.e.style.transform="",this.emptyX===this.emptyY&&this.emptyY===this.size-1&&this.checkWin()&&this.timerC.timerPause()}),this.animationTime),[this.arr[e][i],this.arr[this.emptyX][this.emptyY]]=[this.arr[this.emptyX][this.emptyY],this.arr[e][i]],this.emptyX=e,this.emptyY=i,void this.history.push([this.emptyX,this.emptyY])}}setScore(){let t=JSON.parse(localStorage.getItem("score-list"))||[];t.push({moves:this.movesCounter,size:this.size,time:this.timerC.timer}),t.length>10&&(t.sort(((t,e)=>t.moves-e.moves)),t=t.slice(0,10)),localStorage.setItem("score-list",JSON.stringify(t))}getScoreList(){this.scoreList=!this.scoreList;const t=document.querySelector(".score-list"),e=JSON.parse(localStorage.getItem("score-list"))||[];let i="";for(let t=e.length-1;t>=0;t-=1)i+=`<li>Size: ${e[t].size},&nbsp;&nbsp;&nbsp;&nbsp;Moves: ${e[t].moves},&nbsp;&nbsp;&nbsp;&nbsp;Time: ${e[t].time}</li>`;t.innerHTML=`<h2>Best Scores</h2>\n      <ol class="score">${i}</ol>`,this.scoreList?(t.classList.add("score-list-on"),this.timerC.timerPause()):(t.classList.remove("score-list-on"),this.timerC.calcCurrentTime())}checkWin(t){for(let t=0;t<this.size;t+=1)for(let e=0;e<this.size;e+=1)if(t+e!==2*(this.size-1)&&this.win[t][e]!==this.arr[t][e])return!1;return this.playWinSound(),this.setWinMessage(t),this.setScore(),!0}setWinMessage(t){this.winBoard=document.querySelector(".board"),this.winBoard.classList.add("win"),this.winBoard.innerHTML+=`<div style="background-image: url(../assets/images/${this.imgNumb}.jpg);" class='win-text'>${t?"ЧИТЕР!":`Ура! Вы решили головоломку за ${document.querySelector(".time").innerHTML} и ${document.querySelector(".move").innerHTML} ходов</div>`}</div>`,setTimeout((()=>{this.winBoard.querySelector(".win-text").style.opacity=1}),50)}playWinSound(){this.soundOn&&(this.winSound.currentTime=0,this.winSound.play())}playSlideSound(){this.soundOn&&(this.slideSound.currentTime=0,this.slideSound.play())}init(){this.scoreList=!1,this.randomImgNumber(150,1),this.history=[],this.movesCounter=0,document.querySelector(".move").innerHTML=this.movesCounter,this.size=document.getElementById("fieldSize").value,this.cellSize=parseFloat(this.boardWidth/this.size-2*this.marginSize).toFixed(3),this.removeBoard(),this.emptyX=this.size-1,this.emptyY=this.size-1,this.arr=this.createBoard(),this.win=this.createBoard(),this.shuffle(),this.renderBoard(),this.timerC.init(),document.querySelectorAll(".cell").forEach((t=>{t.addEventListener("mouseup",(t=>{const e=t.target;this.swap(parseInt(e.innerHTML,10))})),t.addEventListener("dragstart",this.dragStart),t.addEventListener("dragover",this.dragOver),t.addEventListener("drop",this.dragDrop),t.addEventListener("dragend",this.dragEnd)}))}load(){this.cellSize=parseFloat(this.boardWidth/this.size-2*this.marginSize).toFixed(3),document.querySelector(".move").innerHTML=this.movesCounter,this.removeBoard(),this.renderBoard(),this.win=this.createBoard(),this.timerC.init(),document.querySelectorAll(".cell").forEach((t=>{t.addEventListener("mouseup",(t=>{const e=t.target;this.swap(parseInt(e.innerHTML,10))})),t.addEventListener("dragstart",this.dragStart),t.addEventListener("dragover",this.dragOver),t.addEventListener("drop",this.dragDrop),t.addEventListener("dragend",this.dragEnd)}))}},i=document.createElement("header");i.classList.add("header"),i.innerHTML='<h1 class="heading">gem puzzle</h1>',document.body.appendChild(i);const s=document.createElement("div");s.classList.add("menu"),s.innerHTML=`  \n  <div class="settings">\n    <button class="new-game btn">New</button>\n    <button class="save btn">Save</button>\n    <button class="load btn">Load</button>\n    <button class="score btn">Score</button>\n    <button class="sound btn ${e.soundOn?"btn-on":""}">Sound</button>\n    <div class="size">\n      <select id="fieldSize">\n      <option selected="selected" value="4" disabled>Field size</option>\n        <option value="3">3</option>\n        <option value="4">4</option>\n        <option value="5">5</option>\n        <option value="6">6</option>\n        <option value="7">7</option>\n        <option value="8">8</option>\n      </select>\n    </div>\n    <button class="cheat btn">CHEAT</button>\n  </div>\n  <div class="counters">\n    <div class="timer"><span>Timer: </span><span class="time">0:00</span></div>\n    <div class="moves"><span>Moves: </span><span class="move">0</span></div>\n  </div>`,document.body.appendChild(s),e.init(),document.querySelector(".new-game").addEventListener("click",(()=>{e.init()})),document.querySelector(".save").addEventListener("click",(()=>{localStorage.setItem("gameSave",JSON.stringify({bgPosition:e.bgPosArr,history:e.history,size:e.size,boardTable:e.arr,time:e.timerC.currentTime,moves:e.movesCounter,zero:[e.emptyX,e.emptyY],imgNumb:e.imgNumb}))})),document.querySelector(".load").addEventListener("click",(()=>{const{bgPosition:t,history:i,size:s,boardTable:r,time:n,moves:h,zero:o,imgNumb:a}=JSON.parse(localStorage.getItem("gameSave"));e.bgPosArr=t,e.history=i,e.size=s,e.timerC.currentTime=n,e.movesCounter=h,e.arr=r,[e.emptyX,e.emptyY]=o,e.imgNumb=a,e.load(),e.timerC.load()})),document.getElementById("fieldSize").addEventListener("change",(()=>{e.init(),e.timerC.init()})),document.querySelector(".cheat").addEventListener("click",(()=>{e.timerC.timerPause(),e.back()})),document.querySelector(".sound").addEventListener("click",(t=>{e.toggleSound(),e.soundOn?t.target.classList.add("btn-on"):t.target.classList.remove("btn-on")})),document.querySelector(".score").addEventListener("click",(t=>{e.getScoreList(),e.scoreList?t.target.classList.add("btn-on"):t.target.classList.remove("btn-on")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,