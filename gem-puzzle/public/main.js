(()=>{"use strict";var e,t,i={134:()=>{class e{constructor(){this.currentTime=0}calcCurrentTime(){this.time=setInterval((()=>{this.currentTime+=1,this.secToMinAndSec()}),1e3)}secToMinAndSec(){this.minutes=Math.floor(this.currentTime/60),this.sec=(this.currentTime%60).toFixed(0),this.timer=`${this.minutes}:${this.sec<10?"0":""}${this.sec}`,this.renderTimer()}timerStop(){clearInterval(this.time),this.timer="0:00",this.renderTimer()}timerPause(){clearInterval(this.time)}renderTimer(){document.querySelector(".time").innerHTML=this.timer}init(){this.timerStop(),this.currentTime=null,this.calcCurrentTime()}load(){this.timerStop(),this.secToMinAndSec(),this.renderTimer(),this.calcCurrentTime()}}const t=new class{constructor(){this.timerC=new e,this.history=[],this.size=4,this.emptyX=0,this.emptyY=0,this.animationTime=200,this.boardWidth=40.8,this.marginSize=.1,this.soundOn=!0,this.winSound=new Audio("./assets/win.mp3"),this.slideSound=new Audio("./assets/slide.mp3"),this.slideSound.volume=.2,this.dragNDropSound=new Audio("./assets/whoosh-grainy_gkoaqyn_.mp3"),this.dragNDropSound.volume=.3,this.removeBoard=()=>{document.querySelectorAll(".board").forEach((e=>{document.body.removeChild(e)}))},this.findElem=e=>{for(let t=0;t<this.arr.length;t+=1)for(let i=0;i<this.arr.length;i+=1)if(this.arr[t][i]===parseInt(e.innerHTML,10))return[t,i];throw new Error(e)},this.dragDrop=e=>{const t=e.target,i=document.querySelector(".hide"),[r,s]=this.findElem(i);this.isNearZero(r,s)&&([this.arr[r][s],this.arr[this.emptyX][this.emptyY]]=[this.arr[this.emptyX][this.emptyY],this.arr[r][s]],[this.emptyX,this.emptyY]=[r,s],[t.style.order,i.style.order]=[i.style.order,t.style.order],this.checkForIdling(),this.history.push([this.emptyX,this.emptyY]),this.playDragSound(),this.addMove()),t.classList.remove("hovered")},this.toggleButtons=()=>{document.querySelectorAll(".btn:not(.sound),#fieldSize").forEach((e=>{e.disabled=!e.disabled}))}}randomImgNumber(e,t){this.imgNumb=Math.floor(Math.random()*(e-t)+t)}back(){this.toggleButtons(),this.history.pop(),this.backTimer()}isNearZero(e,t){return!!(1===Math.abs(this.emptyX-e)&&this.emptyY-t==0||1===Math.abs(this.emptyY-t)&&this.emptyX-e==0)}checkForIdling(){const[e,t]=this.history[this.history.length-2];this.emptyX===e&&this.emptyY===t&&this.history.splice(-2,2)}backTimer(){setTimeout((()=>{if(this.history.length){const[e,t]=this.history.pop();this.e=document.querySelector("#cell-"+this.arr[e][t]),this.moveAnimation([e,t]),setTimeout((()=>{const i=this.arr[this.emptyX][this.emptyY];this.arr[this.emptyX][this.emptyY]=this.arr[e][t],this.arr[e][t]=i,this.emptyX=e,this.emptyY=t,this.removeBoard(),this.renderBoard(),this.playSlideSound(),this.backTimer()}),this.animationTime)}else this.checkWin(!0),this.toggleButtons()}),this.animationTime)}move(e){switch(e){case"up":0!==this.emptyX&&(this.history.length<=1||this.emptyX-1!==this.history[this.history.length-2][0])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX-1][this.emptyY],this.arr[this.emptyX-1][this.emptyY]=0,this.emptyX-=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"down":this.emptyX!==this.size-1&&(this.history.length<=1||this.emptyX+1!==this.history[this.history.length-2][0])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX+1][this.emptyY],this.arr[this.emptyX+1][this.emptyY]=0,this.emptyX+=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"right":this.emptyY!==this.size-1&&(this.history.length<=1||this.emptyY+1!==this.history[this.history.length-2][1])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY+1],this.arr[this.emptyX][this.emptyY+1]=0,this.emptyY+=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"left":0!==this.emptyY&&(this.history.length<=1||this.emptyY-1!==this.history[this.history.length-2][1])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY-1],this.arr[this.emptyX][this.emptyY-1]=0,this.emptyY-=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;default:throw new Error(">:(")}}createBoard(){const e=[];this.bgPosArr=[];for(let t=0;t<this.size;t+=1){e[t]=[];for(let i=0;i<this.size;i+=1)t+i!==2*(this.size-1)?(e[t][i]=t*this.size+i+1,this.bgPosArr.push(`${Math.round(100/(this.size-1)*i)}% ${Math.round(100/(this.size-1)*t)}%`)):e[t][i]=0}return e}shuffle(){for(this.history.push([this.emptyX,this.emptyY]),this.counter=0;this.counter<this.size**3;this.counter+=1)switch(Math.floor(4*Math.random())){case 0:this.move("up");break;case 1:this.move("right");break;case 2:this.move("down");break;case 3:this.move("left");break;default:throw new Error(">:(")}}renderBoard(){let e='<div class="score-list">test</div>';const t=this.boardWidth+"rem";let i;for(let r=0,s=1;r<this.size;r+=1)for(let n=0;n<this.size;n+=1){i=this.arr[r][n];const o=i?"cell":"cell empty",a=!!i,h=i?"":"ondragover = 'event.preventDefault()'",d=this.bgPosArr[i-1],c=i?`background: url(./assets/images/${this.imgNumb}.jpg); background-position: ${d}; background-size: ${t};`:"";s+=1,e+=`<div \n        ${h}\n          style='width:${this.cellSize}rem;\n          height:${this.cellSize}rem;\n          order:${s};\n          ${c}'\n          id='cell-${i}'\n          class='${o}'\n          draggable="${a}">${i}</div>`}const r=document.createElement("div");r.classList.add("board"),r.style.width=t,r.innerHTML=e,document.body.appendChild(r)}addMove(){this.movesCounter+=1,document.querySelector(".move").innerHTML=this.movesCounter}draw(){const e=this.cellSize/this.animationTime*this.timePassed;switch(this.direction){case"up":this.e.style.transform=`translate( 0, ${-e}rem)`;break;case"down":this.e.style.transform=`translate( 0, ${e}rem)`;break;case"left":this.e.style.transform=`translate( ${-e}rem, 0)`;break;case"right":this.e.style.transform=`translate( ${e}rem, 0)`;break;default:throw new Error(">:(")}}moveAnimation([e,t]){this.emptyX<e?this.direction="up":this.emptyX>e?this.direction="down":this.emptyY<t?this.direction="left":this.emptyY>t&&(this.direction="right"),this.inAnimation=!0,this.start=Date.now(),this.timer=setInterval((()=>{if(this.timePassed=Date.now()-this.start,this.timePassed>=this.animationTime)return clearInterval(this.timer),void(this.inAnimation=!1);this.draw()}),20)}toggleSound(){this.soundOn=!this.soundOn}swap(e){if(!this.inAnimation)for(let t=0;t<this.arr.length;t+=1)for(let i=0;i<this.arr[t].length;i+=1)if(this.arr[t][i]===e&&this.isNearZero(t,i)){this.addMove();const e=document.querySelector("#cell-"+this.arr[this.emptyX][this.emptyY]);return this.e=document.querySelector("#cell-"+this.arr[t][i]),this.moveAnimation([t,i]),this.playSlideSound(),setTimeout((()=>{const t=e.style.order;e.style.order=this.e.style.order,this.e.style.order=t,this.e.style.transform="",this.emptyX===this.emptyY&&this.emptyY===this.size-1&&this.checkWin()&&this.timerC.timerPause()}),this.animationTime),[this.arr[t][i],this.arr[this.emptyX][this.emptyY]]=[this.arr[this.emptyX][this.emptyY],this.arr[t][i]],this.emptyX=t,this.emptyY=i,this.checkForIdling(),void this.history.push([this.emptyX,this.emptyY])}}setScore(){let e=JSON.parse(localStorage.getItem("score-list"))||[];e.push({moves:this.movesCounter,size:this.size,time:this.timerC.timer}),e.length>10&&(e.sort(((e,t)=>e.moves-t.moves)),e=e.slice(0,10)),localStorage.setItem("score-list",JSON.stringify(e))}getScoreList(){this.scoreList=!this.scoreList;const e=document.querySelector(".score-list"),t=JSON.parse(localStorage.getItem("score-list"))||[];let i="";for(let e=t.length-1;e>=0;e-=1)i+=`<li>Size: ${t[e].size},&nbsp;&nbsp;&nbsp;&nbsp;Moves: ${t[e].moves},&nbsp;&nbsp;&nbsp;&nbsp;Time: ${t[e].time}</li>`;e.innerHTML=`<h2>Best Scores</h2>\n      <ol class="score">${i}</ol>`,this.scoreList?(e.classList.add("score-list-on"),this.timerC.timerPause()):(e.classList.remove("score-list-on"),this.timerC.calcCurrentTime())}checkWin(e){for(let e=0;e<this.size;e+=1)for(let t=0;t<this.size;t+=1)if(e+t!==2*(this.size-1)&&this.win[e][t]!==this.arr[e][t])return!1;return this.playWinSound(),this.setWinMessage(e),e||this.setScore(),!0}setWinMessage(e){this.winBoard=document.querySelector(".board"),this.winBoard.classList.add("win"),this.winBoard.innerHTML+=`<div style="background-image: url(./assets/images/${this.imgNumb}.jpg);" class='win-text'>${e?"ЧИТЕР!":`Ура! Вы решили головоломку за ${document.querySelector(".time").innerHTML} и ${document.querySelector(".move").innerHTML} ходов</div>`}</div>`,setTimeout((()=>{this.winBoard.querySelector(".win-text").style.opacity=1}),50)}playWinSound(){this.soundOn&&(this.winSound.currentTime=0,this.winSound.play())}playSlideSound(){this.soundOn&&(this.slideSound.currentTime=0,this.slideSound.play())}playDragSound(){this.soundOn&&(this.dragNDropSound.currentTime=.15,this.dragNDropSound.play())}dragStart(){setTimeout((()=>{this.classList.add("hide")}),0)}dragEnd(){this.classList.remove("hide")}dragEnter(){this.classList.add("hovered")}dragLeave(){this.classList.remove("hovered")}init(){this.scoreList=!1,this.randomImgNumber(150,1),this.history=[],this.movesCounter=0,document.querySelector(".move").innerHTML=this.movesCounter,this.size=document.getElementById("fieldSize").value,this.cellSize=parseFloat(this.boardWidth/this.size-2*this.marginSize).toFixed(3),this.removeBoard(),this.emptyX=this.size-1,this.emptyY=this.size-1,this.arr=this.createBoard(),this.win=this.createBoard(),this.shuffle(),this.renderBoard(),this.timerC.init(),document.querySelectorAll(".cell").forEach((e=>{e.addEventListener("mouseup",(e=>{const t=e.target;this.swap(parseInt(t.innerHTML,10))})),e.addEventListener("dragstart",this.dragStart),e.addEventListener("dragover",this.dragOver),e.addEventListener("drop",this.dragDrop),e.addEventListener("dragend",this.dragEnd),e.addEventListener("dragenter",this.dragEnter),e.addEventListener("dragleave",this.dragLeave)}))}load(){this.cellSize=parseFloat(this.boardWidth/this.size-2*this.marginSize).toFixed(3),document.querySelector(".move").innerHTML=this.movesCounter,this.removeBoard(),this.renderBoard(),this.win=this.createBoard(),this.timerC.load(),document.querySelectorAll(".cell").forEach((e=>{e.addEventListener("mouseup",(e=>{const t=e.target;this.swap(parseInt(t.innerHTML,10))})),e.addEventListener("dragstart",this.dragStart),e.addEventListener("dragover",this.dragOver),e.addEventListener("drop",this.dragDrop),e.addEventListener("dragend",this.dragEnd),e.addEventListener("dragenter",this.dragEnter),e.addEventListener("dragleave",this.dragLeave)}))}},i=document.createElement("header");i.classList.add("header"),i.innerHTML='<h1 class="heading">gem puzzle</h1>',document.body.appendChild(i);const r=document.createElement("div");r.classList.add("menu"),r.innerHTML=`  \n  <div class="settings">\n    <button class="new-game btn">New</button>\n    <button class="save btn">Save</button>\n    <button class="load btn">Load</button>\n    <button class="score btn">Score</button>\n    <button class="sound btn ${t.soundOn?"btn-on":""}">Sound</button>\n    <div class="size">\n      <select id="fieldSize">\n      <option selected="selected" value="4" disabled>Field size</option>\n        <option value="3">3</option>\n        <option value="4">4</option>\n        <option value="5">5</option>\n        <option value="6">6</option>\n        <option value="7">7</option>\n        <option value="8">8</option>\n      </select>\n    </div>\n    <button class="cheat btn">CHEAT</button>\n  </div>\n  <div class="counters">\n    <div class="timer"><span>Timer: </span><span class="time">0:00</span></div>\n    <div class="moves"><span>Moves: </span><span class="move">0</span></div>\n  </div>`,document.body.appendChild(r),t.init(),document.querySelector(".new-game").addEventListener("click",(()=>{t.init()})),document.querySelector(".save").addEventListener("click",(()=>{localStorage.setItem("gameSave",JSON.stringify({bgPosition:t.bgPosArr,history:t.history,size:t.size,boardTable:t.arr,time:t.timerC.currentTime,moves:t.movesCounter,zero:[t.emptyX,t.emptyY],imgNumb:t.imgNumb}))})),document.querySelector(".load").addEventListener("click",(()=>{const{bgPosition:e,history:i,size:r,boardTable:s,time:n,moves:o,zero:a,imgNumb:h}=JSON.parse(localStorage.getItem("gameSave"));t.bgPosArr=e,t.history=i,t.size=r,t.timerC.currentTime=n,t.movesCounter=o,t.arr=s,[t.emptyX,t.emptyY]=a,t.imgNumb=h,t.load(),t.timerC.load()})),document.getElementById("fieldSize").addEventListener("change",(()=>{t.init(),t.timerC.init()})),document.querySelector(".cheat").addEventListener("click",(()=>{t.timerC.timerPause(),t.back()})),document.querySelector(".sound").addEventListener("click",(e=>{t.toggleSound(),t.soundOn?e.target.classList.add("btn-on"):e.target.classList.remove("btn-on")})),document.querySelector(".score").addEventListener("click",(e=>{t.getScoreList(),t.scoreList?e.target.classList.add("btn-on"):e.target.classList.remove("btn-on")}))}},r={};function s(e){if(r[e])return r[e].exports;var t=r[e]={exports:{}},n={id:e,module:t,factory:i[e],require:s};return s.i.forEach((function(e){e(n)})),t=n.module,n.factory.call(t.exports,t,t.exports,n.require),t.exports}s.m=i,s.c=r,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.hmrF=()=>s.h()+".hot-update.json",s.h=()=>"3295717228c6c783d576",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="gem-puzzle:",s.l=(i,r,n)=>{if(e[i])e[i].push(r);else{var o,a;if(void 0!==n)for(var h=document.getElementsByTagName("script"),d=0;d<h.length;d++){var c=h[d];if(c.getAttribute("src")==i||c.getAttribute("data-webpack")==t+n){o=c;break}}o||(a=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,s.nc&&o.setAttribute("nonce",s.nc),o.setAttribute("data-webpack",t+n),o.src=i),e[i]=[r];var l=(t,r)=>{o.onerror=o.onload=null,clearTimeout(u);var s=e[i];if(delete e[i],o.parentNode&&o.parentNode.removeChild(o),s&&s.forEach((e=>e(r))),t)return t(r)},u=setTimeout(l.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=l.bind(null,o.onerror),o.onload=l.bind(null,o.onload),a&&document.head.appendChild(o)}},(()=>{var e,t,i,r,n={},o=s.c,a=[],h=[],d="idle";function c(e){d=e;for(var t=0;t<h.length;t++)h[t].call(null,e)}function l(e){if(0===t.length)return e();var i=t;return t=[],Promise.all(i).then((function(){return l(e)}))}function u(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return c("check"),s.hmrM().then((function(r){if(!r)return c(f()?"ready":"idle"),null;c("prepare");var n=[];return t=[],i=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,t){return s.hmrC[t](r.c,r.r,r.m,e,i,n),e}),[])).then((function(){return l((function(){return e?p(e):(c("ready"),n)}))}))}))}function m(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):p(e)}function p(e){e=e||{},f();var t=i.map((function(t){return t(e)}));i=void 0;var s,n=t.map((function(e){return e.error})).filter(Boolean);if(n.length>0)return c("abort"),Promise.resolve().then((function(){throw n[0]}));c("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),c("apply");var o=function(e){s||(s=e)},a=[];return t.forEach((function(e){if(e.apply){var t=e.apply(o);if(t)for(var i=0;i<t.length;i++)a.push(t[i])}})),s?(c("fail"),Promise.resolve().then((function(){throw s}))):r?p(e).then((function(e){return a.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(c("idle"),Promise.resolve(a))}function f(){if(r)return i||(i=[]),Object.keys(s.hmrI).forEach((function(e){r.forEach((function(t){s.hmrI[e](t,i)}))})),r=void 0,!0}s.hmrD=n,s.i.push((function(p){var f,y,v,g=p.module,b=function(i,r){var s=o[r];if(!s)return i;var n=function(t){if(s.hot.active){if(o[t]){var n=o[t].parents;-1===n.indexOf(r)&&n.push(r)}else a=[r],e=t;-1===s.children.indexOf(t)&&s.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+r),a=[];return i(t)},h=function(e){return{configurable:!0,enumerable:!0,get:function(){return i[e]},set:function(t){i[e]=t}}};for(var u in i)Object.prototype.hasOwnProperty.call(i,u)&&"e"!==u&&Object.defineProperty(n,u,h(u));return n.e=function(e){return function(e){switch(d){case"ready":return c("prepare"),t.push(e),l((function(){c("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(i.e(e))},n}(p.require,p.id);g.hot=(f=p.id,y=g,v={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==f,_requireSelf:function(){a=y.parents.slice(),e=f,s(f)},active:!0,accept:function(e,t){if(void 0===e)v._selfAccepted=!0;else if("function"==typeof e)v._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var i=0;i<e.length;i++)v._acceptedDependencies[e[i]]=t||function(){};else v._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)v._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)v._declinedDependencies[e[t]]=!0;else v._declinedDependencies[e]=!0},dispose:function(e){v._disposeHandlers.push(e)},addDisposeHandler:function(e){v._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=v._disposeHandlers.indexOf(e);t>=0&&v._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":i=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](f,i)})),c("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](f,i)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(f)}},check:u,apply:m,status:function(e){if(!e)return d;h.push(e)},addStatusHandler:function(e){h.push(e)},removeStatusHandler:function(e){var t=h.indexOf(e);t>=0&&h.splice(t,1)},data:n[f]},e=void 0,v),g.parents=a,g.children=[],a=[],p.require=b})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),(()=>{var e,t,i,r,n={179:0},o={};function a(e){return new Promise(((t,i)=>{o[e]=t;var r=s.p+s.hu(e),n=new Error;s.l(r,(t=>{if(o[e]){o[e]=void 0;var r=t&&("load"===t.type?"missing":t.type),s=t&&t.target&&t.target.src;n.message="Loading hot update chunk "+e+" failed.\n("+r+": "+s+")",n.name="ChunkLoadError",n.type=r,n.request=s,i(n)}}))}))}function h(o){function a(e){for(var t=[e],i={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var n=r.pop(),o=n.id,a=n.chain,d=s.c[o];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var c=0;c<d.parents.length;c++){var l=d.parents[c],u=s.c[l];if(u){if(u.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([l]),moduleId:o,parentId:l};-1===t.indexOf(l)&&(u.hot._acceptedDependencies[o]?(i[l]||(i[l]=[]),h(i[l],[o])):(delete i[l],t.push(l),r.push({chain:a.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:i}}function h(e,t){for(var i=0;i<t.length;i++){var r=t[i];-1===e.indexOf(r)&&e.push(r)}}s.f&&delete s.f.jsonpHmr,e=void 0;var d={},c=[],l={},u=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var m in t)if(s.o(t,m)){var p,f=t[m],y=!1,v=!1,g=!1,b="";switch((p=f?a(m):{type:"disposed",moduleId:m}).chain&&(b="\nUpdate propagation: "+p.chain.join(" -> ")),p.type){case"self-declined":o.onDeclined&&o.onDeclined(p),o.ignoreDeclined||(y=new Error("Aborted because of self decline: "+p.moduleId+b));break;case"declined":o.onDeclined&&o.onDeclined(p),o.ignoreDeclined||(y=new Error("Aborted because of declined dependency: "+p.moduleId+" in "+p.parentId+b));break;case"unaccepted":o.onUnaccepted&&o.onUnaccepted(p),o.ignoreUnaccepted||(y=new Error("Aborted because "+m+" is not accepted"+b));break;case"accepted":o.onAccepted&&o.onAccepted(p),v=!0;break;case"disposed":o.onDisposed&&o.onDisposed(p),g=!0;break;default:throw new Error("Unexception type "+p.type)}if(y)return{error:y};if(v)for(m in l[m]=f,h(c,p.outdatedModules),p.outdatedDependencies)s.o(p.outdatedDependencies,m)&&(d[m]||(d[m]=[]),h(d[m],p.outdatedDependencies[m]));g&&(h(c,[p.moduleId]),l[m]=u)}t=void 0;for(var S,w=[],E=0;E<c.length;E++){var L=c[E];s.c[L]&&s.c[L].hot._selfAccepted&&l[L]!==u&&!s.c[L].hot._selfInvalidated&&w.push({module:L,require:s.c[L].hot._requireSelf,errorHandler:s.c[L].hot._selfAccepted})}return{dispose:function(){var e;i.forEach((function(e){delete n[e]})),i=void 0;for(var t,r=c.slice();r.length>0;){var o=r.pop(),a=s.c[o];if(a){var h={},l=a.hot._disposeHandlers;for(E=0;E<l.length;E++)l[E].call(null,h);for(s.hmrD[o]=h,a.hot.active=!1,delete s.c[o],delete d[o],E=0;E<a.children.length;E++){var u=s.c[a.children[E]];u&&(e=u.parents.indexOf(o))>=0&&u.parents.splice(e,1)}}}for(var m in d)if(s.o(d,m)&&(a=s.c[m]))for(S=d[m],E=0;E<S.length;E++)t=S[E],(e=a.children.indexOf(t))>=0&&a.children.splice(e,1)},apply:function(e){for(var t in l)s.o(l,t)&&(s.m[t]=l[t]);for(var i=0;i<r.length;i++)r[i](s);for(var n in d)if(s.o(d,n)){var a=s.c[n];if(a){S=d[n];for(var h=[],u=[],m=0;m<S.length;m++){var p=S[m],f=a.hot._acceptedDependencies[p];if(f){if(-1!==h.indexOf(f))continue;h.push(f),u.push(p)}}for(var y=0;y<h.length;y++)try{h[y].call(null,S)}catch(t){o.onErrored&&o.onErrored({type:"accept-errored",moduleId:n,dependencyId:u[y],error:t}),o.ignoreErrored||e(t)}}}for(var v=0;v<w.length;v++){var g=w[v],b=g.module;try{g.require(b)}catch(t){if("function"==typeof g.errorHandler)try{g.errorHandler(t)}catch(i){o.onErrored&&o.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:i,originalError:t}),o.ignoreErrored||e(i),e(t)}else o.onErrored&&o.onErrored({type:"self-accept-errored",moduleId:b,error:t}),o.ignoreErrored||e(t)}}return c}}}self.webpackHotUpdategem_puzzle=(e,i,n)=>{for(var a in i)s.o(i,a)&&(t[a]=i[a]);n&&r.push(n),o[e]&&(o[e](),o[e]=void 0)},s.hmrI.jsonp=function(e,n){t||(t={},r=[],i=[],n.push(h)),s.o(t,e)||(t[e]=s.m[e])},s.hmrC.jsonp=function(o,d,c,l,u,m){u.push(h),e={},i=d,t=c.reduce((function(e,t){return e[t]=!1,e}),{}),r=[],o.forEach((function(t){s.o(n,t)&&void 0!==n[t]&&(l.push(a(t)),e[t]=!0)})),s.f&&(s.f.jsonpHmr=function(t,i){e&&!s.o(e,t)&&s.o(n,t)&&void 0!==n[t]&&(i.push(a(t)),e[t]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(134)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,