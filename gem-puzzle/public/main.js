(()=>{"use strict";class t{constructor(){this.currentTime=0}calcCurrentTime(){this.time=setInterval((()=>{this.currentTime+=1,this.secToMinAndSec()}),1e3)}secToMinAndSec(){this.minutes=Math.floor(this.currentTime/60),this.sec=(this.currentTime%60).toFixed(0),this.timer=`${this.minutes}:${this.sec<10?"0":""}${this.sec}`,this.renderTimer()}timerStop(){clearInterval(this.time),this.timer="0:00",this.renderTimer()}timerPause(){clearInterval(this.time)}renderTimer(){document.querySelector(".time").innerHTML=this.timer}init(){this.timerStop(),this.currentTime=null,this.calcCurrentTime()}load(){this.timerStop(),this.secToMinAndSec(),this.renderTimer(),this.calcCurrentTime()}}const e=new class{constructor(){this.timerC=new t,this.history=[],this.size=4,this.emptyX=0,this.emptyY=0,this.animationTime=200,this.boardWidth=40.8,this.marginSize=.1,this.soundOn=!0,this.winSound=new Audio("../assets/win.mp3"),this.slideSound=new Audio("../assets/slide.mp3"),this.slideSound.volume=.2,this.dragNDropSound=new Audio("../assets/whoosh-grainy_gkoaqyn_.mp3"),this.dragNDropSound.volume=.3,this.removeBoard=()=>{document.querySelectorAll(".board").forEach((t=>{document.body.removeChild(t)}))},this.findElem=t=>{for(let e=0;e<this.arr.length;e+=1)for(let s=0;s<this.arr.length;s+=1)if(this.arr[e][s]===parseInt(t.innerHTML,10))return[e,s];throw new Error(t)},this.dragDrop=t=>{const e=t.target,s=document.querySelector(".hide"),[i,r]=this.findElem(s);this.isNearZero(i,r)&&([this.arr[i][r],this.arr[this.emptyX][this.emptyY]]=[this.arr[this.emptyX][this.emptyY],this.arr[i][r]],[this.emptyX,this.emptyY]=[i,r],[e.style.order,s.style.order]=[s.style.order,e.style.order],this.checkForIdling(),this.history.push([this.emptyX,this.emptyY]),this.playDragSound(),this.addMove()),e.classList.remove("hovered")},this.toggleButtons=()=>{document.querySelectorAll(".btn:not(.sound),#fieldSize").forEach((t=>{t.disabled=!t.disabled}))}}randomImgNumber(t,e){this.imgNumb=Math.floor(Math.random()*(t-e)+e)}back(){this.toggleButtons(),this.history.pop(),this.backTimer()}isNearZero(t,e){return!!(Math.abs(this.emptyX-t)<=1&&this.emptyY-e==0||Math.abs(this.emptyY-e)<=1&&this.emptyX-t==0)}checkForIdling(){const[t,e]=this.history[this.history.length-2];this.emptyX===t&&this.emptyY===e&&this.history.splice(-2,2)}backTimer(){setTimeout((()=>{if(this.history.length){const[t,e]=this.history.pop();this.e=document.querySelector("#cell-"+this.arr[t][e]),this.moveAnimation([t,e]),setTimeout((()=>{const s=this.arr[this.emptyX][this.emptyY];this.arr[this.emptyX][this.emptyY]=this.arr[t][e],this.arr[t][e]=s,this.emptyX=t,this.emptyY=e,this.removeBoard(),this.renderBoard(),this.playSlideSound(),this.backTimer()}),this.animationTime)}else this.checkWin(!0),this.toggleButtons()}),this.animationTime)}move(t){switch(t){case"up":0!==this.emptyX&&(this.history.length<=1||this.emptyX-1!==this.history[this.history.length-2][0])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX-1][this.emptyY],this.arr[this.emptyX-1][this.emptyY]=0,this.emptyX-=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"down":this.emptyX!==this.size-1&&(this.history.length<=1||this.emptyX+1!==this.history[this.history.length-2][0])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX+1][this.emptyY],this.arr[this.emptyX+1][this.emptyY]=0,this.emptyX+=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"right":this.emptyY!==this.size-1&&(this.history.length<=1||this.emptyY+1!==this.history[this.history.length-2][1])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY+1],this.arr[this.emptyX][this.emptyY+1]=0,this.emptyY+=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"left":0!==this.emptyY&&(this.history.length<=1||this.emptyY-1!==this.history[this.history.length-2][1])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY-1],this.arr[this.emptyX][this.emptyY-1]=0,this.emptyY-=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;default:throw new Error(">:(")}}createBoard(){const t=[];this.bgPosArr=[];for(let e=0;e<this.size;e+=1){t[e]=[];for(let s=0;s<this.size;s+=1)e+s!==2*(this.size-1)?(t[e][s]=e*this.size+s+1,this.bgPosArr.push(`${Math.round(100/(this.size-1)*s)}% ${Math.round(100/(this.size-1)*e)}%`)):t[e][s]=0}return t}shuffle(){for(this.history.push([this.emptyX,this.emptyY]),this.counter=0;this.counter<this.size**3;this.counter+=1)switch(Math.floor(4*Math.random())){case 0:this.move("up");break;case 1:this.move("right");break;case 2:this.move("down");break;case 3:this.move("left");break;default:throw new Error(">:(")}}renderBoard(){let t='<div class="score-list">test</div>';const e=this.boardWidth+"rem";let s;for(let i=0,r=1;i<this.size;i+=1)for(let n=0;n<this.size;n+=1){s=this.arr[i][n];const h=s?"cell":"cell empty",o=!!s,a=s?"":"ondragover = 'event.preventDefault()'",d=this.bgPosArr[s-1],m=s?`background: url(../assets/images/${this.imgNumb}.jpg); background-position: ${d}; background-size: ${e};`:"";r+=1,t+=`<div \n        ${a}\n          style='width:${this.cellSize}rem;\n          height:${this.cellSize}rem;\n          order:${r};\n          ${m}'\n          id='cell-${s}'\n          class='${h}'\n          draggable="${o}">${s}</div>`}const i=document.createElement("div");i.classList.add("board"),i.style.width=e,i.innerHTML=t,document.body.appendChild(i)}addMove(){this.movesCounter+=1,document.querySelector(".move").innerHTML=this.movesCounter}draw(){const t=this.cellSize/this.animationTime*this.timePassed;switch(this.direction){case"up":this.e.style.transform=`translate( 0, ${-t}rem)`;break;case"down":this.e.style.transform=`translate( 0, ${t}rem)`;break;case"left":this.e.style.transform=`translate( ${-t}rem, 0)`;break;case"right":this.e.style.transform=`translate( ${t}rem, 0)`;break;default:throw new Error(">:(")}}moveAnimation([t,e]){this.emptyX<t?this.direction="up":this.emptyX>t?this.direction="down":this.emptyY<e?this.direction="left":this.emptyY>e&&(this.direction="right"),this.inAnimation=!0,this.start=Date.now(),this.timer=setInterval((()=>{if(this.timePassed=Date.now()-this.start,this.timePassed>=this.animationTime)return clearInterval(this.timer),void(this.inAnimation=!1);this.draw()}),20)}toggleSound(){this.soundOn=!this.soundOn}swap(t){if(!this.inAnimation)for(let e=0;e<this.arr.length;e+=1)for(let s=0;s<this.arr[e].length;s+=1)if(this.arr[e][s]===t&&this.isNearZero(e,s)){this.addMove();const t=document.querySelector("#cell-"+this.arr[this.emptyX][this.emptyY]);return this.e=document.querySelector("#cell-"+this.arr[e][s]),this.moveAnimation([e,s]),this.playSlideSound(),setTimeout((()=>{const e=t.style.order;t.style.order=this.e.style.order,this.e.style.order=e,this.e.style.transform="",this.emptyX===this.emptyY&&this.emptyY===this.size-1&&this.checkWin()&&this.timerC.timerPause()}),this.animationTime),[this.arr[e][s],this.arr[this.emptyX][this.emptyY]]=[this.arr[this.emptyX][this.emptyY],this.arr[e][s]],this.emptyX=e,this.emptyY=s,this.checkForIdling(),void this.history.push([this.emptyX,this.emptyY])}}setScore(){let t=JSON.parse(localStorage.getItem("score-list"))||[];t.push({moves:this.movesCounter,size:this.size,time:this.timerC.timer}),t.length>10&&(t.sort(((t,e)=>t.moves-e.moves)),t=t.slice(0,10)),localStorage.setItem("score-list",JSON.stringify(t))}getScoreList(){this.scoreList=!this.scoreList;const t=document.querySelector(".score-list"),e=JSON.parse(localStorage.getItem("score-list"))||[];let s="";for(let t=e.length-1;t>=0;t-=1)s+=`<li>Size: ${e[t].size},&nbsp;&nbsp;&nbsp;&nbsp;Moves: ${e[t].moves},&nbsp;&nbsp;&nbsp;&nbsp;Time: ${e[t].time}</li>`;t.innerHTML=`<h2>Best Scores</h2>\n      <ol class="score">${s}</ol>`,this.scoreList?(t.classList.add("score-list-on"),this.timerC.timerPause()):(t.classList.remove("score-list-on"),this.timerC.calcCurrentTime())}checkWin(t){for(let t=0;t<this.size;t+=1)for(let e=0;e<this.size;e+=1)if(t+e!==2*(this.size-1)&&this.win[t][e]!==this.arr[t][e])return!1;return this.playWinSound(),this.setWinMessage(t),t||this.setScore(),!0}setWinMessage(t){this.winBoard=document.querySelector(".board"),this.winBoard.classList.add("win"),this.winBoard.innerHTML+=`<div style="background-image: url(../assets/images/${this.imgNumb}.jpg);" class='win-text'>${t?"ЧИТЕР!":`Ура! Вы решили головоломку за ${document.querySelector(".time").innerHTML} и ${document.querySelector(".move").innerHTML} ходов</div>`}</div>`,setTimeout((()=>{this.winBoard.querySelector(".win-text").style.opacity=1}),50)}playWinSound(){this.soundOn&&(this.winSound.currentTime=0,this.winSound.play())}playSlideSound(){this.soundOn&&(this.slideSound.currentTime=0,this.slideSound.play())}playDragSound(){this.soundOn&&(this.dragNDropSound.currentTime=.15,this.dragNDropSound.play())}dragStart(){setTimeout((()=>{this.classList.add("hide")}),0)}dragEnd(){this.classList.remove("hide")}dragEnter(){this.classList.add("hovered")}dragLeave(){this.classList.remove("hovered")}init(){this.scoreList=!1,this.randomImgNumber(150,1),this.history=[],this.movesCounter=0,document.querySelector(".move").innerHTML=this.movesCounter,this.size=document.getElementById("fieldSize").value,this.cellSize=parseFloat(this.boardWidth/this.size-2*this.marginSize).toFixed(3),this.removeBoard(),this.emptyX=this.size-1,this.emptyY=this.size-1,this.arr=this.createBoard(),this.win=this.createBoard(),this.shuffle(),this.renderBoard(),this.timerC.init(),document.querySelectorAll(".cell").forEach((t=>{t.addEventListener("mouseup",(t=>{const e=t.target;this.swap(parseInt(e.innerHTML,10))})),t.addEventListener("dragstart",this.dragStart),t.addEventListener("dragover",this.dragOver),t.addEventListener("drop",this.dragDrop),t.addEventListener("dragend",this.dragEnd),t.addEventListener("dragenter",this.dragEnter),t.addEventListener("dragleave",this.dragLeave)}))}load(){this.cellSize=parseFloat(this.boardWidth/this.size-2*this.marginSize).toFixed(3),document.querySelector(".move").innerHTML=this.movesCounter,this.removeBoard(),this.renderBoard(),this.win=this.createBoard(),this.timerC.init(),document.querySelectorAll(".cell").forEach((t=>{t.addEventListener("mouseup",(t=>{const e=t.target;this.swap(parseInt(e.innerHTML,10))})),t.addEventListener("dragstart",this.dragStart),t.addEventListener("dragover",this.dragOver),t.addEventListener("drop",this.dragDrop),t.addEventListener("dragend",this.dragEnd),t.addEventListener("dragenter",this.dragEnter),t.addEventListener("dragleave",this.dragLeave)}))}},s=document.createElement("header");s.classList.add("header"),s.innerHTML='<h1 class="heading">gem puzzle</h1>',document.body.appendChild(s);const i=document.createElement("div");i.classList.add("menu"),i.innerHTML=`  \n  <div class="settings">\n    <button class="new-game btn">New</button>\n    <button class="save btn">Save</button>\n    <button class="load btn">Load</button>\n    <button class="score btn">Score</button>\n    <button class="sound btn ${e.soundOn?"btn-on":""}">Sound</button>\n    <div class="size">\n      <select id="fieldSize">\n      <option selected="selected" value="4" disabled>Field size</option>\n        <option value="3">3</option>\n        <option value="4">4</option>\n        <option value="5">5</option>\n        <option value="6">6</option>\n        <option value="7">7</option>\n        <option value="8">8</option>\n      </select>\n    </div>\n    <button class="cheat btn">CHEAT</button>\n  </div>\n  <div class="counters">\n    <div class="timer"><span>Timer: </span><span class="time">0:00</span></div>\n    <div class="moves"><span>Moves: </span><span class="move">0</span></div>\n  </div>`,document.body.appendChild(i),e.init(),document.querySelector(".new-game").addEventListener("click",(()=>{e.init()})),document.querySelector(".save").addEventListener("click",(()=>{localStorage.setItem("gameSave",JSON.stringify({bgPosition:e.bgPosArr,history:e.history,size:e.size,boardTable:e.arr,time:e.timerC.currentTime,moves:e.movesCounter,zero:[e.emptyX,e.emptyY],imgNumb:e.imgNumb}))})),document.querySelector(".load").addEventListener("click",(()=>{const{bgPosition:t,history:s,size:i,boardTable:r,time:n,moves:h,zero:o,imgNumb:a}=JSON.parse(localStorage.getItem("gameSave"));e.bgPosArr=t,e.history=s,e.size=i,e.timerC.currentTime=n,e.movesCounter=h,e.arr=r,[e.emptyX,e.emptyY]=o,e.imgNumb=a,e.load(),e.timerC.load()})),document.getElementById("fieldSize").addEventListener("change",(()=>{e.init(),e.timerC.init()})),document.querySelector(".cheat").addEventListener("click",(()=>{e.timerC.timerPause(),e.back()})),document.querySelector(".sound").addEventListener("click",(t=>{e.toggleSound(),e.soundOn?t.target.classList.add("btn-on"):t.target.classList.remove("btn-on")})),document.querySelector(".score").addEventListener("click",(t=>{e.getScoreList(),e.scoreList?t.target.classList.add("btn-on"):t.target.classList.remove("btn-on")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,