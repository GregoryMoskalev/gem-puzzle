(()=>{"use strict";var e,t,i={134:()=>{class e{constructor(){this.currentTime=0}calcCurrentTime(){this.time=setInterval((()=>{this.currentTime+=1,this.secToMinAndSec()}),1e3)}secToMinAndSec(){const e=Math.floor(this.currentTime/60),t=(this.currentTime%60).toFixed(0);this.updateTimer(`${e}:${t<10?"0":""}${t}`)}updateTimer(e){this.timer=e,document.querySelector(".time").innerHTML=e,this.renderTimer()}timerStop(){clearInterval(this.time),this.updateTimer("0:00")}renderTimer(){document.querySelector(".time").innerHTML=this.timer}timerPause(){clearInterval(this.time)}init(){this.timerStop(),this.currentTime=null,this.calcCurrentTime()}load(){this.timerStop(),this.secToMinAndSec(),this.calcCurrentTime()}}const t=new class{constructor(){this.timerC=new e,this.history=[],this.size=4,this.emptyX=0,this.emptyY=0,this.animationTime=200,this.boardWidth=40.8,this.marginSize=.1,this.soundOn=!0,this.winSound=new Audio("./assets/win.mp3"),this.slideSound=new Audio("./assets/slide.mp3"),this.slideSound.volume=.2,this.dragNDropSound=new Audio("./assets/whoosh-grainy_gkoaqyn_.mp3"),this.dragNDropSound.volume=.3,this.removeBoard=()=>{document.querySelectorAll(".board").forEach((e=>{document.body.removeChild(e)}))},this.findElem=e=>{for(let t=0;t<this.arr.length;t+=1)for(let i=0;i<this.arr.length;i+=1)if(this.arr[t][i]===parseInt(e.innerHTML,10))return[t,i];throw new Error(e)},this.dragDrop=e=>{const t=e.target,i=document.querySelector(".hide"),[r,s]=this.findElem(i);this.isNearZero(r,s)&&([this.arr[r][s],this.arr[this.emptyX][this.emptyY]]=[this.arr[this.emptyX][this.emptyY],this.arr[r][s]],[this.emptyX,this.emptyY]=[r,s],[t.style.order,i.style.order]=[i.style.order,t.style.order],this.checkForIdling(),this.history.push([this.emptyX,this.emptyY]),this.playDragSound(),this.addMove()),t.classList.remove("hovered")},this.toggleButtons=()=>{document.querySelectorAll(".btn:not(.sound),#fieldSize").forEach((e=>{e.disabled=!e.disabled}))},this.dragdropHandler=()=>{document.querySelectorAll(".cell").forEach((e=>{e.addEventListener("mouseup",(e=>{const t=e.target;this.swap(parseInt(t.innerHTML,10))})),e.addEventListener("dragstart",this.dragStart),e.addEventListener("dragover",this.dragOver),e.addEventListener("drop",this.dragDrop),e.addEventListener("dragend",this.dragEnd),e.addEventListener("dragenter",this.dragEnter),e.addEventListener("dragleave",this.dragLeave)}))}}toggleSound(){this.soundOn=!this.soundOn}playDragSound(){this.soundOn&&(this.dragNDropSound.currentTime=.15,this.dragNDropSound.play())}dragStart(){setTimeout((()=>{this.classList.add("hide")}),0)}dragEnd(){this.classList.remove("hide")}dragEnter(){this.classList.add("hovered")}dragLeave(){this.classList.remove("hovered")}randomImgNumber(e,t){this.imgNumb=Math.floor(Math.random()*(e-t)+t)}back(){this.toggleButtons(),this.history.pop(),this.backTimer()}backTimer(){setTimeout((()=>{if(this.history.length){const[e,t]=this.history.pop();this.e=document.querySelector("#cell-"+this.arr[e][t]),this.moveAnimation([e,t]),setTimeout((()=>{[this.arr[this.emptyX][this.emptyY],this.arr[e][t]]=[this.arr[e][t],this.arr[this.emptyX][this.emptyY]],this.emptyX=e,this.emptyY=t,this.removeBoard(),this.renderBoard(),this.playSlideSound(),this.backTimer()}),this.animationTime)}else this.checkWin(!0),this.toggleButtons()}),this.animationTime)}playWinSound(){this.soundOn&&(this.winSound.currentTime=0,this.winSound.play())}playSlideSound(){this.soundOn&&(this.slideSound.currentTime=0,this.slideSound.play())}checkForIdling(){const[e,t]=this.history[this.history.length-2];this.emptyX===e&&this.emptyY===t&&this.history.splice(-2,2)}move(e){switch(e){case"up":0!==this.emptyX&&(this.history.length<=1||this.emptyX-1!==this.history[this.history.length-2][0])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX-1][this.emptyY],this.arr[this.emptyX-1][this.emptyY]=0,this.emptyX-=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"down":this.emptyX!==this.size-1&&(this.history.length<=1||this.emptyX+1!==this.history[this.history.length-2][0])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX+1][this.emptyY],this.arr[this.emptyX+1][this.emptyY]=0,this.emptyX+=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"right":this.emptyY!==this.size-1&&(this.history.length<=1||this.emptyY+1!==this.history[this.history.length-2][1])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY+1],this.arr[this.emptyX][this.emptyY+1]=0,this.emptyY+=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;case"left":0!==this.emptyY&&(this.history.length<=1||this.emptyY-1!==this.history[this.history.length-2][1])?(this.arr[this.emptyX][this.emptyY]=this.arr[this.emptyX][this.emptyY-1],this.arr[this.emptyX][this.emptyY-1]=0,this.emptyY-=1,this.history.push([this.emptyX,this.emptyY])):this.counter-=1;break;default:throw new Error(">:(")}}createBoard(){const e=[];this.bgPosArr=[];for(let t=0;t<this.size;t+=1){e[t]=[];for(let i=0;i<this.size;i+=1)t+i!==2*(this.size-1)?(e[t][i]=t*this.size+i+1,this.bgPosArr.push(`${Math.round(100/(this.size-1)*i)}% ${Math.round(100/(this.size-1)*t)}%`)):e[t][i]=0}return e}shuffle(){for(this.history.push([this.emptyX,this.emptyY]),this.counter=0;this.counter<this.size**3;this.counter+=1)switch(Math.floor(4*Math.random())){case 0:this.move("up");break;case 1:this.move("right");break;case 2:this.move("down");break;case 3:this.move("left");break;default:throw new Error(">:(")}}renderBoard(){let e='<div class="score-list">test</div>';const t=this.boardWidth+"rem";for(let i=0,r=1;i<this.size;i+=1)for(let s=0;s<this.size;s+=1){const n=this.arr[i][s];let o="cell empty",a=!1,h="ondragover = 'event.preventDefault()'",d="";if(n){const e=this.bgPosArr[n-1];o="cell",a=!0,h="",d=`background: url(./assets/images/${this.imgNumb}.jpg); background-position: ${e}; background-size: ${t};`}r+=1,e+=`<div \n        ${h}\n          style='width:${this.cellSize}rem;\n          height:${this.cellSize}rem;\n          order:${r};\n          ${d}'\n          id='cell-${n}'\n          class='${o}'\n          draggable="${a}">${n}</div>`}const i=document.createElement("div");i.classList.add("board"),i.style.width=t,i.innerHTML=e,document.body.appendChild(i)}moveAnimation([e,t]){this.direction=this.getDirection(e,t),this.inAnimation=!0,this.start=Date.now(),this.timer=setInterval((()=>{if(this.timePassed=Date.now()-this.start,this.timePassed>=this.animationTime)return clearInterval(this.timer),void(this.inAnimation=!1);this.draw()}),20)}getDirection(e,t){return this.emptyX<e?"up":this.emptyX>e?"down":this.emptyY<t?"left":"right"}draw(){const e=this.cellSize/this.animationTime*this.timePassed;switch(this.direction){case"up":this.e.style.transform=`translate( 0, ${-e}rem)`;break;case"down":this.e.style.transform=`translate( 0, ${e}rem)`;break;case"left":this.e.style.transform=`translate( ${-e}rem, 0)`;break;case"right":this.e.style.transform=`translate( ${e}rem, 0)`;break;default:throw new Error(">:(")}}swap(e){if(!this.inAnimation)for(let t=0;t<this.arr.length;t+=1)for(let i=0;i<this.arr[t].length;i+=1)if(this.arr[t][i]===e&&this.isNearZero(t,i)){this.addMove();const e=document.querySelector("#cell-"+this.arr[this.emptyX][this.emptyY]);return this.e=document.querySelector("#cell-"+this.arr[t][i]),this.moveAnimation([t,i]),this.playSlideSound(),setTimeout((()=>{[e.style.order,this.e.style.order]=[this.e.style.order,e.style.order],this.e.style.transform="",this.emptyX===this.emptyY&&this.emptyY===this.size-1&&this.checkWin()&&this.timerC.timerPause()}),this.animationTime),[this.arr[t][i],this.arr[this.emptyX][this.emptyY]]=[this.arr[this.emptyX][this.emptyY],this.arr[t][i]],this.emptyX=t,this.emptyY=i,this.checkForIdling(),void this.history.push([this.emptyX,this.emptyY])}}addMove(){this.movesCounter+=1,document.querySelector(".move").innerHTML=this.movesCounter}isNearZero(e,t){return 1===Math.abs(this.emptyX-e)&&this.emptyY-t==0||1===Math.abs(this.emptyY-t)&&this.emptyX-e==0}renderScoreList(){this.isActiveScoreList=!this.isActiveScoreList;const e=document.querySelector(".score-list"),t=JSON.parse(localStorage.getItem("score-list"))||[];let i="";for(let e=0;e<t.length;e+=1)i+=`<li>Size: ${t[e].size},&nbsp;&nbsp;&nbsp;&nbsp;Moves: ${t[e].moves},&nbsp;&nbsp;&nbsp;&nbsp;Time: ${t[e].time}</li>`;e.innerHTML=`<h2>Best Scores</h2>\n      <ol class="score">${i}</ol>`,this.isActiveScoreList?(e.classList.add("score-list-on"),this.timerC.timerPause()):(e.classList.remove("score-list-on"),this.timerC.calcCurrentTime())}checkWin(e){for(let e=0;e<this.size;e+=1)for(let t=0;t<this.size;t+=1)if(e+t!==2*(this.size-1)&&this.win[e][t]!==this.arr[e][t])return!1;return this.playWinSound(),this.setWinMessage(e),e||this.setScore(),!0}setScore(){let e=JSON.parse(localStorage.getItem("score-list"))||[];e.push({moves:this.movesCounter,size:this.size,time:this.timerC.timer}),e.sort(((e,t)=>e.moves-t.moves)),e=e.slice(0,10),localStorage.setItem("score-list",JSON.stringify(e))}setWinMessage(e){this.winBoard=document.querySelector(".board"),this.winBoard.classList.add("win"),this.winBoard.innerHTML+=`<div style="background-image: url(./assets/images/${this.imgNumb}.jpg);" class='win-text'>${e?"ЧИТЕР!":`Ура! Вы решили головоломку за ${this.timerC.timer} и ${this.movesCounter} ходов</div>`}</div>`,setTimeout((()=>{this.winBoard.querySelector(".win-text").style.opacity=1}),50)}init(){this.isActiveScoreList=!1,this.randomImgNumber(150,1),this.history=[],this.movesCounter=0,document.querySelector(".move").innerHTML=this.movesCounter,this.size=document.getElementById("fieldSize").value,this.cellSize=parseFloat(this.boardWidth/this.size-2*this.marginSize).toFixed(3),this.removeBoard(),this.emptyX=this.size-1,this.emptyY=this.size-1,this.arr=this.createBoard(),this.win=this.createBoard(),this.shuffle(),this.renderBoard(),this.timerC.init(),this.dragdropHandler()}load(){this.cellSize=parseFloat(this.boardWidth/this.size-2*this.marginSize).toFixed(3),document.querySelector(".move").innerHTML=this.movesCounter,this.removeBoard(),this.renderBoard(),this.win=this.createBoard(),this.timerC.load(),this.dragdropHandler()}},i=document.createElement("header");i.classList.add("header"),i.innerHTML='<h1 class="heading">gem puzzle</h1>',document.body.appendChild(i);const r=document.createElement("div");r.classList.add("menu"),r.innerHTML=`  \n  <div class="settings">\n    <button class="new-game btn">New</button>\n    <button class="save btn">Save</button>\n    <button class="load btn">Load</button>\n    <button class="score btn">Score</button>\n    <button class="sound btn ${t.soundOn?"btn-on":""}">Sound</button>\n    <div class="size">\n      <select id="fieldSize">\n      <option selected="selected" value="4" disabled>Field size</option>\n        <option value="3">3</option>\n        <option value="4">4</option>\n        <option value="5">5</option>\n        <option value="6">6</option>\n        <option value="7">7</option>\n        <option value="8">8</option>\n      </select>\n    </div>\n    <button class="cheat btn">CHEAT</button>\n  </div>\n  <div class="counters">\n    <div class="timer"><span>Timer: </span><span class="time">0:00</span></div>\n    <div class="moves"><span>Moves: </span><span class="move">0</span></div>\n  </div>`,document.body.appendChild(r),t.init(),document.querySelector(".new-game").addEventListener("click",(()=>{t.init()})),document.querySelector(".save").addEventListener("click",(()=>{localStorage.setItem("gameSave",JSON.stringify({bgPosition:t.bgPosArr,history:t.history,size:t.size,boardTable:t.arr,time:t.timerC.currentTime,moves:t.movesCounter,zero:[t.emptyX,t.emptyY],imgNumb:t.imgNumb}))})),document.querySelector(".load").addEventListener("click",(()=>{const{bgPosition:e,history:i,size:r,boardTable:s,time:n,moves:o,zero:a,imgNumb:h}=JSON.parse(localStorage.getItem("gameSave"));t.bgPosArr=e,t.history=i,t.size=r,t.timerC.currentTime=n,t.movesCounter=o,t.arr=s,[t.emptyX,t.emptyY]=a,t.imgNumb=h,t.load(),t.timerC.load()})),document.getElementById("fieldSize").addEventListener("change",(()=>{t.init(),t.timerC.init()})),document.querySelector(".cheat").addEventListener("click",(()=>{t.timerC.timerPause(),t.back()})),document.querySelector(".sound").addEventListener("click",(e=>{t.toggleSound(),t.soundOn?e.target.classList.add("btn-on"):e.target.classList.remove("btn-on")})),document.querySelector(".score").addEventListener("click",(e=>{t.renderScoreList(),t.scoreList?e.target.classList.add("btn-on"):e.target.classList.remove("btn-on")}))}},r={};function s(e){if(r[e])return r[e].exports;var t=r[e]={exports:{}},n={id:e,module:t,factory:i[e],require:s};return s.i.forEach((function(e){e(n)})),t=n.module,n.factory.call(t.exports,t,t.exports,n.require),t.exports}s.m=i,s.c=r,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.hmrF=()=>s.h()+".hot-update.json",s.h=()=>"6f6731f5bb4b00688a92",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="gem-puzzle:",s.l=(i,r,n)=>{if(e[i])e[i].push(r);else{var o,a;if(void 0!==n)for(var h=document.getElementsByTagName("script"),d=0;d<h.length;d++){var c=h[d];if(c.getAttribute("src")==i||c.getAttribute("data-webpack")==t+n){o=c;break}}o||(a=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,s.nc&&o.setAttribute("nonce",s.nc),o.setAttribute("data-webpack",t+n),o.src=i),e[i]=[r];var l=(t,r)=>{o.onerror=o.onload=null,clearTimeout(u);var s=e[i];if(delete e[i],o.parentNode&&o.parentNode.removeChild(o),s&&s.forEach((e=>e(r))),t)return t(r)},u=setTimeout(l.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=l.bind(null,o.onerror),o.onload=l.bind(null,o.onload),a&&document.head.appendChild(o)}},(()=>{var e,t,i,r,n={},o=s.c,a=[],h=[],d="idle";function c(e){d=e;for(var t=0;t<h.length;t++)h[t].call(null,e)}function l(e){if(0===t.length)return e();var i=t;return t=[],Promise.all(i).then((function(){return l(e)}))}function u(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return c("check"),s.hmrM().then((function(r){if(!r)return c(f()?"ready":"idle"),null;c("prepare");var n=[];return t=[],i=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,t){return s.hmrC[t](r.c,r.r,r.m,e,i,n),e}),[])).then((function(){return l((function(){return e?m(e):(c("ready"),n)}))}))}))}function p(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):m(e)}function m(e){e=e||{},f();var t=i.map((function(t){return t(e)}));i=void 0;var s,n=t.map((function(e){return e.error})).filter(Boolean);if(n.length>0)return c("abort"),Promise.resolve().then((function(){throw n[0]}));c("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),c("apply");var o=function(e){s||(s=e)},a=[];return t.forEach((function(e){if(e.apply){var t=e.apply(o);if(t)for(var i=0;i<t.length;i++)a.push(t[i])}})),s?(c("fail"),Promise.resolve().then((function(){throw s}))):r?m(e).then((function(e){return a.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(c("idle"),Promise.resolve(a))}function f(){if(r)return i||(i=[]),Object.keys(s.hmrI).forEach((function(e){r.forEach((function(t){s.hmrI[e](t,i)}))})),r=void 0,!0}s.hmrD=n,s.i.push((function(m){var f,y,v,g=m.module,b=function(i,r){var s=o[r];if(!s)return i;var n=function(t){if(s.hot.active){if(o[t]){var n=o[t].parents;-1===n.indexOf(r)&&n.push(r)}else a=[r],e=t;-1===s.children.indexOf(t)&&s.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+r),a=[];return i(t)},h=function(e){return{configurable:!0,enumerable:!0,get:function(){return i[e]},set:function(t){i[e]=t}}};for(var u in i)Object.prototype.hasOwnProperty.call(i,u)&&"e"!==u&&Object.defineProperty(n,u,h(u));return n.e=function(e){return function(e){switch(d){case"ready":return c("prepare"),t.push(e),l((function(){c("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(i.e(e))},n}(m.require,m.id);g.hot=(f=m.id,y=g,v={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==f,_requireSelf:function(){a=y.parents.slice(),e=f,s(f)},active:!0,accept:function(e,t){if(void 0===e)v._selfAccepted=!0;else if("function"==typeof e)v._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var i=0;i<e.length;i++)v._acceptedDependencies[e[i]]=t||function(){};else v._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)v._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)v._declinedDependencies[e[t]]=!0;else v._declinedDependencies[e]=!0},dispose:function(e){v._disposeHandlers.push(e)},addDisposeHandler:function(e){v._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=v._disposeHandlers.indexOf(e);t>=0&&v._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":i=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](f,i)})),c("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](f,i)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(f)}},check:u,apply:p,status:function(e){if(!e)return d;h.push(e)},addStatusHandler:function(e){h.push(e)},removeStatusHandler:function(e){var t=h.indexOf(e);t>=0&&h.splice(t,1)},data:n[f]},e=void 0,v),g.parents=a,g.children=[],a=[],m.require=b})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),(()=>{var e,t,i,r,n={179:0},o={};function a(e){return new Promise(((t,i)=>{o[e]=t;var r=s.p+s.hu(e),n=new Error;s.l(r,(t=>{if(o[e]){o[e]=void 0;var r=t&&("load"===t.type?"missing":t.type),s=t&&t.target&&t.target.src;n.message="Loading hot update chunk "+e+" failed.\n("+r+": "+s+")",n.name="ChunkLoadError",n.type=r,n.request=s,i(n)}}))}))}function h(o){function a(e){for(var t=[e],i={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var n=r.pop(),o=n.id,a=n.chain,d=s.c[o];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var c=0;c<d.parents.length;c++){var l=d.parents[c],u=s.c[l];if(u){if(u.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([l]),moduleId:o,parentId:l};-1===t.indexOf(l)&&(u.hot._acceptedDependencies[o]?(i[l]||(i[l]=[]),h(i[l],[o])):(delete i[l],t.push(l),r.push({chain:a.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:i}}function h(e,t){for(var i=0;i<t.length;i++){var r=t[i];-1===e.indexOf(r)&&e.push(r)}}s.f&&delete s.f.jsonpHmr,e=void 0;var d={},c=[],l={},u=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(s.o(t,p)){var m,f=t[p],y=!1,v=!1,g=!1,b="";switch((m=f?a(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+m.chain.join(" -> ")),m.type){case"self-declined":o.onDeclined&&o.onDeclined(m),o.ignoreDeclined||(y=new Error("Aborted because of self decline: "+m.moduleId+b));break;case"declined":o.onDeclined&&o.onDeclined(m),o.ignoreDeclined||(y=new Error("Aborted because of declined dependency: "+m.moduleId+" in "+m.parentId+b));break;case"unaccepted":o.onUnaccepted&&o.onUnaccepted(m),o.ignoreUnaccepted||(y=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":o.onAccepted&&o.onAccepted(m),v=!0;break;case"disposed":o.onDisposed&&o.onDisposed(m),g=!0;break;default:throw new Error("Unexception type "+m.type)}if(y)return{error:y};if(v)for(p in l[p]=f,h(c,m.outdatedModules),m.outdatedDependencies)s.o(m.outdatedDependencies,p)&&(d[p]||(d[p]=[]),h(d[p],m.outdatedDependencies[p]));g&&(h(c,[m.moduleId]),l[p]=u)}t=void 0;for(var S,w=[],E=0;E<c.length;E++){var T=c[E];s.c[T]&&s.c[T].hot._selfAccepted&&l[T]!==u&&!s.c[T].hot._selfInvalidated&&w.push({module:T,require:s.c[T].hot._requireSelf,errorHandler:s.c[T].hot._selfAccepted})}return{dispose:function(){var e;i.forEach((function(e){delete n[e]})),i=void 0;for(var t,r=c.slice();r.length>0;){var o=r.pop(),a=s.c[o];if(a){var h={},l=a.hot._disposeHandlers;for(E=0;E<l.length;E++)l[E].call(null,h);for(s.hmrD[o]=h,a.hot.active=!1,delete s.c[o],delete d[o],E=0;E<a.children.length;E++){var u=s.c[a.children[E]];u&&(e=u.parents.indexOf(o))>=0&&u.parents.splice(e,1)}}}for(var p in d)if(s.o(d,p)&&(a=s.c[p]))for(S=d[p],E=0;E<S.length;E++)t=S[E],(e=a.children.indexOf(t))>=0&&a.children.splice(e,1)},apply:function(e){for(var t in l)s.o(l,t)&&(s.m[t]=l[t]);for(var i=0;i<r.length;i++)r[i](s);for(var n in d)if(s.o(d,n)){var a=s.c[n];if(a){S=d[n];for(var h=[],u=[],p=0;p<S.length;p++){var m=S[p],f=a.hot._acceptedDependencies[m];if(f){if(-1!==h.indexOf(f))continue;h.push(f),u.push(m)}}for(var y=0;y<h.length;y++)try{h[y].call(null,S)}catch(t){o.onErrored&&o.onErrored({type:"accept-errored",moduleId:n,dependencyId:u[y],error:t}),o.ignoreErrored||e(t)}}}for(var v=0;v<w.length;v++){var g=w[v],b=g.module;try{g.require(b)}catch(t){if("function"==typeof g.errorHandler)try{g.errorHandler(t)}catch(i){o.onErrored&&o.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:i,originalError:t}),o.ignoreErrored||e(i),e(t)}else o.onErrored&&o.onErrored({type:"self-accept-errored",moduleId:b,error:t}),o.ignoreErrored||e(t)}}return c}}}self.webpackHotUpdategem_puzzle=(e,i,n)=>{for(var a in i)s.o(i,a)&&(t[a]=i[a]);n&&r.push(n),o[e]&&(o[e](),o[e]=void 0)},s.hmrI.jsonp=function(e,n){t||(t={},r=[],i=[],n.push(h)),s.o(t,e)||(t[e]=s.m[e])},s.hmrC.jsonp=function(o,d,c,l,u,p){u.push(h),e={},i=d,t=c.reduce((function(e,t){return e[t]=!1,e}),{}),r=[],o.forEach((function(t){s.o(n,t)&&void 0!==n[t]&&(l.push(a(t)),e[t]=!0)})),s.f&&(s.f.jsonpHmr=function(t,i){e&&!s.o(e,t)&&s.o(n,t)&&void 0!==n[t]&&(i.push(a(t)),e[t]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(134)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW0tcHV6emxlL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly9nZW0tcHV6emxlLy4vc3JjL1RpbWVyLmpzIiwid2VicGFjazovL2dlbS1wdXp6bGUvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ2VtLXB1enpsZS8uL3NyYy9Cb2FyZC5qcyIsIndlYnBhY2s6Ly9nZW0tcHV6emxlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2dlbS1wdXp6bGUvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IHVwZGF0ZSBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9nZW0tcHV6emxlL3dlYnBhY2svcnVudGltZS9nZXQgdXBkYXRlIG1hbmlmZXN0IGZpbGVuYW1lIiwid2VicGFjazovL2dlbS1wdXp6bGUvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL2dlbS1wdXp6bGUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9nZW0tcHV6emxlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZ2VtLXB1enpsZS93ZWJwYWNrL3J1bnRpbWUvaG90IG1vZHVsZSByZXBsYWNlbWVudCIsIndlYnBhY2s6Ly9nZW0tcHV6emxlL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2dlbS1wdXp6bGUvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vZ2VtLXB1enpsZS93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiVGltZXIiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJjdXJyZW50VGltZSIsImNhbGNDdXJyZW50VGltZSIsInRpbWUiLCJzZXRJbnRlcnZhbCIsInNlY1RvTWluQW5kU2VjIiwibWludXRlcyIsIk1hdGgiLCJmbG9vciIsInNlYyIsInRvRml4ZWQiLCJ1cGRhdGVUaW1lciIsIm5ld1RpbWVWYWx1ZSIsInRpbWVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwicmVuZGVyVGltZXIiLCJ0aW1lclN0b3AiLCJjbGVhckludGVydmFsIiwidGltZXJQYXVzZSIsImluaXQiLCJsb2FkIiwiYm9hcmQiLCJ0aW1lckMiLCJoaXN0b3J5Iiwic2l6ZSIsImVtcHR5WCIsImVtcHR5WSIsImFuaW1hdGlvblRpbWUiLCJib2FyZFdpZHRoIiwibWFyZ2luU2l6ZSIsInNvdW5kT24iLCJ3aW5Tb3VuZCIsIkF1ZGlvIiwic2xpZGVTb3VuZCIsInZvbHVtZSIsImRyYWdORHJvcFNvdW5kIiwicmVtb3ZlQm9hcmQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsZW0iLCJib2R5IiwicmVtb3ZlQ2hpbGQiLCJmaW5kRWxlbSIsIngiLCJhcnIiLCJsZW5ndGgiLCJ5IiwicGFyc2VJbnQiLCJFcnJvciIsImRyYWdEcm9wIiwiZSIsInplcm8iLCJ0YXJnZXQiLCJtb3ZlYWJsZSIsImlzTmVhclplcm8iLCJzdHlsZSIsIm9yZGVyIiwiY2hlY2tGb3JJZGxpbmciLCJwdXNoIiwicGxheURyYWdTb3VuZCIsImFkZE1vdmUiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJ0b2dnbGVCdXR0b25zIiwiZGlzYWJsZWQiLCJkcmFnZHJvcEhhbmRsZXIiLCJjZWxsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsInN3YXAiLCJkcmFnU3RhcnQiLCJkcmFnT3ZlciIsImRyYWdFbmQiLCJkcmFnRW50ZXIiLCJkcmFnTGVhdmUiLCJ0b2dnbGVTb3VuZCIsInBsYXkiLCJzZXRUaW1lb3V0IiwiYWRkIiwicmFuZG9tSW1nTnVtYmVyIiwibWF4IiwibWluIiwiaW1nTnVtYiIsInJhbmRvbSIsImJhY2siLCJwb3AiLCJiYWNrVGltZXIiLCJtb3ZlQW5pbWF0aW9uIiwicmVuZGVyQm9hcmQiLCJwbGF5U2xpZGVTb3VuZCIsImNoZWNrV2luIiwicGxheVdpblNvdW5kIiwiYmxYIiwiYmxZIiwic3BsaWNlIiwibW92ZSIsImRpcmVjdGlvbiIsImNvdW50ZXIiLCJjcmVhdGVCb2FyZCIsImJnUG9zQXJyIiwiaSIsImoiLCJyb3VuZCIsInNodWZmbGUiLCJjZWxsTnVtYmVyIiwiY2xhc3NOYW1lIiwiZHJhZ2dhYmxlIiwicHJldmVudERlZiIsImJnRm9yQ2VsbCIsImJHcG9zIiwiY2VsbFNpemUiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsIndpZHRoIiwiYXBwZW5kQ2hpbGQiLCJnZXREaXJlY3Rpb24iLCJpbkFuaW1hdGlvbiIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsInRpbWVQYXNzZWQiLCJkcmF3IiwicmVtUGVyVGljayIsInRyYW5zZm9ybSIsImNlbGxOdW1iIiwibW92ZXNDb3VudGVyIiwiYWJzIiwicmVuZGVyU2NvcmVMaXN0IiwiaXNBY3RpdmVTY29yZUxpc3QiLCJzY29yZUVsZW0iLCJzY29yZUxpc3QiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwibGlzdCIsIm1vdmVzIiwiY2hlYXQiLCJ3aW4iLCJzZXRXaW5NZXNzYWdlIiwic2V0U2NvcmUiLCJzb3J0IiwiYSIsImIiLCJzbGljZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJ3aW5Cb2FyZCIsIm9wYWNpdHkiLCJnZXRFbGVtZW50QnlJZCIsInZhbHVlIiwicGFyc2VGbG9hdCIsImhlYWRlciIsIm1lbnUiLCJiZ1Bvc2l0aW9uIiwiYm9hcmRUYWJsZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJleGVjT3B0aW9ucyIsImlkIiwiZmFjdG9yeSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJyZXF1aXJlIiwiaGFuZGxlciIsImNhbGwiLCJtIiwiYyIsImh1IiwiY2h1bmtJZCIsImgiLCJobXJGIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIndpbmRvdyIsIm8iLCJvYmoiLCJwcm9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJsIiwidXJsIiwiZG9uZSIsImtleSIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJ1bmRlZmluZWQiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzIiwiZ2V0QXR0cmlidXRlIiwiY2hhcnNldCIsInRpbWVvdXQiLCJuYyIsInNldEF0dHJpYnV0ZSIsInNyYyIsIm9uU2NyaXB0Q29tcGxldGUiLCJwcmV2IiwiZXZlbnQiLCJvbmVycm9yIiwib25sb2FkIiwiY2xlYXJUaW1lb3V0IiwiZG9uZUZucyIsInBhcmVudE5vZGUiLCJmbiIsImJpbmQiLCJ0eXBlIiwiaGVhZCIsImN1cnJlbnRDaGlsZE1vZHVsZSIsImJsb2NraW5nUHJvbWlzZXMiLCJjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyIsInF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyIsImN1cnJlbnRNb2R1bGVEYXRhIiwiaW5zdGFsbGVkTW9kdWxlcyIsImN1cnJlbnRQYXJlbnRzIiwicmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzIiwiY3VycmVudFN0YXR1cyIsInNldFN0YXR1cyIsIm5ld1N0YXR1cyIsIndhaXRGb3JCbG9ja2luZ1Byb21pc2VzIiwiYmxvY2tlciIsIlByb21pc2UiLCJhbGwiLCJ0aGVuIiwiaG90Q2hlY2siLCJhcHBseU9uVXBkYXRlIiwiaG1yTSIsInVwZGF0ZSIsImFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzIiwidXBkYXRlZE1vZHVsZXMiLCJrZXlzIiwiaG1yQyIsInJlZHVjZSIsInByb21pc2VzIiwiciIsImludGVybmFsQXBwbHkiLCJob3RBcHBseSIsIm9wdGlvbnMiLCJyZXNvbHZlIiwicmVzdWx0cyIsIm1hcCIsImVycm9yIiwiZXJyb3JzIiwiZmlsdGVyIiwiQm9vbGVhbiIsInJlc3VsdCIsImRpc3Bvc2UiLCJyZXBvcnRFcnJvciIsImVyciIsIm91dGRhdGVkTW9kdWxlcyIsImFwcGx5IiwibW9kdWxlcyIsImluZGV4T2YiLCJobXJJIiwiaG1yRCIsIm1lIiwiaG90IiwicmVxdWVzdCIsImFjdGl2ZSIsInBhcmVudHMiLCJjaGlsZHJlbiIsImNvbnNvbGUiLCJ3YXJuIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJkZWZpbmVQcm9wZXJ0eSIsInByb21pc2UiLCJ0cmFja0Jsb2NraW5nUHJvbWlzZSIsImNyZWF0ZVJlcXVpcmUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsIl9zZWxmSW52YWxpZGF0ZWQiLCJfZGlzcG9zZUhhbmRsZXJzIiwiX21haW4iLCJfcmVxdWlyZVNlbGYiLCJhY2NlcHQiLCJkZXAiLCJjYWxsYmFjayIsImRlY2xpbmUiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4IiwiaW52YWxpZGF0ZSIsImNoZWNrIiwic3RhdHVzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJkYXRhIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInJlcGxhY2UiLCJwIiwiY3VycmVudFVwZGF0ZUNodW5rcyIsImN1cnJlbnRVcGRhdGUiLCJjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyIsImN1cnJlbnRVcGRhdGVSdW50aW1lIiwiaW5zdGFsbGVkQ2h1bmtzIiwiMTc5Iiwid2FpdGluZ1VwZGF0ZVJlc29sdmVzIiwibG9hZFVwZGF0ZUNodW5rIiwicmVqZWN0IiwiZXJyb3JUeXBlIiwicmVhbFNyYyIsIm1lc3NhZ2UiLCJhcHBseUhhbmRsZXIiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwicGFyZW50IiwiY29uY2F0IiwiYWRkQWxsVG9TZXQiLCJpdGVtIiwiZiIsImpzb25wSG1yIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsIm5ld01vZHVsZUZhY3RvcnkiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsImpvaW4iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsIm91dGRhdGVkTW9kdWxlSWQiLCJlcnJvckhhbmRsZXIiLCJkZXBlbmRlbmN5IiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJjYWxsYmFja3MiLCJkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MiLCJhY2NlcHRDYWxsYmFjayIsImsiLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yaWdpbmFsRXJyb3IiLCJzZWxmIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwianNvbnAiLCJhcHBseUhhbmRsZXJzIiwiY2h1bmtJZHMiLCJyZW1vdmVkQ2h1bmtzIiwicmVtb3ZlZE1vZHVsZXMiLCJ1cGRhdGVkTW9kdWxlc0xpc3QiLCJmZXRjaCIsInJlc3BvbnNlIiwib2siLCJzdGF0dXNUZXh0IiwianNvbiJdLCJtYXBwaW5ncyI6InVCQUFJQSxFQUNBQyxFLFlDRFcsTUFBTUMsRUFDbkJDLGNBQ0VDLEtBQUtDLFlBQWMsRUFHckJDLGtCQUNFRixLQUFLRyxLQUFPQyxhQUFZLEtBQ3RCSixLQUFLQyxhQUFlLEVBQ3BCRCxLQUFLSyxtQkFDSixLQUdMQSxpQkFDRSxNQUFNQyxFQUFVQyxLQUFLQyxNQUFNUixLQUFLQyxZQUFjLElBQ3hDUSxHQUFPVCxLQUFLQyxZQUFjLElBQUlTLFFBQVEsR0FFNUNWLEtBQUtXLFlBQWEsR0FBRUwsS0FBV0csRUFBTSxHQUFLLElBQU0sS0FBS0EsS0FHdkRFLFlBQVlDLEdBQ1ZaLEtBQUthLE1BQVFELEVBQ2JFLFNBQVNDLGNBQWMsU0FBU0MsVUFBWUosRUFDNUNaLEtBQUtpQixjQUdQQyxZQUNFQyxjQUFjbkIsS0FBS0csTUFDbkJILEtBQUtXLFlBQVksUUFHbkJNLGNBQ0VILFNBQVNDLGNBQWMsU0FBU0MsVUFBWWhCLEtBQUthLE1BR25ETyxhQUNFRCxjQUFjbkIsS0FBS0csTUFLckJrQixPQUNFckIsS0FBS2tCLFlBQ0xsQixLQUFLQyxZQUFjLEtBQ25CRCxLQUFLRSxrQkFHUG9CLE9BQ0V0QixLQUFLa0IsWUFDTGxCLEtBQUtLLGlCQUVMTCxLQUFLRSxtQkNoRFQsTUFBTXFCLEVBQVEsSUNBQyxNQUNieEIsY0FDRUMsS0FBS3dCLE9BQVMsSUFBSTFCLEVBQ2xCRSxLQUFLeUIsUUFBVSxHQUNmekIsS0FBSzBCLEtBQU8sRUFDWjFCLEtBQUsyQixPQUFTLEVBQ2QzQixLQUFLNEIsT0FBUyxFQUNkNUIsS0FBSzZCLGNBQWdCLElBQ3JCN0IsS0FBSzhCLFdBQWEsS0FDbEI5QixLQUFLK0IsV0FBYSxHQUNsQi9CLEtBQUtnQyxTQUFVLEVBQ2ZoQyxLQUFLaUMsU0FBVyxJQUFJQyxNQUFNLG9CQUMxQmxDLEtBQUttQyxXQUFhLElBQUlELE1BQU0sc0JBQzVCbEMsS0FBS21DLFdBQVdDLE9BQVMsR0FDekJwQyxLQUFLcUMsZUFBaUIsSUFBSUgsTUFBTSx1Q0FDaENsQyxLQUFLcUMsZUFBZUQsT0FBUyxHQUM3QnBDLEtBQUtzQyxZQUFjLEtBQ2pCeEIsU0FBU3lCLGlCQUFpQixVQUFVQyxTQUFTQyxJQUMzQzNCLFNBQVM0QixLQUFLQyxZQUFZRixPQUc5QnpDLEtBQUs0QyxTQUFZSCxJQUNmLElBQUssSUFBSUksRUFBSSxFQUFHQSxFQUFJN0MsS0FBSzhDLElBQUlDLE9BQVFGLEdBQUssRUFDeEMsSUFBSyxJQUFJRyxFQUFJLEVBQUdBLEVBQUloRCxLQUFLOEMsSUFBSUMsT0FBUUMsR0FBSyxFQUN4QyxHQUFJaEQsS0FBSzhDLElBQUlELEdBQUdHLEtBQU9DLFNBQVNSLEVBQUt6QixVQUFXLElBQUssTUFBTyxDQUFFNkIsRUFBR0csR0FHckUsTUFBTSxJQUFJRSxNQUFNVCxJQUVsQnpDLEtBQUttRCxTQUFZQyxJQUNmLE1BQU1DLEVBQU9ELEVBQUVFLE9BQ1RDLEVBQVd6QyxTQUFTQyxjQUFjLFVBQ2hDOEIsRUFBR0csR0FBTWhELEtBQUs0QyxTQUFTVyxHQUMzQnZELEtBQUt3RCxXQUFXWCxFQUFHRyxNQUNuQmhELEtBQUs4QyxJQUFJRCxHQUFHRyxHQUFJaEQsS0FBSzhDLElBQUk5QyxLQUFLMkIsUUFBUTNCLEtBQUs0QixTQUFZLENBQ3ZENUIsS0FBSzhDLElBQUk5QyxLQUFLMkIsUUFBUTNCLEtBQUs0QixRQUMzQjVCLEtBQUs4QyxJQUFJRCxHQUFHRyxLQUVaaEQsS0FBSzJCLE9BQVEzQixLQUFLNEIsUUFBVyxDQUFFaUIsRUFBR0csSUFDbENLLEVBQUtJLE1BQU1DLE1BQU9ILEVBQVNFLE1BQU1DLE9BQVUsQ0FBRUgsRUFBU0UsTUFBTUMsTUFBT0wsRUFBS0ksTUFBTUMsT0FDaEYxRCxLQUFLMkQsaUJBQ0wzRCxLQUFLeUIsUUFBUW1DLEtBQUssQ0FBRTVELEtBQUsyQixPQUFRM0IsS0FBSzRCLFNBQ3RDNUIsS0FBSzZELGdCQUNMN0QsS0FBSzhELFdBRVBULEVBQUtVLFVBQVVDLE9BQU8sWUFFeEJoRSxLQUFLaUUsY0FBZ0IsS0FDbkJuRCxTQUFTeUIsaUJBQWlCLCtCQUErQkMsU0FBU1ksSUFDaEVBLEVBQUVjLFVBQVlkLEVBQUVjLGFBR3BCbEUsS0FBS21FLGdCQUFrQixLQUNyQnJELFNBQVN5QixpQkFBaUIsU0FBU0MsU0FBUzRCLElBQzFDQSxFQUFLQyxpQkFBaUIsV0FBWUMsSUFDaEMsTUFBTTdCLEVBQU82QixFQUFJaEIsT0FDakJ0RCxLQUFLdUUsS0FBS3RCLFNBQVNSLEVBQUt6QixVQUFXLFFBR3JDb0QsRUFBS0MsaUJBQWlCLFlBQWFyRSxLQUFLd0UsV0FFeENKLEVBQUtDLGlCQUFpQixXQUFZckUsS0FBS3lFLFVBRXZDTCxFQUFLQyxpQkFBaUIsT0FBUXJFLEtBQUttRCxVQUVuQ2lCLEVBQUtDLGlCQUFpQixVQUFXckUsS0FBSzBFLFNBRXRDTixFQUFLQyxpQkFBaUIsWUFBYXJFLEtBQUsyRSxXQUV4Q1AsRUFBS0MsaUJBQWlCLFlBQWFyRSxLQUFLNEUsZUFLOUNDLGNBQ0U3RSxLQUFLZ0MsU0FBV2hDLEtBQUtnQyxRQUd2QjZCLGdCQUNPN0QsS0FBS2dDLFVBQ1ZoQyxLQUFLcUMsZUFBZXBDLFlBQWMsSUFDbENELEtBQUtxQyxlQUFleUMsUUFHdEJOLFlBQ0VPLFlBQVcsS0FDVC9FLEtBQUsrRCxVQUFVaUIsSUFBSSxVQUNsQixHQUdMTixVQUNFMUUsS0FBSytELFVBQVVDLE9BQU8sUUFHeEJXLFlBQ0UzRSxLQUFLK0QsVUFBVWlCLElBQUksV0FHckJKLFlBQ0U1RSxLQUFLK0QsVUFBVUMsT0FBTyxXQUd4QmlCLGdCQUFnQkMsRUFBS0MsR0FDbkJuRixLQUFLb0YsUUFBVTdFLEtBQUtDLE1BQU1ELEtBQUs4RSxVQUFZSCxFQUFNQyxHQUFPQSxHQUcxREcsT0FDRXRGLEtBQUtpRSxnQkFDTGpFLEtBQUt5QixRQUFROEQsTUFDYnZGLEtBQUt3RixZQUdQQSxZQUNFVCxZQUFXLEtBQ1QsR0FBSS9FLEtBQUt5QixRQUFRc0IsT0FBUSxDQUN2QixNQUFRRixFQUFHRyxHQUFNaEQsS0FBS3lCLFFBQVE4RCxNQUM5QnZGLEtBQUtvRCxFQUFJdEMsU0FBU0MsY0FBZSxTQUFRZixLQUFLOEMsSUFBSUQsR0FBR0csSUFFckRoRCxLQUFLeUYsY0FBYyxDQUFFNUMsRUFBR0csSUFFeEIrQixZQUFXLE1BQ1AvRSxLQUFLOEMsSUFBSTlDLEtBQUsyQixRQUFRM0IsS0FBSzRCLFFBQVM1QixLQUFLOEMsSUFBSUQsR0FBR0csSUFBTyxDQUN2RGhELEtBQUs4QyxJQUFJRCxHQUFHRyxHQUNaaEQsS0FBSzhDLElBQUk5QyxLQUFLMkIsUUFBUTNCLEtBQUs0QixTQUU3QjVCLEtBQUsyQixPQUFTa0IsRUFDZDdDLEtBQUs0QixPQUFTb0IsRUFDZGhELEtBQUtzQyxjQUNMdEMsS0FBSzBGLGNBQ0wxRixLQUFLMkYsaUJBQ0wzRixLQUFLd0YsY0FDSnhGLEtBQUs2QixvQkFFUjdCLEtBQUs0RixVQUFTLEdBQ2Q1RixLQUFLaUUsa0JBRU5qRSxLQUFLNkIsZUFHVmdFLGVBQ083RixLQUFLZ0MsVUFDVmhDLEtBQUtpQyxTQUFTaEMsWUFBYyxFQUM1QkQsS0FBS2lDLFNBQVM2QyxRQUdoQmEsaUJBQ08zRixLQUFLZ0MsVUFDVmhDLEtBQUttQyxXQUFXbEMsWUFBYyxFQUM5QkQsS0FBS21DLFdBQVcyQyxRQUdsQm5CLGlCQUNFLE1BQVFtQyxFQUFLQyxHQUFRL0YsS0FBS3lCLFFBQVF6QixLQUFLeUIsUUFBUXNCLE9BQVMsR0FDcEQvQyxLQUFLMkIsU0FBV21FLEdBQU85RixLQUFLNEIsU0FBV21FLEdBQ3pDL0YsS0FBS3lCLFFBQVF1RSxRQUFRLEVBQUcsR0FNNUJDLEtBQUtDLEdBQ0gsT0FBUUEsR0FDTixJQUFLLEtBRWUsSUFBaEJsRyxLQUFLMkIsU0FDSjNCLEtBQUt5QixRQUFRc0IsUUFBVSxHQUFLL0MsS0FBSzJCLE9BQVMsSUFBTTNCLEtBQUt5QixRQUFRekIsS0FBS3lCLFFBQVFzQixPQUFTLEdBQUcsS0FFdkYvQyxLQUFLOEMsSUFBSTlDLEtBQUsyQixRQUFRM0IsS0FBSzRCLFFBQVU1QixLQUFLOEMsSUFBSTlDLEtBQUsyQixPQUFTLEdBQUczQixLQUFLNEIsUUFDcEU1QixLQUFLOEMsSUFBSTlDLEtBQUsyQixPQUFTLEdBQUczQixLQUFLNEIsUUFBVSxFQUN6QzVCLEtBQUsyQixRQUFVLEVBQ2YzQixLQUFLeUIsUUFBUW1DLEtBQUssQ0FBRTVELEtBQUsyQixPQUFRM0IsS0FBSzRCLFVBRXRDNUIsS0FBS21HLFNBQVcsRUFHbEIsTUFDRixJQUFLLE9BRURuRyxLQUFLMkIsU0FBVzNCLEtBQUswQixLQUFPLElBQzNCMUIsS0FBS3lCLFFBQVFzQixRQUFVLEdBQUsvQyxLQUFLMkIsT0FBUyxJQUFNM0IsS0FBS3lCLFFBQVF6QixLQUFLeUIsUUFBUXNCLE9BQVMsR0FBRyxLQUV2Ri9DLEtBQUs4QyxJQUFJOUMsS0FBSzJCLFFBQVEzQixLQUFLNEIsUUFBVTVCLEtBQUs4QyxJQUFJOUMsS0FBSzJCLE9BQVMsR0FBRzNCLEtBQUs0QixRQUNwRTVCLEtBQUs4QyxJQUFJOUMsS0FBSzJCLE9BQVMsR0FBRzNCLEtBQUs0QixRQUFVLEVBQ3pDNUIsS0FBSzJCLFFBQVUsRUFDZjNCLEtBQUt5QixRQUFRbUMsS0FBSyxDQUFFNUQsS0FBSzJCLE9BQVEzQixLQUFLNEIsVUFFdEM1QixLQUFLbUcsU0FBVyxFQUVsQixNQUNGLElBQUssUUFFRG5HLEtBQUs0QixTQUFXNUIsS0FBSzBCLEtBQU8sSUFDM0IxQixLQUFLeUIsUUFBUXNCLFFBQVUsR0FBSy9DLEtBQUs0QixPQUFTLElBQU01QixLQUFLeUIsUUFBUXpCLEtBQUt5QixRQUFRc0IsT0FBUyxHQUFHLEtBRXZGL0MsS0FBSzhDLElBQUk5QyxLQUFLMkIsUUFBUTNCLEtBQUs0QixRQUFVNUIsS0FBSzhDLElBQUk5QyxLQUFLMkIsUUFBUTNCLEtBQUs0QixPQUFTLEdBQ3pFNUIsS0FBSzhDLElBQUk5QyxLQUFLMkIsUUFBUTNCLEtBQUs0QixPQUFTLEdBQUssRUFDekM1QixLQUFLNEIsUUFBVSxFQUNmNUIsS0FBS3lCLFFBQVFtQyxLQUFLLENBQUU1RCxLQUFLMkIsT0FBUTNCLEtBQUs0QixVQUV0QzVCLEtBQUttRyxTQUFXLEVBRWxCLE1BQ0YsSUFBSyxPQUVlLElBQWhCbkcsS0FBSzRCLFNBQ0o1QixLQUFLeUIsUUFBUXNCLFFBQVUsR0FBSy9DLEtBQUs0QixPQUFTLElBQU01QixLQUFLeUIsUUFBUXpCLEtBQUt5QixRQUFRc0IsT0FBUyxHQUFHLEtBRXZGL0MsS0FBSzhDLElBQUk5QyxLQUFLMkIsUUFBUTNCLEtBQUs0QixRQUFVNUIsS0FBSzhDLElBQUk5QyxLQUFLMkIsUUFBUTNCLEtBQUs0QixPQUFTLEdBQ3pFNUIsS0FBSzhDLElBQUk5QyxLQUFLMkIsUUFBUTNCLEtBQUs0QixPQUFTLEdBQUssRUFDekM1QixLQUFLNEIsUUFBVSxFQUNmNUIsS0FBS3lCLFFBQVFtQyxLQUFLLENBQUU1RCxLQUFLMkIsT0FBUTNCLEtBQUs0QixVQUV0QzVCLEtBQUttRyxTQUFXLEVBRWxCLE1BQ0YsUUFDRSxNQUFNLElBQUlqRCxNQUFNLFFBSXRCa0QsY0FDRSxNQUFNdEQsRUFBTSxHQUVaOUMsS0FBS3FHLFNBQVcsR0FDaEIsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUl0RyxLQUFLMEIsS0FBTTRFLEdBQUssRUFBRyxDQUNyQ3hELEVBQUl3RCxHQUFLLEdBQ1QsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUl2RyxLQUFLMEIsS0FBTTZFLEdBQUssRUFDOUJELEVBQUlDLElBQXdCLEdBQWpCdkcsS0FBSzBCLEtBQU8sSUFDekJvQixFQUFJd0QsR0FBR0MsR0FBS0QsRUFBSXRHLEtBQUswQixLQUFPNkUsRUFBSSxFQUNoQ3ZHLEtBQUtxRyxTQUFTekMsS0FDWCxHQUFFckQsS0FBS2lHLE1BQU0sS0FBT3hHLEtBQUswQixLQUFPLEdBQUs2RSxPQUFPaEcsS0FBS2lHLE1BQU0sS0FBT3hHLEtBQUswQixLQUFPLEdBQUs0RSxRQUdsRnhELEVBQUl3RCxHQUFHQyxHQUFLLEVBSWxCLE9BQU96RCxFQUdUMkQsVUFFRSxJQURBekcsS0FBS3lCLFFBQVFtQyxLQUFLLENBQUU1RCxLQUFLMkIsT0FBUTNCLEtBQUs0QixTQUNqQzVCLEtBQUttRyxRQUFVLEVBQUduRyxLQUFLbUcsUUFBVW5HLEtBQUswQixNQUFRLEVBQUcxQixLQUFLbUcsU0FBVyxFQUNwRSxPQUFRNUYsS0FBS0MsTUFBTSxFQUFJRCxLQUFLOEUsV0FDMUIsS0FBSyxFQUdIckYsS0FBS2lHLEtBQUssTUFFVixNQUNGLEtBQUssRUFFSGpHLEtBQUtpRyxLQUFLLFNBRVYsTUFDRixLQUFLLEVBRUhqRyxLQUFLaUcsS0FBSyxRQUVWLE1BQ0YsS0FBSyxFQUVIakcsS0FBS2lHLEtBQUssUUFFVixNQUNGLFFBQ0UsTUFBTSxJQUFJL0MsTUFBTSxRQUt4QndDLGNBQ0UsSUFBSW5FLEVBQVMscUNBQ2IsTUFBTU8sRUFBZ0I5QixLQUFLOEIsV0FBUCxNQUVwQixJQUFLLElBQUl3RSxFQUFJLEVBQUc1QyxFQUFRLEVBQUc0QyxFQUFJdEcsS0FBSzBCLEtBQU00RSxHQUFLLEVBQzdDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJdkcsS0FBSzBCLEtBQU02RSxHQUFLLEVBQUcsQ0FDckMsTUFBTUcsRUFBYTFHLEtBQUs4QyxJQUFJd0QsR0FBR0MsR0FDL0IsSUFBSUksRUFBWSxhQUNaQyxHQUFZLEVBQ1pDLEVBQWEsd0NBQ2JDLEVBQVksR0FFaEIsR0FBSUosRUFBWSxDQUNkLE1BQU1LLEVBQVEvRyxLQUFLcUcsU0FBU0ssRUFBYSxHQUN6Q0MsRUFBWSxPQUNaQyxHQUFZLEVBQ1pDLEVBQWEsR0FDYkMsRUFBYSxtQ0FBa0M5RyxLQUM1Q29GLHNDQUFzQzJCLHVCQUEyQmpGLEtBR3RFNEIsR0FBUyxFQUVUbkMsR0FBVSxrQkFDUnNGLDZCQUNlN0csS0FBS2dILGtDQUNYaEgsS0FBS2dILGlDQUNOdEQsaUJBQ05vRCwwQkFDU0osd0JBQ0ZDLDRCQUNJQyxNQUFjRixVQUlqQyxNQUFNTyxFQUFVbkcsU0FBU29HLGNBQWMsT0FDdkNELEVBQVFsRCxVQUFVaUIsSUFBSSxTQUN0QmlDLEVBQVF4RCxNQUFNMEQsTUFBUXJGLEVBQ3RCbUYsRUFBUWpHLFVBQVlPLEVBRXBCVCxTQUFTNEIsS0FBSzBFLFlBQVlILEdBSzVCeEIsZUFBZ0I1QyxFQUFHRyxJQUNqQmhELEtBQUtrRyxVQUFZbEcsS0FBS3FILGFBQWF4RSxFQUFHRyxHQUN0Q2hELEtBQUtzSCxhQUFjLEVBQ25CdEgsS0FBS3VILE1BQVFDLEtBQUtDLE1BRWxCekgsS0FBS2EsTUFBUVQsYUFBWSxLQUd2QixHQUZBSixLQUFLMEgsV0FBYUYsS0FBS0MsTUFBUXpILEtBQUt1SCxNQUVoQ3ZILEtBQUswSCxZQUFjMUgsS0FBSzZCLGNBRzFCLE9BRkFWLGNBQWNuQixLQUFLYSxZQUNuQmIsS0FBS3NILGFBQWMsR0FJckJ0SCxLQUFLMkgsU0FDSixJQUdMTixhQUFheEUsRUFBR0csR0FDZCxPQUFJaEQsS0FBSzJCLE9BQVNrQixFQUNQLEtBR1A3QyxLQUFLMkIsT0FBU2tCLEVBQ1QsT0FHTDdDLEtBQUs0QixPQUFTb0IsRUFDUCxPQUdKLFFBR1QyRSxPQUNFLE1BQU1DLEVBQWE1SCxLQUFLZ0gsU0FBV2hILEtBQUs2QixjQUFnQjdCLEtBQUswSCxXQUM3RCxPQUFRMUgsS0FBS2tHLFdBQ1gsSUFBSyxLQUNIbEcsS0FBS29ELEVBQUVLLE1BQU1vRSxVQUFhLGtCQUFpQkQsUUFDM0MsTUFDRixJQUFLLE9BQ0g1SCxLQUFLb0QsRUFBRUssTUFBTW9FLFVBQWEsaUJBQWdCRCxRQUMxQyxNQUNGLElBQUssT0FDSDVILEtBQUtvRCxFQUFFSyxNQUFNb0UsVUFBYSxlQUFjRCxXQUN4QyxNQUNGLElBQUssUUFDSDVILEtBQUtvRCxFQUFFSyxNQUFNb0UsVUFBYSxjQUFhRCxXQUN2QyxNQUNGLFFBQ0UsTUFBTSxJQUFJMUUsTUFBTSxRQUt0QnFCLEtBQUt1RCxHQUNILElBQUk5SCxLQUFLc0gsWUFFVCxJQUFLLElBQUloQixFQUFJLEVBQUdBLEVBQUl0RyxLQUFLOEMsSUFBSUMsT0FBUXVELEdBQUssRUFDeEMsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUl2RyxLQUFLOEMsSUFBSXdELEdBQUd2RCxPQUFRd0QsR0FBSyxFQUMzQyxHQUFJdkcsS0FBSzhDLElBQUl3RCxHQUFHQyxLQUFPdUIsR0FBWTlILEtBQUt3RCxXQUFXOEMsRUFBR0MsR0FBSSxDQUV4RHZHLEtBQUs4RCxVQUVMLE1BQU1ULEVBQU92QyxTQUFTQyxjQUFlLFNBQVFmLEtBQUs4QyxJQUFJOUMsS0FBSzJCLFFBQVEzQixLQUFLNEIsU0E2QnhFLE9BNUJBNUIsS0FBS29ELEVBQUl0QyxTQUFTQyxjQUFlLFNBQVFmLEtBQUs4QyxJQUFJd0QsR0FBR0MsSUFHckR2RyxLQUFLeUYsY0FBYyxDQUFFYSxFQUFHQyxJQUV4QnZHLEtBQUsyRixpQkFFTFosWUFBVyxNQUNSMUIsRUFBS0ksTUFBTUMsTUFBTzFELEtBQUtvRCxFQUFFSyxNQUFNQyxPQUFTLENBQUMxRCxLQUFLb0QsRUFBRUssTUFBTUMsTUFBT0wsRUFBS0ksTUFBTUMsT0FHekUxRCxLQUFLb0QsRUFBRUssTUFBTW9FLFVBQVksR0FFckI3SCxLQUFLMkIsU0FBVzNCLEtBQUs0QixRQUFVNUIsS0FBSzRCLFNBQVc1QixLQUFLMEIsS0FBTyxHQUN6RDFCLEtBQUs0RixZQUNQNUYsS0FBS3dCLE9BQU9KLGVBR2ZwQixLQUFLNkIsZ0JBQ043QixLQUFLOEMsSUFBSXdELEdBQUdDLEdBQUl2RyxLQUFLOEMsSUFBSTlDLEtBQUsyQixRQUFRM0IsS0FBSzRCLFNBQVksQ0FDdkQ1QixLQUFLOEMsSUFBSTlDLEtBQUsyQixRQUFRM0IsS0FBSzRCLFFBQzNCNUIsS0FBSzhDLElBQUl3RCxHQUFHQyxJQUVkdkcsS0FBSzJCLE9BQVMyRSxFQUNkdEcsS0FBSzRCLE9BQVMyRSxFQUVkdkcsS0FBSzJELHNCQUNMM0QsS0FBS3lCLFFBQVFtQyxLQUFLLENBQUU1RCxLQUFLMkIsT0FBUTNCLEtBQUs0QixVQU85Q2tDLFVBQ0U5RCxLQUFLK0gsY0FBZ0IsRUFDckJqSCxTQUFTQyxjQUFjLFNBQVNDLFVBQVloQixLQUFLK0gsYUFHbkR2RSxXQUFXWCxFQUFHRyxHQUNaLE9BQ2lDLElBQTlCekMsS0FBS3lILElBQUloSSxLQUFLMkIsT0FBU2tCLElBQVk3QyxLQUFLNEIsT0FBU29CLEdBQU0sR0FDekIsSUFBOUJ6QyxLQUFLeUgsSUFBSWhJLEtBQUs0QixPQUFTb0IsSUFBWWhELEtBQUsyQixPQUFTa0IsR0FBTSxFQUk1RG9GLGtCQUNFakksS0FBS2tJLG1CQUFxQmxJLEtBQUtrSSxrQkFFL0IsTUFBTUMsRUFBWXJILFNBQVNDLGNBQWMsZUFDbkNxSCxFQUFZQyxLQUFLQyxNQUFNQyxhQUFhQyxRQUFRLGdCQUFrQixHQUNwRSxJQUFJQyxFQUFPLEdBRVgsSUFBSyxJQUFJbkMsRUFBSSxFQUFHQSxFQUFJOEIsRUFBVXJGLE9BQVF1RCxHQUFLLEVBQ3pDbUMsR0FBUyxhQUFZTCxFQUFVOUIsR0FBRzVFLHVDQUF1QzBHLEVBQVU5QixHQUNoRm9DLHVDQUF1Q04sRUFBVTlCLEdBQUduRyxZQUV6RGdJLEVBQVVuSCxVQUFhLGlEQUNEeUgsU0FDbEJ6SSxLQUFLa0ksbUJBQ1BDLEVBQVVwRSxVQUFVaUIsSUFBSSxpQkFDeEJoRixLQUFLd0IsT0FBT0osZUFFWitHLEVBQVVwRSxVQUFVQyxPQUFPLGlCQUMzQmhFLEtBQUt3QixPQUFPdEIsbUJBSWhCMEYsU0FBUytDLEdBQ1AsSUFBSyxJQUFJckMsRUFBSSxFQUFHQSxFQUFJdEcsS0FBSzBCLEtBQU00RSxHQUFLLEVBQ2xDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJdkcsS0FBSzBCLEtBQU02RSxHQUFLLEVBQ2xDLEdBQUlELEVBQUlDLElBQXdCLEdBQWpCdkcsS0FBSzBCLEtBQU8sSUFDckIxQixLQUFLNEksSUFBSXRDLEdBQUdDLEtBQU92RyxLQUFLOEMsSUFBSXdELEdBQUdDLEdBQUksT0FBTyxFQVNwRCxPQUxBdkcsS0FBSzZGLGVBQ0w3RixLQUFLNkksY0FBY0YsR0FDZEEsR0FDSDNJLEtBQUs4SSxZQUVBLEVBR1RBLFdBQ0UsSUFBSVYsRUFBWUMsS0FBS0MsTUFBTUMsYUFBYUMsUUFBUSxnQkFBa0IsR0FDbEVKLEVBQVV4RSxLQUFLLENBQUU4RSxNQUFPMUksS0FBSytILGFBQWNyRyxLQUFNMUIsS0FBSzBCLEtBQU12QixLQUFNSCxLQUFLd0IsT0FBT1gsUUFDOUV1SCxFQUFVVyxNQUFLLENBQUNDLEVBQUdDLElBQ1ZELEVBQUVOLE1BQVFPLEVBQUVQLFFBRXJCTixFQUFZQSxFQUFVYyxNQUFNLEVBQUcsSUFFL0JYLGFBQWFZLFFBQVEsYUFBY2QsS0FBS2UsVUFBVWhCLElBR3BEUyxjQUFjRixHQUNaM0ksS0FBS3FKLFNBQVd2SSxTQUFTQyxjQUFjLFVBQ3ZDZixLQUFLcUosU0FBU3RGLFVBQVVpQixJQUFJLE9BRTVCaEYsS0FBS3FKLFNBQVNySSxXQUFjLHFEQUFvRGhCLEtBQzdFb0YsbUNBQW1DdUQsRUFDbEMsU0FDQyxpQ0FBZ0MzSSxLQUFLd0IsT0FBT1gsV0FBV2IsS0FBSytILG1DQUNqRWhELFlBQVcsS0FDVC9FLEtBQUtxSixTQUFTdEksY0FBYyxhQUFhMEMsTUFBTTZGLFFBQVUsSUFDeEQsSUFHTGpJLE9BQ0VyQixLQUFLa0ksbUJBQW9CLEVBQ3pCbEksS0FBS2lGLGdCQUFnQixJQUFLLEdBQzFCakYsS0FBS3lCLFFBQVUsR0FDZnpCLEtBQUsrSCxhQUFlLEVBQ3BCakgsU0FBU0MsY0FBYyxTQUFTQyxVQUFZaEIsS0FBSytILGFBQ2pEL0gsS0FBSzBCLEtBQU9aLFNBQVN5SSxlQUFlLGFBQWFDLE1BRWpEeEosS0FBS2dILFNBQVd5QyxXQUFXekosS0FBSzhCLFdBQWE5QixLQUFLMEIsS0FBTyxFQUFJMUIsS0FBSytCLFlBQVlyQixRQUFRLEdBRXRGVixLQUFLc0MsY0FFTHRDLEtBQUsyQixPQUFTM0IsS0FBSzBCLEtBQU8sRUFDMUIxQixLQUFLNEIsT0FBUzVCLEtBQUswQixLQUFPLEVBRTFCMUIsS0FBSzhDLElBQU05QyxLQUFLb0csY0FDaEJwRyxLQUFLNEksSUFBTTVJLEtBQUtvRyxjQUVoQnBHLEtBQUt5RyxVQUVMekcsS0FBSzBGLGNBQ0wxRixLQUFLd0IsT0FBT0gsT0FFWnJCLEtBQUttRSxrQkFHUDdDLE9BQ0V0QixLQUFLZ0gsU0FBV3lDLFdBQVd6SixLQUFLOEIsV0FBYTlCLEtBQUswQixLQUFPLEVBQUkxQixLQUFLK0IsWUFBWXJCLFFBQVEsR0FDdEZJLFNBQVNDLGNBQWMsU0FBU0MsVUFBWWhCLEtBQUsrSCxhQUNqRC9ILEtBQUtzQyxjQUNMdEMsS0FBSzBGLGNBQ0wxRixLQUFLNEksSUFBTTVJLEtBQUtvRyxjQUNoQnBHLEtBQUt3QixPQUFPRixPQUdadEIsS0FBS21FLG9CRDFnQkh1RixFQUFTNUksU0FBU29HLGNBQWMsVUFDdEN3QyxFQUFPM0YsVUFBVWlCLElBQUksVUFDckIwRSxFQUFPMUksVUFBWSxzQ0FDbkJGLFNBQVM0QixLQUFLMEUsWUFBWXNDLEdBRTFCLE1BQU1DLEVBQU83SSxTQUFTb0csY0FBYyxPQUNwQ3lDLEVBQUs1RixVQUFVaUIsSUFBSSxRQUVuQjJFLEVBQUszSSxVQUFhLG1QQU1hTyxFQUFNUyxRQUFVLFNBQVcsa3BCQW1CMURsQixTQUFTNEIsS0FBSzBFLFlBQVl1QyxHQUUxQnBJLEVBQU1GLE9BRU5QLFNBQVNDLGNBQWMsYUFBYXNELGlCQUFpQixTQUFTLEtBQzVEOUMsRUFBTUYsVUFHUlAsU0FBU0MsY0FBYyxTQUFTc0QsaUJBQWlCLFNBQVMsS0FDeERrRSxhQUFhWSxRQUNYLFdBQ0FkLEtBQUtlLFVBQVUsQ0FDYlEsV0FBWXJJLEVBQU04RSxTQUNsQjVFLFFBQVNGLEVBQU1FLFFBQ2ZDLEtBQU1ILEVBQU1HLEtBQ1ptSSxXQUFZdEksRUFBTXVCLElBQ2xCM0MsS0FBTW9CLEVBQU1DLE9BQU92QixZQUNuQnlJLE1BQU9uSCxFQUFNd0csYUFDYjFFLEtBQU0sQ0FBRTlCLEVBQU1JLE9BQVFKLEVBQU1LLFFBQzVCd0QsUUFBUzdELEVBQU02RCxjQUtyQnRFLFNBQVNDLGNBQWMsU0FBU3NELGlCQUFpQixTQUFTLEtBQ3hELE1BQU0sV0FBRXVGLEVBQUYsUUFBY25JLEVBQWQsS0FBdUJDLEVBQXZCLFdBQTZCbUksRUFBN0IsS0FBeUMxSixFQUF6QyxNQUErQ3VJLEVBQS9DLEtBQXNEckYsRUFBdEQsUUFBNEQrQixHQUFZaUQsS0FBS0MsTUFDakZDLGFBQWFDLFFBQVEsYUFFdkJqSCxFQUFNOEUsU0FBV3VELEVBQ2pCckksRUFBTUUsUUFBVUEsRUFDaEJGLEVBQU1HLEtBQU9BLEVBQ2JILEVBQU1DLE9BQU92QixZQUFjRSxFQUMzQm9CLEVBQU13RyxhQUFlVyxFQUNyQm5ILEVBQU11QixJQUFNK0csR0FDVnRJLEVBQU1JLE9BQVFKLEVBQU1LLFFBQVd5QixFQUNqQzlCLEVBQU02RCxRQUFVQSxFQUNoQjdELEVBQU1ELE9BQ05DLEVBQU1DLE9BQU9GLFVBR2ZSLFNBQVN5SSxlQUFlLGFBQWFsRixpQkFBaUIsVUFBVSxLQUM5RDlDLEVBQU1GLE9BQ05FLEVBQU1DLE9BQU9ILFVBR2ZQLFNBQVNDLGNBQWMsVUFBVXNELGlCQUFpQixTQUFTLEtBQ3pEOUMsRUFBTUMsT0FBT0osYUFDYkcsRUFBTStELFVBR1J4RSxTQUFTQyxjQUFjLFVBQVVzRCxpQkFBaUIsU0FBVUMsSUFDMUQvQyxFQUFNc0QsY0FDRnRELEVBQU1TLFFBQ1JzQyxFQUFJaEIsT0FBT1MsVUFBVWlCLElBQUksVUFFekJWLEVBQUloQixPQUFPUyxVQUFVQyxPQUFPLGFBSWhDbEQsU0FBU0MsY0FBYyxVQUFVc0QsaUJBQWlCLFNBQVVDLElBQzFEL0MsRUFBTTBHLGtCQUNGMUcsRUFBTTZHLFVBQ1I5RCxFQUFJaEIsT0FBT1MsVUFBVWlCLElBQUksVUFFekJWLEVBQUloQixPQUFPUyxVQUFVQyxPQUFPLGVFcEc1QjhGLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixHQUFHRixFQUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVVDLFFBRzNDLElBQUlDLEVBQVNKLEVBQXlCRSxHQUFZLENBR2pEQyxRQUFTLElBSU5FLEVBQWMsQ0FBRUMsR0FBSUosRUFBVUUsT0FBUUEsRUFBUUcsUUFBU0MsRUFBb0JOLEdBQVdPLFFBQVNSLEdBTW5HLE9BTEFBLEVBQW9CekQsRUFBRTlELFNBQVEsU0FBU2dJLEdBQVdBLEVBQVFMLE1BQzFERCxFQUFTQyxFQUFZRCxPQUNyQkMsRUFBWUUsUUFBUUksS0FBS1AsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0UsRUFBWUksU0FHdEVMLEVBQU9ELFFBSWZGLEVBQW9CVyxFQUFJSixFQUd4QlAsRUFBb0JZLEVBQUliLEVBR3hCQyxFQUFvQnpELEVBQUksR0NoQ3hCeUQsRUFBb0JhLEdBQU1DLEdBRWJBLEVBQVUsSUFBTWQsRUFBb0JlLElBQU0saUJDSHZEZixFQUFvQmdCLEtBQU8sSUFBV2hCLEVBQW9CZSxJQUFNLG1CQ0FoRWYsRUFBb0JlLEVBQUksSUFBTSx1QkNBOUJmLEVBQW9CaUIsRUFBSSxXQUN2QixHQUEwQixpQkFBZkMsV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPakwsTUFBUSxJQUFJa0wsU0FBUyxjQUFiLEdBQ2QsTUFBTzlILEdBQ1IsR0FBc0IsaUJBQVgrSCxPQUFxQixPQUFPQSxRQUxqQixHQ0F4QnBCLEVBQW9CcUIsRUFBSSxDQUFDQyxFQUFLQyxJQUFTQyxPQUFPQyxVQUFVQyxlQUFlaEIsS0FBS1ksRUFBS0MsR1RBN0UxTCxFQUFhLEdBQ2JDLEVBQW9CLGNBRXhCa0ssRUFBb0IyQixFQUFJLENBQUNDLEVBQUtDLEVBQU1DLEtBQ25DLEdBQUdqTSxFQUFXK0wsR0FBUS9MLEVBQVcrTCxHQUFLL0gsS0FBS2dJLE9BQTNDLENBQ0EsSUFBSUUsRUFBUUMsRUFDWixRQUFXQyxJQUFSSCxFQUVGLElBREEsSUFBSUksRUFBVW5MLFNBQVNvTCxxQkFBcUIsVUFDcEM1RixFQUFJLEVBQUdBLEVBQUkyRixFQUFRbEosT0FBUXVELElBQUssQ0FDdkMsSUFBSTZGLEVBQUlGLEVBQVEzRixHQUNoQixHQUFHNkYsRUFBRUMsYUFBYSxRQUFVVCxHQUFPUSxFQUFFQyxhQUFhLGlCQUFtQnZNLEVBQW9CZ00sRUFBSyxDQUFFQyxFQUFTSyxFQUFHLE9BRzFHTCxJQUNIQyxHQUFhLEdBQ2JELEVBQVNoTCxTQUFTb0csY0FBYyxXQUV6Qm1GLFFBQVUsUUFDakJQLEVBQU9RLFFBQVUsSUFDYnZDLEVBQW9Cd0MsSUFDdkJULEVBQU9VLGFBQWEsUUFBU3pDLEVBQW9Cd0MsSUFFbERULEVBQU9VLGFBQWEsZUFBZ0IzTSxFQUFvQmdNLEdBQ3hEQyxFQUFPVyxJQUFNZCxHQUVkL0wsRUFBVytMLEdBQU8sQ0FBQ0MsR0FDbkIsSUFBSWMsRUFBbUIsQ0FBQ0MsRUFBTUMsS0FFN0JkLEVBQU9lLFFBQVVmLEVBQU9nQixPQUFTLEtBQ2pDQyxhQUFhVCxHQUNiLElBQUlVLEVBQVVwTixFQUFXK0wsR0FJekIsVUFITy9MLEVBQVcrTCxHQUNsQkcsRUFBT21CLFlBQWNuQixFQUFPbUIsV0FBV3RLLFlBQVltSixHQUNuRGtCLEdBQVdBLEVBQVF4SyxTQUFTMEssR0FBT0EsRUFBR04sS0FDbkNELEVBQU0sT0FBT0EsRUFBS0MsSUFHbEJOLEVBQVV2SCxXQUFXMkgsRUFBaUJTLEtBQUssVUFBTW5CLEVBQVcsQ0FBRW9CLEtBQU0sVUFBVzlKLE9BQVF3SSxJQUFXLE1BQ3RHQSxFQUFPZSxRQUFVSCxFQUFpQlMsS0FBSyxLQUFNckIsRUFBT2UsU0FDcERmLEVBQU9nQixPQUFTSixFQUFpQlMsS0FBSyxLQUFNckIsRUFBT2dCLFFBQ25EZixHQUFjakwsU0FBU3VNLEtBQUtqRyxZQUFZMEUsSyxNVXhDekMsSUFJSXdCLEVBUUFDLEVBR0FDLEVBQ0FDLEVBaEJBQyxFQUFvQixHQUNwQkMsRUFBbUI1RCxFQUFvQlksRUFJdkNpRCxFQUFpQixHQUdqQkMsRUFBMkIsR0FDM0JDLEVBQWdCLE9BK0twQixTQUFTQyxFQUFVQyxHQUNsQkYsRUFBZ0JFLEVBQ2hCLElBQUssSUFBSTFILEVBQUksRUFBR0EsRUFBSXVILEVBQXlCOUssT0FBUXVELElBQ3BEdUgsRUFBeUJ2SCxHQUFHbUUsS0FBSyxLQUFNdUQsR0FvQnpDLFNBQVNDLEVBQXdCZixHQUNoQyxHQUFnQyxJQUE1QkssRUFBaUJ4SyxPQUFjLE9BQU9tSyxJQUMxQyxJQUFJZ0IsRUFBVVgsRUFFZCxPQURBQSxFQUFtQixHQUNaWSxRQUFRQyxJQUFJRixHQUFTRyxNQUFLLFdBQ2hDLE9BQU9KLEVBQXdCZixNQUlqQyxTQUFTb0IsRUFBU0MsR0FDakIsR0FBc0IsU0FBbEJULEVBQ0gsTUFBTSxJQUFJNUssTUFBTSwwQ0FHakIsT0FEQTZLLEVBQVUsU0FDSGhFLEVBQW9CeUUsT0FBT0gsTUFBSyxTQUFVSSxHQUNoRCxJQUFLQSxFQUVKLE9BREFWLEVBQVVXLElBQTRCLFFBQVUsUUFDekMsS0FHUlgsRUFBVSxXQUVWLElBQUlZLEVBQWlCLEdBSXJCLE9BSEFwQixFQUFtQixHQUNuQkMsRUFBNkIsR0FFdEJXLFFBQVFDLElBQ2Q3QyxPQUFPcUQsS0FBSzdFLEVBQW9COEUsTUFBTUMsUUFBTyxTQUM1Q0MsRUFDQWxELEdBVUEsT0FSQTlCLEVBQW9COEUsS0FBS2hELEdBQ3hCNEMsRUFBTzlELEVBQ1A4RCxFQUFPTyxFQUNQUCxFQUFPL0QsRUFDUHFFLEVBQ0F2QixFQUNBbUIsR0FFTUksSUFFUixLQUNDVixNQUFLLFdBQ04sT0FBT0osR0FBd0IsV0FDOUIsT0FBSU0sRUFDSVUsRUFBY1YsSUFFckJSLEVBQVUsU0FFSFksWUFPWixTQUFTTyxFQUFTQyxHQUNqQixNQUFzQixVQUFsQnJCLEVBQ0lLLFFBQVFpQixVQUFVZixNQUFLLFdBQzdCLE1BQU0sSUFBSW5MLE1BQU0sOENBR1grTCxFQUFjRSxHQUd0QixTQUFTRixFQUFjRSxHQUN0QkEsRUFBVUEsR0FBVyxHQUVyQlQsSUFFQSxJQUFJVyxFQUFVN0IsRUFBMkI4QixLQUFJLFNBQVU5RSxHQUN0RCxPQUFPQSxFQUFRMkUsTUFFaEIzQixPQUE2QnhCLEVBRTdCLElBdUJJdUQsRUF2QkFDLEVBQVNILEVBQ1hDLEtBQUksU0FBVU4sR0FDZCxPQUFPQSxFQUFFTyxTQUVURSxPQUFPQyxTQUVULEdBQUlGLEVBQU96TSxPQUFTLEVBRW5CLE9BREFnTCxFQUFVLFNBQ0hJLFFBQVFpQixVQUFVZixNQUFLLFdBQzdCLE1BQU1tQixFQUFPLE1BS2Z6QixFQUFVLFdBRVZzQixFQUFRN00sU0FBUSxTQUFVbU4sR0FDckJBLEVBQU9DLFNBQVNELEVBQU9DLGFBSTVCN0IsRUFBVSxTQUdWLElBQUk4QixFQUFjLFNBQVVDLEdBQ3RCUCxJQUFPQSxFQUFRTyxJQUdqQkMsRUFBa0IsR0FhdEIsT0FaQVYsRUFBUTdNLFNBQVEsU0FBVW1OLEdBQ3pCLEdBQUlBLEVBQU9LLE1BQU8sQ0FDakIsSUFBSUMsRUFBVU4sRUFBT0ssTUFBTUgsR0FDM0IsR0FBSUksRUFDSCxJQUFLLElBQUkzSixFQUFJLEVBQUdBLEVBQUkySixFQUFRbE4sT0FBUXVELElBQ25DeUosRUFBZ0JuTSxLQUFLcU0sRUFBUTNKLFFBTzdCaUosR0FDSHhCLEVBQVUsUUFDSEksUUFBUWlCLFVBQVVmLE1BQUssV0FDN0IsTUFBTWtCLE1BSUo5QixFQUNJd0IsRUFBY0UsR0FBU2QsTUFBSyxTQUFVNUYsR0FJNUMsT0FIQXNILEVBQWdCdk4sU0FBUSxTQUFVd0gsR0FDN0J2QixFQUFLeUgsUUFBUWxHLEdBQVksR0FBR3ZCLEVBQUs3RSxLQUFLb0csTUFFcEN2QixNQUlUc0YsRUFBVSxRQUNISSxRQUFRaUIsUUFBUVcsSUFHeEIsU0FBU3JCLElBQ1IsR0FBSWpCLEVBV0gsT0FWS0QsSUFBNEJBLEVBQTZCLElBQzlEakMsT0FBT3FELEtBQUs3RSxFQUFvQm9HLE1BQU0zTixTQUFRLFNBQVVxSixHQUN2RDRCLEVBQXlCakwsU0FBUSxTQUFVd0gsR0FDMUNELEVBQW9Cb0csS0FBS3RFLEdBQ3hCN0IsRUFDQXdELFNBSUhDLE9BQTJCekIsR0FDcEIsRUFqVlRqQyxFQUFvQnFHLEtBQU8xQyxFQUUzQjNELEVBQW9CekQsRUFBRTFDLE1BQUssU0FBVXVMLEdBQ3BDLElBK0Q4Qm5GLEVBQVVxRyxFQUNwQ0MsRUFoRUFwRyxFQUFTaUYsRUFBUWpGLE9BQ2pCSyxFQVdMLFNBQXVCQSxFQUFTUCxHQUMvQixJQUFJcUcsRUFBSzFDLEVBQWlCM0QsR0FDMUIsSUFBS3FHLEVBQUksT0FBTzlGLEVBQ2hCLElBQUkyQyxFQUFLLFNBQVVxRCxHQUNsQixHQUFJRixFQUFHQyxJQUFJRSxPQUFRLENBQ2xCLEdBQUk3QyxFQUFpQjRDLEdBQVUsQ0FDOUIsSUFBSUUsRUFBVTlDLEVBQWlCNEMsR0FBU0UsU0FDTCxJQUEvQkEsRUFBUVAsUUFBUWxHLElBQ25CeUcsRUFBUTdNLEtBQUtvRyxRQUdkNEQsRUFBaUIsQ0FBQzVELEdBQ2xCc0QsRUFBcUJpRCxHQUVnQixJQUFsQ0YsRUFBR0ssU0FBU1IsUUFBUUssSUFDdkJGLEVBQUdLLFNBQVM5TSxLQUFLMk0sUUFHbEJJLFFBQVFDLEtBQ1AsNEJBQ0NMLEVBQ0EsMEJBQ0F2RyxHQUVGNEQsRUFBaUIsR0FFbEIsT0FBT3JELEVBQVFnRyxJQUVaTSxFQUEyQixTQUFVQyxHQUN4QyxNQUFPLENBQ05DLGNBQWMsRUFDZEMsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBTzFHLEVBQVF1RyxJQUVoQkksSUFBSyxTQUFVMUgsR0FDZGUsRUFBUXVHLEdBQVF0SCxLQUluQixJQUFLLElBQUlzSCxLQUFRdkcsRUFDWmdCLE9BQU9DLFVBQVVDLGVBQWVoQixLQUFLRixFQUFTdUcsSUFBa0IsTUFBVEEsR0FDMUR2RixPQUFPNEYsZUFBZWpFLEVBQUk0RCxFQUFNRCxFQUF5QkMsSUFNM0QsT0FIQTVELEVBQUc5SixFQUFJLFNBQVV5SCxHQUNoQixPQStHRixTQUE4QnVHLEdBQzdCLE9BQVF0RCxHQUNQLElBQUssUUFNSixPQUxBQyxFQUFVLFdBQ1ZSLEVBQWlCM0osS0FBS3dOLEdBQ3RCbkQsR0FBd0IsV0FDdkJGLEVBQVUsWUFFSnFELEVBQ1IsSUFBSyxVQUVKLE9BREE3RCxFQUFpQjNKLEtBQUt3TixHQUNmQSxFQUNSLFFBQ0MsT0FBT0EsR0E1SERDLENBQXFCOUcsRUFBUW5ILEVBQUV5SCxLQUVoQ3FDLEVBM0RPb0UsQ0FBY25DLEVBQVE1RSxRQUFTNEUsRUFBUS9FLElBQ3JERixFQUFPb0csS0E2RHVCdEcsRUE3REttRixFQUFRL0UsR0E2REhpRyxFQTdET25HLEVBOEQzQ29HLEVBQU0sQ0FFVGlCLHNCQUF1QixHQUN2QkMsc0JBQXVCLEdBQ3ZCQyxlQUFlLEVBQ2ZDLGVBQWUsRUFDZkMsa0JBQWtCLEVBQ2xCQyxpQkFBa0IsR0FDbEJDLE1BQU92RSxJQUF1QnRELEVBQzlCOEgsYUFBYyxXQUNibEUsRUFBaUJ5QyxFQUFHSSxRQUFRdkgsUUFDNUJvRSxFQUFxQnRELEVBQ3JCRCxFQUFvQkMsSUFJckJ3RyxRQUFRLEVBQ1J1QixPQUFRLFNBQVVDLEVBQUtDLEdBQ3RCLFFBQVlqRyxJQUFSZ0csRUFBbUIxQixFQUFJbUIsZUFBZ0IsT0FDdEMsR0FBbUIsbUJBQVJPLEVBQW9CMUIsRUFBSW1CLGNBQWdCTyxPQUNuRCxHQUFtQixpQkFBUkEsR0FBNEIsT0FBUkEsRUFDbkMsSUFBSyxJQUFJMUwsRUFBSSxFQUFHQSxFQUFJMEwsRUFBSWpQLE9BQVF1RCxJQUMvQmdLLEVBQUlpQixzQkFBc0JTLEVBQUkxTCxJQUFNMkwsR0FBWSxrQkFDN0MzQixFQUFJaUIsc0JBQXNCUyxHQUFPQyxHQUFZLGNBRW5EQyxRQUFTLFNBQVVGLEdBQ2xCLFFBQVloRyxJQUFSZ0csRUFBbUIxQixFQUFJb0IsZUFBZ0IsT0FDdEMsR0FBbUIsaUJBQVJNLEdBQTRCLE9BQVJBLEVBQ25DLElBQUssSUFBSTFMLEVBQUksRUFBR0EsRUFBSTBMLEVBQUlqUCxPQUFRdUQsSUFDL0JnSyxFQUFJa0Isc0JBQXNCUSxFQUFJMUwsS0FBTSxPQUNqQ2dLLEVBQUlrQixzQkFBc0JRLElBQU8sR0FFdkNwQyxRQUFTLFNBQVVxQyxHQUNsQjNCLEVBQUlzQixpQkFBaUJoTyxLQUFLcU8sSUFFM0JFLGtCQUFtQixTQUFVRixHQUM1QjNCLEVBQUlzQixpQkFBaUJoTyxLQUFLcU8sSUFFM0JHLHFCQUFzQixTQUFVSCxHQUMvQixJQUFJSSxFQUFNL0IsRUFBSXNCLGlCQUFpQjFCLFFBQVErQixHQUNuQ0ksR0FBTyxHQUFHL0IsRUFBSXNCLGlCQUFpQjVMLE9BQU9xTSxFQUFLLElBRWhEQyxXQUFZLFdBRVgsT0FEQXRTLEtBQUsyUixrQkFBbUIsRUFDaEI3RCxHQUNQLElBQUssT0FDSk4sRUFBNkIsR0FDN0JqQyxPQUFPcUQsS0FBSzdFLEVBQW9Cb0csTUFBTTNOLFNBQVEsU0FBVXFKLEdBQ3ZEOUIsRUFBb0JvRyxLQUFLdEUsR0FDeEI3QixFQUNBd0QsTUFHRk8sRUFBVSxTQUNWLE1BQ0QsSUFBSyxRQUNKeEMsT0FBT3FELEtBQUs3RSxFQUFvQm9HLE1BQU0zTixTQUFRLFNBQVVxSixHQUN2RDlCLEVBQW9Cb0csS0FBS3RFLEdBQ3hCN0IsRUFDQXdELE1BR0YsTUFDRCxJQUFLLFVBQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFNBQ0hDLEVBQTJCQSxHQUE0QixJQUFJN0osS0FDM0RvRyxLQVVKdUksTUFBT2pFLEVBQ1AwQixNQUFPZCxFQUNQc0QsT0FBUSxTQUFVOUcsR0FDakIsSUFBS0EsRUFBRyxPQUFPb0MsRUFDZkQsRUFBeUJqSyxLQUFLOEgsSUFFL0IrRyxpQkFBa0IsU0FBVS9HLEdBQzNCbUMsRUFBeUJqSyxLQUFLOEgsSUFFL0JnSCxvQkFBcUIsU0FBVWhILEdBQzlCLElBQUkyRyxFQUFNeEUsRUFBeUJxQyxRQUFReEUsR0FDdkMyRyxHQUFPLEdBQUd4RSxFQUF5QjdILE9BQU9xTSxFQUFLLElBSXBETSxLQUFNakYsRUFBa0IxRCxJQUV6QnNELE9BQXFCdEIsRUFDZHNFLEdBN0pQcEcsRUFBT3VHLFFBQVU3QyxFQUNqQjFELEVBQU93RyxTQUFXLEdBQ2xCOUMsRUFBaUIsR0FDakJ1QixFQUFRNUUsUUFBVUEsS0FHbkJSLEVBQW9COEUsS0FBTyxHQUMzQjlFLEVBQW9Cb0csS0FBTyxJLFNDL0IzQixJQUFJeUMsRUFDQTdJLEVBQW9CaUIsRUFBRTZILGdCQUFlRCxFQUFZN0ksRUFBb0JpQixFQUFFOEgsU0FBVyxJQUN0RixJQUFJaFMsRUFBV2lKLEVBQW9CaUIsRUFBRWxLLFNBQ3JDLElBQUs4UixHQUFhOVIsSUFDYkEsRUFBU2lTLGdCQUNaSCxFQUFZOVIsRUFBU2lTLGNBQWN0RyxNQUMvQm1HLEdBQVcsQ0FDZixJQUFJM0csRUFBVW5MLEVBQVNvTCxxQkFBcUIsVUFDekNELEVBQVFsSixTQUFRNlAsRUFBWTNHLEVBQVFBLEVBQVFsSixPQUFTLEdBQUcwSixLQUs3RCxJQUFLbUcsRUFBVyxNQUFNLElBQUkxUCxNQUFNLHlEQUNoQzBQLEVBQVlBLEVBQVVJLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGakosRUFBb0JrSixFQUFJTCxHLFNDVnhCLElBa0RJTSxFQUNBQyxFQUNBQyxFQUNBQyxFQXJEQUMsRUFBa0IsQ0FDckJDLElBQUssR0FXRkMsRUFBd0IsR0FDNUIsU0FBU0MsRUFBZ0I1SSxHQUN4QixPQUFPLElBQUlzRCxTQUFRLENBQUNpQixFQUFTc0UsS0FDNUJGLEVBQXNCM0ksR0FBV3VFLEVBRWpDLElBQUl6RCxFQUFNNUIsRUFBb0JrSixFQUFJbEosRUFBb0JhLEdBQUdDLEdBRXJEMEUsRUFBUSxJQUFJck0sTUFhaEI2RyxFQUFvQjJCLEVBQUVDLEdBWkZpQixJQUNuQixHQUFHNEcsRUFBc0IzSSxHQUFVLENBQ2xDMkksRUFBc0IzSSxRQUFXbUIsRUFDakMsSUFBSTJILEVBQVkvRyxJQUF5QixTQUFmQSxFQUFNUSxLQUFrQixVQUFZUixFQUFNUSxNQUNoRXdHLEVBQVVoSCxHQUFTQSxFQUFNdEosUUFBVXNKLEVBQU10SixPQUFPbUosSUFDcEQ4QyxFQUFNc0UsUUFBVSw0QkFBOEJoSixFQUFVLGNBQWdCOEksRUFBWSxLQUFPQyxFQUFVLElBQ3JHckUsRUFBTXVCLEtBQU8saUJBQ2J2QixFQUFNbkMsS0FBT3VHLEVBQ2JwRSxFQUFNZ0IsUUFBVXFELEVBQ2hCRixFQUFPbkUsVUF5QlgsU0FBU3VFLEVBQWEzRSxHQUdyQixTQUFTNEUsRUFBeUJDLEdBVWpDLElBVEEsSUFBSWpFLEVBQWtCLENBQUNpRSxHQUNuQkMsRUFBdUIsR0FFdkJDLEVBQVFuRSxFQUFnQlQsS0FBSSxTQUFVbEYsR0FDekMsTUFBTyxDQUNOK0osTUFBTyxDQUFDL0osR0FDUkEsR0FBSUEsTUFHQzhKLEVBQU1uUixPQUFTLEdBQUcsQ0FDeEIsSUFBSXFSLEVBQVlGLEVBQU0zTyxNQUNsQnlFLEVBQVdvSyxFQUFVaEssR0FDckIrSixFQUFRQyxFQUFVRCxNQUNsQmpLLEVBQVNILEVBQW9CWSxFQUFFWCxHQUNuQyxHQUNFRSxLQUNBQSxFQUFPb0csSUFBSW1CLGVBQWtCdkgsRUFBT29HLElBQUlxQixrQkFGMUMsQ0FLQSxHQUFJekgsRUFBT29HLElBQUlvQixjQUNkLE1BQU8sQ0FDTnRFLEtBQU0sZ0JBQ04rRyxNQUFPQSxFQUNQbkssU0FBVUEsR0FHWixHQUFJRSxFQUFPb0csSUFBSXVCLE1BQ2QsTUFBTyxDQUNOekUsS0FBTSxhQUNOK0csTUFBT0EsRUFDUG5LLFNBQVVBLEdBR1osSUFBSyxJQUFJMUQsRUFBSSxFQUFHQSxFQUFJNEQsRUFBT3VHLFFBQVExTixPQUFRdUQsSUFBSyxDQUMvQyxJQUFJK04sRUFBV25LLEVBQU91RyxRQUFRbkssR0FDMUJnTyxFQUFTdkssRUFBb0JZLEVBQUUwSixHQUNuQyxHQUFLQyxFQUFMLENBQ0EsR0FBSUEsRUFBT2hFLElBQUlrQixzQkFBc0J4SCxHQUNwQyxNQUFPLENBQ05vRCxLQUFNLFdBQ04rRyxNQUFPQSxFQUFNSSxPQUFPLENBQUNGLElBQ3JCckssU0FBVUEsRUFDVnFLLFNBQVVBLElBRytCLElBQXZDdEUsRUFBZ0JHLFFBQVFtRSxLQUN4QkMsRUFBT2hFLElBQUlpQixzQkFBc0J2SCxJQUMvQmlLLEVBQXFCSSxLQUN6QkosRUFBcUJJLEdBQVksSUFDbENHLEVBQVlQLEVBQXFCSSxHQUFXLENBQUNySyxhQUd2Q2lLLEVBQXFCSSxHQUM1QnRFLEVBQWdCbk0sS0FBS3lRLEdBQ3JCSCxFQUFNdFEsS0FBSyxDQUNWdVEsTUFBT0EsRUFBTUksT0FBTyxDQUFDRixJQUNyQmpLLEdBQUlpSyxTQUtQLE1BQU8sQ0FDTmpILEtBQU0sV0FDTnBELFNBQVVnSyxFQUNWakUsZ0JBQWlCQSxFQUNqQmtFLHFCQUFzQkEsR0FJeEIsU0FBU08sRUFBWXhMLEVBQUdDLEdBQ3ZCLElBQUssSUFBSTNDLEVBQUksRUFBR0EsRUFBSTJDLEVBQUVsRyxPQUFRdUQsSUFBSyxDQUNsQyxJQUFJbU8sRUFBT3hMLEVBQUUzQyxJQUNZLElBQXJCMEMsRUFBRWtILFFBQVF1RSxJQUFjekwsRUFBRXBGLEtBQUs2USxJQTNFakMxSyxFQUFvQjJLLFVBQVUzSyxFQUFvQjJLLEVBQUVDLFNBQ3hEekIsT0FBc0JsSCxFQWdGdEIsSUFBSWlJLEVBQXVCLEdBQ3ZCbEUsRUFBa0IsR0FDbEI2RSxFQUFnQixHQUVoQkMsRUFBd0IsU0FBK0IzSyxHQUMxRHlHLFFBQVFDLEtBQ1AsNEJBQThCMUcsRUFBT0UsR0FBSyx5QkFJNUMsSUFBSyxJQUFJSixLQUFZbUosRUFDcEIsR0FBSXBKLEVBQW9CcUIsRUFBRStILEVBQWVuSixHQUFXLENBQ25ELElBRUkyRixFQUZBbUYsRUFBbUIzQixFQUFjbkosR0FZakMrSyxHQUFhLEVBQ2JDLEdBQVUsRUFDVkMsR0FBWSxFQUNaQyxFQUFZLEdBSWhCLFFBZkN2RixFQURHbUYsRUFDTWYsRUFBeUIvSixHQUV6QixDQUNSb0QsS0FBTSxXQUNOcEQsU0FBVUEsSUFRRG1LLFFBQ1ZlLEVBQVkseUJBQTJCdkYsRUFBT3dFLE1BQU1nQixLQUFLLFNBRWxEeEYsRUFBT3ZDLE1BQ2QsSUFBSyxnQkFDQStCLEVBQVFpRyxZQUFZakcsRUFBUWlHLFdBQVd6RixHQUN0Q1IsRUFBUWtHLGlCQUNaTixFQUFhLElBQUk3UixNQUNoQixvQ0FDQ3lNLEVBQU8zRixTQUNQa0wsSUFFSCxNQUNELElBQUssV0FDQS9GLEVBQVFpRyxZQUFZakcsRUFBUWlHLFdBQVd6RixHQUN0Q1IsRUFBUWtHLGlCQUNaTixFQUFhLElBQUk3UixNQUNoQiwyQ0FDQ3lNLEVBQU8zRixTQUNQLE9BQ0EyRixFQUFPMEUsU0FDUGEsSUFFSCxNQUNELElBQUssYUFDQS9GLEVBQVFtRyxjQUFjbkcsRUFBUW1HLGFBQWEzRixHQUMxQ1IsRUFBUW9HLG1CQUNaUixFQUFhLElBQUk3UixNQUNoQixtQkFBcUI4RyxFQUFXLG1CQUFxQmtMLElBRXZELE1BQ0QsSUFBSyxXQUNBL0YsRUFBUXFHLFlBQVlyRyxFQUFRcUcsV0FBVzdGLEdBQzNDcUYsR0FBVSxFQUNWLE1BQ0QsSUFBSyxXQUNBN0YsRUFBUXNHLFlBQVl0RyxFQUFRc0csV0FBVzlGLEdBQzNDc0YsR0FBWSxFQUNaLE1BQ0QsUUFDQyxNQUFNLElBQUkvUixNQUFNLG9CQUFzQnlNLEVBQU92QyxNQUUvQyxHQUFJMkgsRUFDSCxNQUFPLENBQ054RixNQUFPd0YsR0FHVCxHQUFJQyxFQUdILElBQUtoTCxLQUZMNEssRUFBYzVLLEdBQVk4SyxFQUMxQk4sRUFBWXpFLEVBQWlCSixFQUFPSSxpQkFDbkJKLEVBQU9zRSxxQkFDbkJsSyxFQUFvQnFCLEVBQUV1RSxFQUFPc0UscUJBQXNCakssS0FDakRpSyxFQUFxQmpLLEtBQ3pCaUssRUFBcUJqSyxHQUFZLElBQ2xDd0ssRUFDQ1AsRUFBcUJqSyxHQUNyQjJGLEVBQU9zRSxxQkFBcUJqSyxLQUs1QmlMLElBQ0hULEVBQVl6RSxFQUFpQixDQUFDSixFQUFPM0YsV0FDckM0SyxFQUFjNUssR0FBWTZLLEdBSTdCMUIsT0FBZ0JuSCxFQUloQixJQURBLElBbUJJMEosRUFuQkFDLEVBQThCLEdBQ3pCcFAsRUFBSSxFQUFHQSxFQUFJd0osRUFBZ0JoTixPQUFRd0QsSUFBSyxDQUNoRCxJQUFJcVAsRUFBbUI3RixFQUFnQnhKLEdBRXRDd0QsRUFBb0JZLEVBQUVpTCxJQUN0QjdMLEVBQW9CWSxFQUFFaUwsR0FBa0J0RixJQUFJbUIsZUFFNUNtRCxFQUFjZ0IsS0FBc0JmLElBRW5DOUssRUFBb0JZLEVBQUVpTCxHQUFrQnRGLElBQUlxQixrQkFFN0NnRSxFQUE0Qi9SLEtBQUssQ0FDaENzRyxPQUFRMEwsRUFDUnJMLFFBQVNSLEVBQW9CWSxFQUFFaUwsR0FBa0J0RixJQUFJd0IsYUFDckQrRCxhQUFjOUwsRUFBb0JZLEVBQUVpTCxHQUFrQnRGLElBQUltQixnQkFPN0QsTUFBTyxDQUNON0IsUUFBUyxXQU1SLElBQUl5QyxFQUxKZSxFQUEyQjVRLFNBQVEsU0FBVXFJLFVBQ3JDeUksRUFBZ0J6SSxNQUV4QnVJLE9BQTZCcEgsRUFJN0IsSUFEQSxJQW9DSThKLEVBcENBNUIsRUFBUW5FLEVBQWdCN0csUUFDckJnTCxFQUFNblIsT0FBUyxHQUFHLENBQ3hCLElBQUlpSCxFQUFXa0ssRUFBTTNPLE1BQ2pCMkUsRUFBU0gsRUFBb0JZLEVBQUVYLEdBQ25DLEdBQUtFLEVBQUwsQ0FFQSxJQUFJeUksRUFBTyxHQUdQb0QsRUFBa0I3TCxFQUFPb0csSUFBSXNCLGlCQUNqQyxJQUFLckwsRUFBSSxFQUFHQSxFQUFJd1AsRUFBZ0JoVCxPQUFRd0QsSUFDdkN3UCxFQUFnQnhQLEdBQUdrRSxLQUFLLEtBQU1rSSxHQWMvQixJQVpBNUksRUFBb0JxRyxLQUFLcEcsR0FBWTJJLEVBR3JDekksRUFBT29HLElBQUlFLFFBQVMsU0FHYnpHLEVBQW9CWSxFQUFFWCxVQUd0QmlLLEVBQXFCakssR0FHdkJ6RCxFQUFJLEVBQUdBLEVBQUkyRCxFQUFPd0csU0FBUzNOLE9BQVF3RCxJQUFLLENBQzVDLElBQUl5UCxFQUFRak0sRUFBb0JZLEVBQUVULEVBQU93RyxTQUFTbkssSUFDN0N5UCxJQUNMM0QsRUFBTTJELEVBQU12RixRQUFRUCxRQUFRbEcsS0FDakIsR0FDVmdNLEVBQU12RixRQUFRekssT0FBT3FNLEVBQUssS0FPN0IsSUFBSyxJQUFJdUQsS0FBb0IzQixFQUM1QixHQUFJbEssRUFBb0JxQixFQUFFNkksRUFBc0IyQixLQUMvQzFMLEVBQVNILEVBQW9CWSxFQUFFaUwsSUFJOUIsSUFGQUYsRUFDQ3pCLEVBQXFCMkIsR0FDakJyUCxFQUFJLEVBQUdBLEVBQUltUCxFQUEyQjNTLE9BQVF3RCxJQUNsRHVQLEVBQWFKLEVBQTJCblAsSUFDeEM4TCxFQUFNbkksRUFBT3dHLFNBQVNSLFFBQVE0RixLQUNuQixHQUFHNUwsRUFBT3dHLFNBQVMxSyxPQUFPcU0sRUFBSyxJQU0vQ3JDLE1BQU8sU0FBVUgsR0FFaEIsSUFBSyxJQUFJbUUsS0FBa0JZLEVBQ3RCN0ssRUFBb0JxQixFQUFFd0osRUFBZVosS0FDeENqSyxFQUFvQlcsRUFBRXNKLEdBQWtCWSxFQUFjWixJQUt4RCxJQUFLLElBQUkxTixFQUFJLEVBQUdBLEVBQUkrTSxFQUFxQnRRLE9BQVF1RCxJQUNoRCtNLEVBQXFCL00sR0FBR3lELEdBSXpCLElBQUssSUFBSTZMLEtBQW9CM0IsRUFDNUIsR0FBSWxLLEVBQW9CcUIsRUFBRTZJLEVBQXNCMkIsR0FBbUIsQ0FDbEUsSUFBSTFMLEVBQVNILEVBQW9CWSxFQUFFaUwsR0FDbkMsR0FBSTFMLEVBQVEsQ0FDWHdMLEVBQ0N6QixFQUFxQjJCLEdBR3RCLElBRkEsSUFBSUssRUFBWSxHQUNaQyxFQUEyQixHQUN0QjNQLEVBQUksRUFBR0EsRUFBSW1QLEVBQTJCM1MsT0FBUXdELElBQUssQ0FDM0QsSUFBSXVQLEVBQWFKLEVBQTJCblAsR0FDeEM0UCxFQUNIak0sRUFBT29HLElBQUlpQixzQkFBc0J1RSxHQUNsQyxHQUFJSyxFQUFnQixDQUNuQixJQUEyQyxJQUF2Q0YsRUFBVS9GLFFBQVFpRyxHQUF3QixTQUM5Q0YsRUFBVXJTLEtBQUt1UyxHQUNmRCxFQUF5QnRTLEtBQUtrUyxJQUdoQyxJQUFLLElBQUlNLEVBQUksRUFBR0EsRUFBSUgsRUFBVWxULE9BQVFxVCxJQUNyQyxJQUNDSCxFQUFVRyxHQUFHM0wsS0FBSyxLQUFNaUwsR0FDdkIsTUFBTzVGLEdBQ0pYLEVBQVFrSCxXQUNYbEgsRUFBUWtILFVBQVUsQ0FDakJqSixLQUFNLGlCQUNOcEQsU0FBVTRMLEVBQ1ZVLGFBQWNKLEVBQXlCRSxHQUN2QzdHLE1BQU9PLElBR0pYLEVBQVFvSCxlQUNaMUcsRUFBWUMsS0FTbEIsSUFBSyxJQUFJMUUsRUFBSSxFQUFHQSxFQUFJdUssRUFBNEI1UyxPQUFRcUksSUFBSyxDQUM1RCxJQUFJcUosRUFBT2tCLEVBQTRCdkssR0FDbkNwQixFQUFXeUssRUFBS3ZLLE9BQ3BCLElBQ0N1SyxFQUFLbEssUUFBUVAsR0FDWixNQUFPOEYsR0FDUixHQUFpQyxtQkFBdEIyRSxFQUFLb0IsYUFDZixJQUNDcEIsRUFBS29CLGFBQWEvRixHQUNqQixNQUFPMEcsR0FDSnJILEVBQVFrSCxXQUNYbEgsRUFBUWtILFVBQVUsQ0FDakJqSixLQUFNLG9DQUNOcEQsU0FBVUEsRUFDVnVGLE1BQU9pSCxFQUNQQyxjQUFlM0csSUFHWlgsRUFBUW9ILGVBQ1oxRyxFQUFZMkcsR0FFYjNHLEVBQVlDLFFBR1RYLEVBQVFrSCxXQUNYbEgsRUFBUWtILFVBQVUsQ0FDakJqSixLQUFNLHNCQUNOcEQsU0FBVUEsRUFDVnVGLE1BQU9PLElBR0pYLEVBQVFvSCxlQUNaMUcsRUFBWUMsSUFNaEIsT0FBT0MsSUFuWFYyRyxLQUFpQywyQkFBSSxDQUFDN0wsRUFBUzhMLEVBQWFDLEtBQzNELElBQUksSUFBSTVNLEtBQVkyTSxFQUNoQjVNLEVBQW9CcUIsRUFBRXVMLEVBQWEzTSxLQUNyQ21KLEVBQWNuSixHQUFZMk0sRUFBWTNNLElBSXJDNE0sR0FBU3ZELEVBQXFCelAsS0FBS2dULEdBQ25DcEQsRUFBc0IzSSxLQUN4QjJJLEVBQXNCM0ksS0FDdEIySSxFQUFzQjNJLFFBQVdtQixJQTZXbkNqQyxFQUFvQm9HLEtBQUswRyxNQUFRLFNBQVU3TSxFQUFVOE0sR0FDL0MzRCxJQUNKQSxFQUFnQixHQUNoQkUsRUFBdUIsR0FDdkJELEVBQTZCLEdBQzdCMEQsRUFBY2xULEtBQUtrUSxJQUVmL0osRUFBb0JxQixFQUFFK0gsRUFBZW5KLEtBQ3pDbUosRUFBY25KLEdBQVlELEVBQW9CVyxFQUFFVixLQUdsREQsRUFBb0I4RSxLQUFLZ0ksTUFBUSxTQUNoQ0UsRUFDQUMsRUFDQUMsRUFDQWxJLEVBQ0ErSCxFQUNBSSxHQUVBSixFQUFjbFQsS0FBS2tRLEdBQ25CWixFQUFzQixHQUN0QkUsRUFBNkI0RCxFQUM3QjdELEVBQWdCOEQsRUFBZW5JLFFBQU8sU0FBVXpELEVBQUtRLEdBRXBELE9BREFSLEVBQUlRLElBQU8sRUFDSlIsSUFDTCxJQUNIZ0ksRUFBdUIsR0FDdkIwRCxFQUFTdlUsU0FBUSxTQUFVcUksR0FFekJkLEVBQW9CcUIsRUFBRWtJLEVBQWlCekksU0FDVm1CLElBQTdCc0gsRUFBZ0J6SSxLQUVoQmtFLEVBQVNuTCxLQUFLNlAsRUFBZ0I1SSxJQUM5QnFJLEVBQW9CckksSUFBVyxNQUc3QmQsRUFBb0IySyxJQUN2QjNLLEVBQW9CMkssRUFBRUMsU0FBVyxTQUFVOUosRUFBU2tFLEdBRWxEbUUsSUFDQ25KLEVBQW9CcUIsRUFBRThILEVBQXFCckksSUFDNUNkLEVBQW9CcUIsRUFBRWtJLEVBQWlCekksU0FDVm1CLElBQTdCc0gsRUFBZ0J6SSxLQUVoQmtFLEVBQVNuTCxLQUFLNlAsRUFBZ0I1SSxJQUM5QnFJLEVBQW9CckksSUFBVyxNQU1uQ2QsRUFBb0J5RSxLQUFPLEtBQzFCLEdBQXFCLG9CQUFWMkksTUFBdUIsTUFBTSxJQUFJalUsTUFBTSxzQ0FDbEQsT0FBT2lVLE1BQU1wTixFQUFvQmtKLEVBQUlsSixFQUFvQmdCLFFBQVFzRCxNQUFNK0ksSUFDdEUsR0FBdUIsTUFBcEJBLEVBQVM1RSxPQUFaLENBQ0EsSUFBSTRFLEVBQVNDLEdBQUksTUFBTSxJQUFJblUsTUFBTSxtQ0FBcUNrVSxFQUFTRSxZQUMvRSxPQUFPRixFQUFTRyxhLEdDcmRsQnhOLEVBQW9CLE0iLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcImdlbS1wdXp6bGU6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IGZuKGV2ZW50KSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdDtcblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5jdXJyZW50VGltZSA9IDA7XHJcbiAgfVxyXG5cclxuICBjYWxjQ3VycmVudFRpbWUoKSB7XHJcbiAgICB0aGlzLnRpbWUgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuY3VycmVudFRpbWUgKz0gMTtcclxuICAgICAgdGhpcy5zZWNUb01pbkFuZFNlYygpO1xyXG4gICAgfSwgMTAwMCk7XHJcbiAgfVxyXG5cclxuICBzZWNUb01pbkFuZFNlYygpIHtcclxuICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRoaXMuY3VycmVudFRpbWUgLyA2MCk7XHJcbiAgICBjb25zdCBzZWMgPSAodGhpcy5jdXJyZW50VGltZSAlIDYwKS50b0ZpeGVkKDApO1xyXG5cclxuICAgIHRoaXMudXBkYXRlVGltZXIoYCR7bWludXRlc306JHtzZWMgPCAxMCA/ICcwJyA6ICcnfSR7c2VjfWApO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVGltZXIobmV3VGltZVZhbHVlKSB7XHJcbiAgICB0aGlzLnRpbWVyID0gbmV3VGltZVZhbHVlO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRpbWUnKS5pbm5lckhUTUwgPSBuZXdUaW1lVmFsdWU7XHJcbiAgICB0aGlzLnJlbmRlclRpbWVyKCk7XHJcbiAgfVxyXG5cclxuICB0aW1lclN0b3AoKSB7XHJcbiAgICBjbGVhckludGVydmFsKHRoaXMudGltZSk7XHJcbiAgICB0aGlzLnVwZGF0ZVRpbWVyKCcwOjAwJyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJUaW1lcigpIHtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lJykuaW5uZXJIVE1MID0gdGhpcy50aW1lcjtcclxuICB9XHJcblxyXG4gIHRpbWVyUGF1c2UoKSB7XHJcbiAgICBjbGVhckludGVydmFsKHRoaXMudGltZSk7XHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICB0aGlzLnRpbWVyU3RvcCgpO1xyXG4gICAgdGhpcy5jdXJyZW50VGltZSA9IG51bGw7XHJcbiAgICB0aGlzLmNhbGNDdXJyZW50VGltZSgpO1xyXG4gIH1cclxuXHJcbiAgbG9hZCgpIHtcclxuICAgIHRoaXMudGltZXJTdG9wKCk7XHJcbiAgICB0aGlzLnNlY1RvTWluQW5kU2VjKCk7XHJcblxyXG4gICAgdGhpcy5jYWxjQ3VycmVudFRpbWUoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEJvYXJkIGZyb20gJy4vQm9hcmQuanMnO1xyXG5cclxuY29uc3QgYm9hcmQgPSBuZXcgQm9hcmQoKTtcclxuXHJcbmNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2hlYWRlcicpO1xyXG5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnaGVhZGVyJyk7XHJcbmhlYWRlci5pbm5lckhUTUwgPSAnPGgxIGNsYXNzPVwiaGVhZGluZ1wiPmdlbSBwdXp6bGU8L2gxPic7XHJcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaGVhZGVyKTtcclxuXHJcbmNvbnN0IG1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxubWVudS5jbGFzc0xpc3QuYWRkKCdtZW51Jyk7XHJcblxyXG5tZW51LmlubmVySFRNTCA9IGAgIFxyXG4gIDxkaXYgY2xhc3M9XCJzZXR0aW5nc1wiPlxyXG4gICAgPGJ1dHRvbiBjbGFzcz1cIm5ldy1nYW1lIGJ0blwiPk5ldzwvYnV0dG9uPlxyXG4gICAgPGJ1dHRvbiBjbGFzcz1cInNhdmUgYnRuXCI+U2F2ZTwvYnV0dG9uPlxyXG4gICAgPGJ1dHRvbiBjbGFzcz1cImxvYWQgYnRuXCI+TG9hZDwvYnV0dG9uPlxyXG4gICAgPGJ1dHRvbiBjbGFzcz1cInNjb3JlIGJ0blwiPlNjb3JlPC9idXR0b24+XHJcbiAgICA8YnV0dG9uIGNsYXNzPVwic291bmQgYnRuICR7Ym9hcmQuc291bmRPbiA/ICdidG4tb24nIDogJyd9XCI+U291bmQ8L2J1dHRvbj5cclxuICAgIDxkaXYgY2xhc3M9XCJzaXplXCI+XHJcbiAgICAgIDxzZWxlY3QgaWQ9XCJmaWVsZFNpemVcIj5cclxuICAgICAgPG9wdGlvbiBzZWxlY3RlZD1cInNlbGVjdGVkXCIgdmFsdWU9XCI0XCIgZGlzYWJsZWQ+RmllbGQgc2l6ZTwvb3B0aW9uPlxyXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCIzXCI+Mzwvb3B0aW9uPlxyXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCI0XCI+NDwvb3B0aW9uPlxyXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCI1XCI+NTwvb3B0aW9uPlxyXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCI2XCI+Njwvb3B0aW9uPlxyXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCI3XCI+Nzwvb3B0aW9uPlxyXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCI4XCI+ODwvb3B0aW9uPlxyXG4gICAgICA8L3NlbGVjdD5cclxuICAgIDwvZGl2PlxyXG4gICAgPGJ1dHRvbiBjbGFzcz1cImNoZWF0IGJ0blwiPkNIRUFUPC9idXR0b24+XHJcbiAgPC9kaXY+XHJcbiAgPGRpdiBjbGFzcz1cImNvdW50ZXJzXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwidGltZXJcIj48c3Bhbj5UaW1lcjogPC9zcGFuPjxzcGFuIGNsYXNzPVwidGltZVwiPjA6MDA8L3NwYW4+PC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwibW92ZXNcIj48c3Bhbj5Nb3ZlczogPC9zcGFuPjxzcGFuIGNsYXNzPVwibW92ZVwiPjA8L3NwYW4+PC9kaXY+XHJcbiAgPC9kaXY+YDtcclxuXHJcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWVudSk7XHJcblxyXG5ib2FyZC5pbml0KCk7XHJcblxyXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3LWdhbWUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICBib2FyZC5pbml0KCk7XHJcbn0pO1xyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNhdmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcclxuICAgICdnYW1lU2F2ZScsXHJcbiAgICBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgIGJnUG9zaXRpb246IGJvYXJkLmJnUG9zQXJyLFxyXG4gICAgICBoaXN0b3J5OiBib2FyZC5oaXN0b3J5LFxyXG4gICAgICBzaXplOiBib2FyZC5zaXplLFxyXG4gICAgICBib2FyZFRhYmxlOiBib2FyZC5hcnIsXHJcbiAgICAgIHRpbWU6IGJvYXJkLnRpbWVyQy5jdXJyZW50VGltZSxcclxuICAgICAgbW92ZXM6IGJvYXJkLm1vdmVzQ291bnRlcixcclxuICAgICAgemVybzogWyBib2FyZC5lbXB0eVgsIGJvYXJkLmVtcHR5WSBdLFxyXG4gICAgICBpbWdOdW1iOiBib2FyZC5pbWdOdW1iXHJcbiAgICB9KVxyXG4gICk7XHJcbn0pO1xyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvYWQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICBjb25zdCB7IGJnUG9zaXRpb24sIGhpc3RvcnksIHNpemUsIGJvYXJkVGFibGUsIHRpbWUsIG1vdmVzLCB6ZXJvLCBpbWdOdW1iIH0gPSBKU09OLnBhcnNlKFxyXG4gICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2dhbWVTYXZlJylcclxuICApO1xyXG4gIGJvYXJkLmJnUG9zQXJyID0gYmdQb3NpdGlvbjtcclxuICBib2FyZC5oaXN0b3J5ID0gaGlzdG9yeTtcclxuICBib2FyZC5zaXplID0gc2l6ZTtcclxuICBib2FyZC50aW1lckMuY3VycmVudFRpbWUgPSB0aW1lO1xyXG4gIGJvYXJkLm1vdmVzQ291bnRlciA9IG1vdmVzO1xyXG4gIGJvYXJkLmFyciA9IGJvYXJkVGFibGU7XHJcbiAgWyBib2FyZC5lbXB0eVgsIGJvYXJkLmVtcHR5WSBdID0gemVybztcclxuICBib2FyZC5pbWdOdW1iID0gaW1nTnVtYjtcclxuICBib2FyZC5sb2FkKCk7XHJcbiAgYm9hcmQudGltZXJDLmxvYWQoKTtcclxufSk7XHJcblxyXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmllbGRTaXplJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gIGJvYXJkLmluaXQoKTtcclxuICBib2FyZC50aW1lckMuaW5pdCgpO1xyXG59KTtcclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGVhdCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gIGJvYXJkLnRpbWVyQy50aW1lclBhdXNlKCk7XHJcbiAgYm9hcmQuYmFjaygpO1xyXG59KTtcclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zb3VuZCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2dCkgPT4ge1xyXG4gIGJvYXJkLnRvZ2dsZVNvdW5kKCk7XHJcbiAgaWYgKGJvYXJkLnNvdW5kT24pIHtcclxuICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LmFkZCgnYnRuLW9uJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnYnRuLW9uJyk7XHJcbiAgfVxyXG59KTtcclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zY29yZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2dCkgPT4ge1xyXG4gIGJvYXJkLnJlbmRlclNjb3JlTGlzdCgpO1xyXG4gIGlmIChib2FyZC5zY29yZUxpc3QpIHtcclxuICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LmFkZCgnYnRuLW9uJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnYnRuLW9uJyk7XHJcbiAgfVxyXG59KTtcclxuIiwiaW1wb3J0IFRpbWVyIGZyb20gJy4vVGltZXIuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9hcmQge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy50aW1lckMgPSBuZXcgVGltZXIoKTtcclxuICAgIHRoaXMuaGlzdG9yeSA9IFtdO1xyXG4gICAgdGhpcy5zaXplID0gNDtcclxuICAgIHRoaXMuZW1wdHlYID0gMDtcclxuICAgIHRoaXMuZW1wdHlZID0gMDtcclxuICAgIHRoaXMuYW5pbWF0aW9uVGltZSA9IDIwMDtcclxuICAgIHRoaXMuYm9hcmRXaWR0aCA9IDQwLjg7XHJcbiAgICB0aGlzLm1hcmdpblNpemUgPSAwLjE7XHJcbiAgICB0aGlzLnNvdW5kT24gPSB0cnVlO1xyXG4gICAgdGhpcy53aW5Tb3VuZCA9IG5ldyBBdWRpbygnLi9hc3NldHMvd2luLm1wMycpO1xyXG4gICAgdGhpcy5zbGlkZVNvdW5kID0gbmV3IEF1ZGlvKCcuL2Fzc2V0cy9zbGlkZS5tcDMnKTtcclxuICAgIHRoaXMuc2xpZGVTb3VuZC52b2x1bWUgPSAwLjI7XHJcbiAgICB0aGlzLmRyYWdORHJvcFNvdW5kID0gbmV3IEF1ZGlvKCcuL2Fzc2V0cy93aG9vc2gtZ3JhaW55X2drb2FxeW5fLm1wMycpO1xyXG4gICAgdGhpcy5kcmFnTkRyb3BTb3VuZC52b2x1bWUgPSAwLjM7XHJcbiAgICB0aGlzLnJlbW92ZUJvYXJkID0gKCkgPT4ge1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYm9hcmQnKS5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtKTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5maW5kRWxlbSA9IChlbGVtKSA9PiB7XHJcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5hcnIubGVuZ3RoOyB4ICs9IDEpIHtcclxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMuYXJyLmxlbmd0aDsgeSArPSAxKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5hcnJbeF1beV0gPT09IHBhcnNlSW50KGVsZW0uaW5uZXJIVE1MLCAxMCkpIHJldHVybiBbIHgsIHkgXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGVsZW0pO1xyXG4gICAgfTtcclxuICAgIHRoaXMuZHJhZ0Ryb3AgPSAoZSkgPT4ge1xyXG4gICAgICBjb25zdCB6ZXJvID0gZS50YXJnZXQ7XHJcbiAgICAgIGNvbnN0IG1vdmVhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhpZGUnKTtcclxuICAgICAgY29uc3QgWyB4LCB5IF0gPSB0aGlzLmZpbmRFbGVtKG1vdmVhYmxlKTtcclxuICAgICAgaWYgKHRoaXMuaXNOZWFyWmVybyh4LCB5KSkge1xyXG4gICAgICAgIFsgdGhpcy5hcnJbeF1beV0sIHRoaXMuYXJyW3RoaXMuZW1wdHlYXVt0aGlzLmVtcHR5WV0gXSA9IFtcclxuICAgICAgICAgIHRoaXMuYXJyW3RoaXMuZW1wdHlYXVt0aGlzLmVtcHR5WV0sXHJcbiAgICAgICAgICB0aGlzLmFyclt4XVt5XVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgWyB0aGlzLmVtcHR5WCwgdGhpcy5lbXB0eVkgXSA9IFsgeCwgeSBdO1xyXG4gICAgICAgIFsgemVyby5zdHlsZS5vcmRlciwgbW92ZWFibGUuc3R5bGUub3JkZXIgXSA9IFsgbW92ZWFibGUuc3R5bGUub3JkZXIsIHplcm8uc3R5bGUub3JkZXIgXTtcclxuICAgICAgICB0aGlzLmNoZWNrRm9ySWRsaW5nKCk7XHJcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goWyB0aGlzLmVtcHR5WCwgdGhpcy5lbXB0eVkgXSk7XHJcbiAgICAgICAgdGhpcy5wbGF5RHJhZ1NvdW5kKCk7XHJcbiAgICAgICAgdGhpcy5hZGRNb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgICAgemVyby5jbGFzc0xpc3QucmVtb3ZlKCdob3ZlcmVkJyk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy50b2dnbGVCdXR0b25zID0gKCkgPT4ge1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYnRuOm5vdCguc291bmQpLCNmaWVsZFNpemUnKS5mb3JFYWNoKChlKSA9PiB7XHJcbiAgICAgICAgZS5kaXNhYmxlZCA9ICFlLmRpc2FibGVkO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgICB0aGlzLmRyYWdkcm9wSGFuZGxlciA9ICgpID0+IHtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNlbGwnKS5mb3JFYWNoKChjZWxsKSA9PiB7XHJcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKGV2dCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZWxlbSA9IGV2dC50YXJnZXQ7XHJcbiAgICAgICAgICB0aGlzLnN3YXAocGFyc2VJbnQoZWxlbS5pbm5lckhUTUwsIDEwKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgXHJcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCB0aGlzLmRyYWdTdGFydCk7XHJcbiAgXHJcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIHRoaXMuZHJhZ092ZXIpO1xyXG4gIFxyXG4gICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIHRoaXMuZHJhZ0Ryb3ApO1xyXG4gIFxyXG4gICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsIHRoaXMuZHJhZ0VuZCk7XHJcbiAgXHJcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCB0aGlzLmRyYWdFbnRlcik7XHJcbiAgXHJcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCB0aGlzLmRyYWdMZWF2ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlU291bmQoKSB7XHJcbiAgICB0aGlzLnNvdW5kT24gPSAhdGhpcy5zb3VuZE9uO1xyXG4gIH1cclxuXHJcbiAgcGxheURyYWdTb3VuZCgpIHtcclxuICAgIGlmICghdGhpcy5zb3VuZE9uKSByZXR1cm47XHJcbiAgICB0aGlzLmRyYWdORHJvcFNvdW5kLmN1cnJlbnRUaW1lID0gMC4xNTtcclxuICAgIHRoaXMuZHJhZ05Ecm9wU291bmQucGxheSgpO1xyXG4gIH1cclxuXHJcbiAgZHJhZ1N0YXJ0KCkge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xyXG4gICAgfSwgMCk7XHJcbiAgfVxyXG5cclxuICBkcmFnRW5kKCkge1xyXG4gICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XHJcbiAgfVxyXG5cclxuICBkcmFnRW50ZXIoKSB7XHJcbiAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2hvdmVyZWQnKTtcclxuICB9XHJcblxyXG4gIGRyYWdMZWF2ZSgpIHtcclxuICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXJlZCcpO1xyXG4gIH1cclxuXHJcbiAgcmFuZG9tSW1nTnVtYmVyKG1heCwgbWluKSB7XHJcbiAgICB0aGlzLmltZ051bWIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbik7XHJcbiAgfVxyXG5cclxuICBiYWNrKCkge1xyXG4gICAgdGhpcy50b2dnbGVCdXR0b25zKCk7XHJcbiAgICB0aGlzLmhpc3RvcnkucG9wKCk7XHJcbiAgICB0aGlzLmJhY2tUaW1lcigpO1xyXG4gIH1cclxuXHJcbiAgYmFja1RpbWVyKCkge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmhpc3RvcnkubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgWyB4LCB5IF0gPSB0aGlzLmhpc3RvcnkucG9wKCk7XHJcbiAgICAgICAgdGhpcy5lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2NlbGwtJHt0aGlzLmFyclt4XVt5XX1gKTtcclxuXHJcbiAgICAgICAgdGhpcy5tb3ZlQW5pbWF0aW9uKFsgeCwgeSBdKTtcclxuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBbIHRoaXMuYXJyW3RoaXMuZW1wdHlYXVt0aGlzLmVtcHR5WV0sIHRoaXMuYXJyW3hdW3ldIF0gPSBbXHJcbiAgICAgICAgICAgIHRoaXMuYXJyW3hdW3ldLFxyXG4gICAgICAgICAgICB0aGlzLmFyclt0aGlzLmVtcHR5WF1bdGhpcy5lbXB0eVldXHJcbiAgICAgICAgICBdO1xyXG4gICAgICAgICAgdGhpcy5lbXB0eVggPSB4O1xyXG4gICAgICAgICAgdGhpcy5lbXB0eVkgPSB5O1xyXG4gICAgICAgICAgdGhpcy5yZW1vdmVCb2FyZCgpO1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJCb2FyZCgpO1xyXG4gICAgICAgICAgdGhpcy5wbGF5U2xpZGVTb3VuZCgpO1xyXG4gICAgICAgICAgdGhpcy5iYWNrVGltZXIoKTtcclxuICAgICAgICB9LCB0aGlzLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY2hlY2tXaW4odHJ1ZSk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25zKCk7XHJcbiAgICAgIH1cclxuICAgIH0sIHRoaXMuYW5pbWF0aW9uVGltZSk7XHJcbiAgfVxyXG5cclxuICBwbGF5V2luU291bmQoKSB7XHJcbiAgICBpZiAoIXRoaXMuc291bmRPbikgcmV0dXJuO1xyXG4gICAgdGhpcy53aW5Tb3VuZC5jdXJyZW50VGltZSA9IDA7XHJcbiAgICB0aGlzLndpblNvdW5kLnBsYXkoKTtcclxuICB9XHJcblxyXG4gIHBsYXlTbGlkZVNvdW5kKCkge1xyXG4gICAgaWYgKCF0aGlzLnNvdW5kT24pIHJldHVybjtcclxuICAgIHRoaXMuc2xpZGVTb3VuZC5jdXJyZW50VGltZSA9IDA7XHJcbiAgICB0aGlzLnNsaWRlU291bmQucGxheSgpO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tGb3JJZGxpbmcoKSB7XHJcbiAgICBjb25zdCBbIGJsWCwgYmxZIF0gPSB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDJdO1xyXG4gICAgaWYgKHRoaXMuZW1wdHlYID09PSBibFggJiYgdGhpcy5lbXB0eVkgPT09IGJsWSkge1xyXG4gICAgICB0aGlzLmhpc3Rvcnkuc3BsaWNlKC0yLCAyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuXHJcbiAgbW92ZShkaXJlY3Rpb24pIHtcclxuICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XHJcbiAgICAgIGNhc2UgJ3VwJzpcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICB0aGlzLmVtcHR5WCAhPT0gMCAmJlxyXG4gICAgICAgICAgKHRoaXMuaGlzdG9yeS5sZW5ndGggPD0gMSB8fCB0aGlzLmVtcHR5WCAtIDEgIT09IHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMl1bMF0pXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICB0aGlzLmFyclt0aGlzLmVtcHR5WF1bdGhpcy5lbXB0eVldID0gdGhpcy5hcnJbdGhpcy5lbXB0eVggLSAxXVt0aGlzLmVtcHR5WV07XHJcbiAgICAgICAgICB0aGlzLmFyclt0aGlzLmVtcHR5WCAtIDFdW3RoaXMuZW1wdHlZXSA9IDA7XHJcbiAgICAgICAgICB0aGlzLmVtcHR5WCAtPSAxO1xyXG4gICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goWyB0aGlzLmVtcHR5WCwgdGhpcy5lbXB0eVkgXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuY291bnRlciAtPSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2Rvd24nOlxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHRoaXMuZW1wdHlYICE9PSB0aGlzLnNpemUgLSAxICYmXHJcbiAgICAgICAgICAodGhpcy5oaXN0b3J5Lmxlbmd0aCA8PSAxIHx8IHRoaXMuZW1wdHlYICsgMSAhPT0gdGhpcy5oaXN0b3J5W3RoaXMuaGlzdG9yeS5sZW5ndGggLSAyXVswXSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHRoaXMuYXJyW3RoaXMuZW1wdHlYXVt0aGlzLmVtcHR5WV0gPSB0aGlzLmFyclt0aGlzLmVtcHR5WCArIDFdW3RoaXMuZW1wdHlZXTtcclxuICAgICAgICAgIHRoaXMuYXJyW3RoaXMuZW1wdHlYICsgMV1bdGhpcy5lbXB0eVldID0gMDtcclxuICAgICAgICAgIHRoaXMuZW1wdHlYICs9IDE7XHJcbiAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChbIHRoaXMuZW1wdHlYLCB0aGlzLmVtcHR5WSBdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5jb3VudGVyIC09IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgdGhpcy5lbXB0eVkgIT09IHRoaXMuc2l6ZSAtIDEgJiZcclxuICAgICAgICAgICh0aGlzLmhpc3RvcnkubGVuZ3RoIDw9IDEgfHwgdGhpcy5lbXB0eVkgKyAxICE9PSB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDJdWzFdKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgdGhpcy5hcnJbdGhpcy5lbXB0eVhdW3RoaXMuZW1wdHlZXSA9IHRoaXMuYXJyW3RoaXMuZW1wdHlYXVt0aGlzLmVtcHR5WSArIDFdO1xyXG4gICAgICAgICAgdGhpcy5hcnJbdGhpcy5lbXB0eVhdW3RoaXMuZW1wdHlZICsgMV0gPSAwO1xyXG4gICAgICAgICAgdGhpcy5lbXB0eVkgKz0gMTtcclxuICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKFsgdGhpcy5lbXB0eVgsIHRoaXMuZW1wdHlZIF0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmNvdW50ZXIgLT0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2xlZnQnOlxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHRoaXMuZW1wdHlZICE9PSAwICYmXHJcbiAgICAgICAgICAodGhpcy5oaXN0b3J5Lmxlbmd0aCA8PSAxIHx8IHRoaXMuZW1wdHlZIC0gMSAhPT0gdGhpcy5oaXN0b3J5W3RoaXMuaGlzdG9yeS5sZW5ndGggLSAyXVsxXSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHRoaXMuYXJyW3RoaXMuZW1wdHlYXVt0aGlzLmVtcHR5WV0gPSB0aGlzLmFyclt0aGlzLmVtcHR5WF1bdGhpcy5lbXB0eVkgLSAxXTtcclxuICAgICAgICAgIHRoaXMuYXJyW3RoaXMuZW1wdHlYXVt0aGlzLmVtcHR5WSAtIDFdID0gMDtcclxuICAgICAgICAgIHRoaXMuZW1wdHlZIC09IDE7XHJcbiAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChbIHRoaXMuZW1wdHlYLCB0aGlzLmVtcHR5WSBdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5jb3VudGVyIC09IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignPjooJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjcmVhdGVCb2FyZCgpIHtcclxuICAgIGNvbnN0IGFyciA9IFtdO1xyXG5cclxuICAgIHRoaXMuYmdQb3NBcnIgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaXplOyBpICs9IDEpIHtcclxuICAgICAgYXJyW2ldID0gW107XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5zaXplOyBqICs9IDEpIHtcclxuICAgICAgICBpZiAoaSArIGogIT09ICh0aGlzLnNpemUgLSAxKSAqIDIpIHtcclxuICAgICAgICAgIGFycltpXVtqXSA9IGkgKiB0aGlzLnNpemUgKyBqICsgMTtcclxuICAgICAgICAgIHRoaXMuYmdQb3NBcnIucHVzaChcclxuICAgICAgICAgICAgYCR7TWF0aC5yb3VuZCgxMDAgLyAodGhpcy5zaXplIC0gMSkgKiBqKX0lICR7TWF0aC5yb3VuZCgxMDAgLyAodGhpcy5zaXplIC0gMSkgKiBpKX0lYFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXJyW2ldW2pdID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcnI7XHJcbiAgfVxyXG5cclxuICBzaHVmZmxlKCkge1xyXG4gICAgdGhpcy5oaXN0b3J5LnB1c2goWyB0aGlzLmVtcHR5WCwgdGhpcy5lbXB0eVkgXSk7XHJcbiAgICBmb3IgKHRoaXMuY291bnRlciA9IDA7IHRoaXMuY291bnRlciA8IHRoaXMuc2l6ZSAqKiAzOyB0aGlzLmNvdW50ZXIgKz0gMSkge1xyXG4gICAgICBzd2l0Y2ggKE1hdGguZmxvb3IoNCAqIE1hdGgucmFuZG9tKCkpKSB7XHJcbiAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgLy8gIE1PVkUgVVBcclxuXHJcbiAgICAgICAgICB0aGlzLm1vdmUoJ3VwJyk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgLy8gIE1PVkUgUklHSFRcclxuICAgICAgICAgIHRoaXMubW92ZSgncmlnaHQnKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAvLyAgTU9WRSBET1dOXHJcbiAgICAgICAgICB0aGlzLm1vdmUoJ2Rvd24nKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAvLyAgTU9WRSBMRUZUXHJcbiAgICAgICAgICB0aGlzLm1vdmUoJ2xlZnQnKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCc+OignKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyQm9hcmQoKSB7XHJcbiAgICBsZXQgYm9hcmQgPSBgPGRpdiBjbGFzcz1cInNjb3JlLWxpc3RcIj50ZXN0PC9kaXY+YDtcclxuICAgIGNvbnN0IGJvYXJkV2lkdGggPSBgJHt0aGlzLmJvYXJkV2lkdGh9cmVtYDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMCwgb3JkZXIgPSAxOyBpIDwgdGhpcy5zaXplOyBpICs9IDEpIHtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnNpemU7IGogKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IGNlbGxOdW1iZXIgPSB0aGlzLmFycltpXVtqXTtcclxuICAgICAgICBsZXQgY2xhc3NOYW1lID0gJ2NlbGwgZW1wdHknO1xyXG4gICAgICAgIGxldCBkcmFnZ2FibGUgPSBmYWxzZTtcclxuICAgICAgICBsZXQgcHJldmVudERlZiA9IFwib25kcmFnb3ZlciA9ICdldmVudC5wcmV2ZW50RGVmYXVsdCgpJ1wiO1xyXG4gICAgICAgIGxldCBiZ0ZvckNlbGwgPSAnJztcclxuXHJcbiAgICAgICAgaWYgKGNlbGxOdW1iZXIpIHtcclxuICAgICAgICAgIGNvbnN0IGJHcG9zID0gdGhpcy5iZ1Bvc0FycltjZWxsTnVtYmVyIC0gMV07XHJcbiAgICAgICAgICBjbGFzc05hbWUgPSAnY2VsbCc7XHJcbiAgICAgICAgICBkcmFnZ2FibGUgPSB0cnVlO1xyXG4gICAgICAgICAgcHJldmVudERlZiA9ICcnO1xyXG4gICAgICAgICAgYmdGb3JDZWxsID0gYGJhY2tncm91bmQ6IHVybCguL2Fzc2V0cy9pbWFnZXMvJHt0aGlzXHJcbiAgICAgICAgICAgIC5pbWdOdW1ifS5qcGcpOyBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAke2JHcG9zfTsgYmFja2dyb3VuZC1zaXplOiAke2JvYXJkV2lkdGh9O2A7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcmRlciArPSAxO1xyXG5cclxuICAgICAgICBib2FyZCArPSBgPGRpdiBcclxuICAgICAgICAke3ByZXZlbnREZWZ9XHJcbiAgICAgICAgICBzdHlsZT0nd2lkdGg6JHt0aGlzLmNlbGxTaXplfXJlbTtcclxuICAgICAgICAgIGhlaWdodDoke3RoaXMuY2VsbFNpemV9cmVtO1xyXG4gICAgICAgICAgb3JkZXI6JHtvcmRlcn07XHJcbiAgICAgICAgICAke2JnRm9yQ2VsbH0nXHJcbiAgICAgICAgICBpZD0nY2VsbC0ke2NlbGxOdW1iZXJ9J1xyXG4gICAgICAgICAgY2xhc3M9JyR7Y2xhc3NOYW1lfSdcclxuICAgICAgICAgIGRyYWdnYWJsZT1cIiR7ZHJhZ2dhYmxlfVwiPiR7Y2VsbE51bWJlcn08L2Rpdj5gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdib2FyZCcpO1xyXG4gICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IGJvYXJkV2lkdGg7XHJcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IGJvYXJkO1xyXG5cclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIG1vdmVBbmltYXRpb24oWyB4LCB5IF0pIHtcclxuICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5nZXREaXJlY3Rpb24oeCwgeSlcclxuICAgIHRoaXMuaW5BbmltYXRpb24gPSB0cnVlO1xyXG4gICAgdGhpcy5zdGFydCA9IERhdGUubm93KCk7XHJcblxyXG4gICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgdGhpcy50aW1lUGFzc2VkID0gRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnQ7XHJcblxyXG4gICAgICBpZiAodGhpcy50aW1lUGFzc2VkID49IHRoaXMuYW5pbWF0aW9uVGltZSkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XHJcbiAgICAgICAgdGhpcy5pbkFuaW1hdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICB9LCAyMCk7XHJcbiAgfVxyXG5cclxuICBnZXREaXJlY3Rpb24oeCwgeSkge1xyXG4gICAgaWYgKHRoaXMuZW1wdHlYIDwgeCkge1xyXG4gICAgICAgIHJldHVybiAndXAnO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgaWYgKHRoaXMuZW1wdHlYID4geCkge1xyXG4gICAgICByZXR1cm4gJ2Rvd24nO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgaWYgKHRoaXMuZW1wdHlZIDwgeSkge1xyXG4gICAgICAgIHJldHVybiAnbGVmdCc7XHJcbiAgICB9XHJcbiAgXHJcbiAgICByZXR1cm4gJ3JpZ2h0JztcclxuICB9XHJcblxyXG4gIGRyYXcoKSB7XHJcbiAgICBjb25zdCByZW1QZXJUaWNrID0gdGhpcy5jZWxsU2l6ZSAvIHRoaXMuYW5pbWF0aW9uVGltZSAqIHRoaXMudGltZVBhc3NlZDtcclxuICAgIHN3aXRjaCAodGhpcy5kaXJlY3Rpb24pIHtcclxuICAgICAgY2FzZSAndXAnOlxyXG4gICAgICAgIHRoaXMuZS5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCAwLCAkey1yZW1QZXJUaWNrfXJlbSlgO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdkb3duJzpcclxuICAgICAgICB0aGlzLmUuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSggMCwgJHtyZW1QZXJUaWNrfXJlbSlgO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICB0aGlzLmUuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSggJHstcmVtUGVyVGlja31yZW0sIDApYDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgIHRoaXMuZS5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCAke3JlbVBlclRpY2t9cmVtLCAwKWA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCc+OignKTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBzd2FwKGNlbGxOdW1iKSB7XHJcbiAgICBpZiAodGhpcy5pbkFuaW1hdGlvbikgcmV0dXJuO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hcnIubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmFycltpXS5sZW5ndGg7IGogKz0gMSkge1xyXG4gICAgICAgIGlmICh0aGlzLmFycltpXVtqXSA9PT0gY2VsbE51bWIgJiYgdGhpcy5pc05lYXJaZXJvKGksIGopKSB7XHJcbiAgICAgICAgICAvLyBNb3ZlIGNvdW50ZXJcclxuICAgICAgICAgIHRoaXMuYWRkTW92ZSgpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHplcm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjY2VsbC0ke3RoaXMuYXJyW3RoaXMuZW1wdHlYXVt0aGlzLmVtcHR5WV19YCk7XHJcbiAgICAgICAgICB0aGlzLmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjY2VsbC0ke3RoaXMuYXJyW2ldW2pdfWApO1xyXG5cclxuICAgICAgICAgIC8vICBmaW5kIHdoZXJlIGFyZSB3ZSBtb3ZpbmdcclxuICAgICAgICAgIHRoaXMubW92ZUFuaW1hdGlvbihbIGksIGogXSk7XHJcblxyXG4gICAgICAgICAgdGhpcy5wbGF5U2xpZGVTb3VuZCgpO1xyXG5cclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBbemVyby5zdHlsZS5vcmRlciwgdGhpcy5lLnN0eWxlLm9yZGVyXSA9IFt0aGlzLmUuc3R5bGUub3JkZXIsIHplcm8uc3R5bGUub3JkZXJdO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZS5zdHlsZS50cmFuc2Zvcm0gPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVtcHR5WCA9PT0gdGhpcy5lbXB0eVkgJiYgdGhpcy5lbXB0eVkgPT09IHRoaXMuc2l6ZSAtIDEpIHtcclxuICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja1dpbigpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVyQy50aW1lclBhdXNlKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9LCB0aGlzLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgICAgWyB0aGlzLmFycltpXVtqXSwgdGhpcy5hcnJbdGhpcy5lbXB0eVhdW3RoaXMuZW1wdHlZXSBdID0gW1xyXG4gICAgICAgICAgICB0aGlzLmFyclt0aGlzLmVtcHR5WF1bdGhpcy5lbXB0eVldLFxyXG4gICAgICAgICAgICB0aGlzLmFycltpXVtqXVxyXG4gICAgICAgICAgXTtcclxuICAgICAgICAgIHRoaXMuZW1wdHlYID0gaTtcclxuICAgICAgICAgIHRoaXMuZW1wdHlZID0gajtcclxuXHJcbiAgICAgICAgICB0aGlzLmNoZWNrRm9ySWRsaW5nKCk7XHJcbiAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChbIHRoaXMuZW1wdHlYLCB0aGlzLmVtcHR5WSBdKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZE1vdmUoKSB7XHJcbiAgICB0aGlzLm1vdmVzQ291bnRlciArPSAxO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vdmUnKS5pbm5lckhUTUwgPSB0aGlzLm1vdmVzQ291bnRlcjtcclxuICB9XHJcblxyXG4gIGlzTmVhclplcm8oeCwgeSkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgKE1hdGguYWJzKHRoaXMuZW1wdHlYIC0geCkgPT09IDEgJiYgdGhpcy5lbXB0eVkgLSB5ID09PSAwKSB8fFxyXG4gICAgICAoTWF0aC5hYnModGhpcy5lbXB0eVkgLSB5KSA9PT0gMSAmJiB0aGlzLmVtcHR5WCAtIHggPT09IDApXHJcbiAgICApO1xyXG4gIH1cclxuICBcclxuICByZW5kZXJTY29yZUxpc3QoKSB7XHJcbiAgICB0aGlzLmlzQWN0aXZlU2NvcmVMaXN0ID0gIXRoaXMuaXNBY3RpdmVTY29yZUxpc3Q7XHJcblxyXG4gICAgY29uc3Qgc2NvcmVFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNjb3JlLWxpc3QnKTtcclxuICAgIGNvbnN0IHNjb3JlTGlzdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Njb3JlLWxpc3QnKSkgfHwgW107XHJcbiAgICBsZXQgbGlzdCA9ICcnO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NvcmVMaXN0Lmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIGxpc3QgKz0gYDxsaT5TaXplOiAke3Njb3JlTGlzdFtpXS5zaXplfSwmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtNb3ZlczogJHtzY29yZUxpc3RbaV1cclxuICAgICAgICAubW92ZXN9LCZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO1RpbWU6ICR7c2NvcmVMaXN0W2ldLnRpbWV9PC9saT5gO1xyXG4gICAgfVxyXG4gICAgc2NvcmVFbGVtLmlubmVySFRNTCA9IGA8aDI+QmVzdCBTY29yZXM8L2gyPlxyXG4gICAgICA8b2wgY2xhc3M9XCJzY29yZVwiPiR7bGlzdH08L29sPmA7XHJcbiAgICBpZiAodGhpcy5pc0FjdGl2ZVNjb3JlTGlzdCkge1xyXG4gICAgICBzY29yZUVsZW0uY2xhc3NMaXN0LmFkZCgnc2NvcmUtbGlzdC1vbicpO1xyXG4gICAgICB0aGlzLnRpbWVyQy50aW1lclBhdXNlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzY29yZUVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnc2NvcmUtbGlzdC1vbicpO1xyXG4gICAgICB0aGlzLnRpbWVyQy5jYWxjQ3VycmVudFRpbWUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNoZWNrV2luKGNoZWF0KSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2l6ZTsgaSArPSAxKSB7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5zaXplOyBqICs9IDEpIHtcclxuICAgICAgICBpZiAoaSArIGogIT09ICh0aGlzLnNpemUgLSAxKSAqIDIpIHtcclxuICAgICAgICAgIGlmICh0aGlzLndpbltpXVtqXSAhPT0gdGhpcy5hcnJbaV1bal0pIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMucGxheVdpblNvdW5kKCk7XHJcbiAgICB0aGlzLnNldFdpbk1lc3NhZ2UoY2hlYXQpO1xyXG4gICAgaWYgKCFjaGVhdCkge1xyXG4gICAgICB0aGlzLnNldFNjb3JlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHNldFNjb3JlKCkge1xyXG4gICAgbGV0IHNjb3JlTGlzdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Njb3JlLWxpc3QnKSkgfHwgW107XHJcbiAgICBzY29yZUxpc3QucHVzaCh7IG1vdmVzOiB0aGlzLm1vdmVzQ291bnRlciwgc2l6ZTogdGhpcy5zaXplLCB0aW1lOiB0aGlzLnRpbWVyQy50aW1lciB9KTtcclxuICAgIHNjb3JlTGlzdC5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIHJldHVybiBhLm1vdmVzIC0gYi5tb3ZlcztcclxuICAgIH0pO1xyXG4gICAgc2NvcmVMaXN0ID0gc2NvcmVMaXN0LnNsaWNlKDAsIDEwKTtcclxuXHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2NvcmUtbGlzdCcsIEpTT04uc3RyaW5naWZ5KHNjb3JlTGlzdCkpO1xyXG4gIH1cclxuXHJcbiAgc2V0V2luTWVzc2FnZShjaGVhdCkge1xyXG4gICAgdGhpcy53aW5Cb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib2FyZCcpO1xyXG4gICAgdGhpcy53aW5Cb2FyZC5jbGFzc0xpc3QuYWRkKCd3aW4nKTtcclxuXHJcbiAgICB0aGlzLndpbkJvYXJkLmlubmVySFRNTCArPSBgPGRpdiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybCguL2Fzc2V0cy9pbWFnZXMvJHt0aGlzXHJcbiAgICAgIC5pbWdOdW1ifS5qcGcpO1wiIGNsYXNzPSd3aW4tdGV4dCc+JHtjaGVhdFxyXG4gICAgICA/ICfQp9CY0KLQldCgISdcclxuICAgICAgOiBg0KPRgNCwISDQktGLINGA0LXRiNC40LvQuCDQs9C+0LvQvtCy0L7Qu9C+0LzQutGDINC30LAgJHt0aGlzLnRpbWVyQy50aW1lcn0g0LggJHt0aGlzLm1vdmVzQ291bnRlcn0g0YXQvtC00L7QsjwvZGl2PmB9PC9kaXY+YDtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0aGlzLndpbkJvYXJkLnF1ZXJ5U2VsZWN0b3IoJy53aW4tdGV4dCcpLnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gICAgfSwgNTApO1xyXG4gIH1cclxuXHJcbiAgaW5pdCgpIHtcclxuICAgIHRoaXMuaXNBY3RpdmVTY29yZUxpc3QgPSBmYWxzZTtcclxuICAgIHRoaXMucmFuZG9tSW1nTnVtYmVyKDE1MCwgMSk7XHJcbiAgICB0aGlzLmhpc3RvcnkgPSBbXTtcclxuICAgIHRoaXMubW92ZXNDb3VudGVyID0gMDtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb3ZlJykuaW5uZXJIVE1MID0gdGhpcy5tb3Zlc0NvdW50ZXI7XHJcbiAgICB0aGlzLnNpemUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmllbGRTaXplJykudmFsdWU7XHJcblxyXG4gICAgdGhpcy5jZWxsU2l6ZSA9IHBhcnNlRmxvYXQodGhpcy5ib2FyZFdpZHRoIC8gdGhpcy5zaXplIC0gMiAqIHRoaXMubWFyZ2luU2l6ZSkudG9GaXhlZCgzKTtcclxuXHJcbiAgICB0aGlzLnJlbW92ZUJvYXJkKCk7XHJcblxyXG4gICAgdGhpcy5lbXB0eVggPSB0aGlzLnNpemUgLSAxO1xyXG4gICAgdGhpcy5lbXB0eVkgPSB0aGlzLnNpemUgLSAxO1xyXG5cclxuICAgIHRoaXMuYXJyID0gdGhpcy5jcmVhdGVCb2FyZCgpO1xyXG4gICAgdGhpcy53aW4gPSB0aGlzLmNyZWF0ZUJvYXJkKCk7XHJcblxyXG4gICAgdGhpcy5zaHVmZmxlKCk7XHJcblxyXG4gICAgdGhpcy5yZW5kZXJCb2FyZCgpO1xyXG4gICAgdGhpcy50aW1lckMuaW5pdCgpO1xyXG5cclxuICAgIHRoaXMuZHJhZ2Ryb3BIYW5kbGVyKCk7XHJcbiAgfVxyXG5cclxuICBsb2FkKCkge1xyXG4gICAgdGhpcy5jZWxsU2l6ZSA9IHBhcnNlRmxvYXQodGhpcy5ib2FyZFdpZHRoIC8gdGhpcy5zaXplIC0gMiAqIHRoaXMubWFyZ2luU2l6ZSkudG9GaXhlZCgzKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb3ZlJykuaW5uZXJIVE1MID0gdGhpcy5tb3Zlc0NvdW50ZXI7XHJcbiAgICB0aGlzLnJlbW92ZUJvYXJkKCk7XHJcbiAgICB0aGlzLnJlbmRlckJvYXJkKCk7XHJcbiAgICB0aGlzLndpbiA9IHRoaXMuY3JlYXRlQm9hcmQoKTtcclxuICAgIHRoaXMudGltZXJDLmxvYWQoKTtcclxuXHJcblxyXG4gICAgdGhpcy5kcmFnZHJvcEhhbmRsZXIoKTtcclxuICB9XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dmFyIGV4ZWNPcHRpb25zID0geyBpZDogbW9kdWxlSWQsIG1vZHVsZTogbW9kdWxlLCBmYWN0b3J5OiBfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXSwgcmVxdWlyZTogX193ZWJwYWNrX3JlcXVpcmVfXyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7IGhhbmRsZXIoZXhlY09wdGlvbnMpOyB9KTtcblx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRleGVjT3B0aW9ucy5mYWN0b3J5LmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGV4ZWNPcHRpb25zLnJlcXVpcmUpO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGV4ZWN1dGlvbiBpbnRlcmNlcHRvclxuX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gW107XG5cbiIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uaHUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGID0gKCkgPT4gXCJcIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gXCI2ZjY3MzFmNWJiNGIwMDY4OGE5MlwiIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsInZhciBjdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xudmFyIGluc3RhbGxlZE1vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmM7XG5cbi8vIG1vZHVsZSBhbmQgcmVxdWlyZSBjcmVhdGlvblxudmFyIGN1cnJlbnRDaGlsZE1vZHVsZTtcbnZhciBjdXJyZW50UGFyZW50cyA9IFtdO1xuXG4vLyBzdGF0dXNcbnZhciByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMgPSBbXTtcbnZhciBjdXJyZW50U3RhdHVzID0gXCJpZGxlXCI7XG5cbi8vIHdoaWxlIGRvd25sb2FkaW5nXG52YXIgYmxvY2tpbmdQcm9taXNlcztcblxuLy8gVGhlIHVwZGF0ZSBpbmZvXG52YXIgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnM7XG52YXIgcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckQgPSBjdXJyZW50TW9kdWxlRGF0YTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5pLnB1c2goZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0dmFyIG1vZHVsZSA9IG9wdGlvbnMubW9kdWxlO1xuXHR2YXIgcmVxdWlyZSA9IGNyZWF0ZVJlcXVpcmUob3B0aW9ucy5yZXF1aXJlLCBvcHRpb25zLmlkKTtcblx0bW9kdWxlLmhvdCA9IGNyZWF0ZU1vZHVsZUhvdE9iamVjdChvcHRpb25zLmlkLCBtb2R1bGUpO1xuXHRtb2R1bGUucGFyZW50cyA9IGN1cnJlbnRQYXJlbnRzO1xuXHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0b3B0aW9ucy5yZXF1aXJlID0gcmVxdWlyZTtcbn0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMgPSB7fTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1ySSA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVSZXF1aXJlKHJlcXVpcmUsIG1vZHVsZUlkKSB7XG5cdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXHRpZiAoIW1lKSByZXR1cm4gcmVxdWlyZTtcblx0dmFyIGZuID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcblx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuXHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcblx0XHRcdFx0dmFyIHBhcmVudHMgPSBpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHM7XG5cdFx0XHRcdGlmIChwYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuXHRcdFx0XHRcdHBhcmVudHMucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcblx0XHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcblx0XHRcdH1cblx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuXHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcblx0XHRcdFx0XHRyZXF1ZXN0ICtcblx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuXHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHQpO1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcXVpcmUocmVxdWVzdCk7XG5cdH07XG5cdHZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiAobmFtZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiByZXF1aXJlW25hbWVdO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJlcXVpcmVbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXHRmb3IgKHZhciBuYW1lIGluIHJlcXVpcmUpIHtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcXVpcmUsIG5hbWUpICYmIG5hbWUgIT09IFwiZVwiKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcihuYW1lKSk7XG5cdFx0fVxuXHR9XG5cdGZuLmUgPSBmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdHJldHVybiB0cmFja0Jsb2NraW5nUHJvbWlzZShyZXF1aXJlLmUoY2h1bmtJZCkpO1xuXHR9O1xuXHRyZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vZHVsZUhvdE9iamVjdChtb2R1bGVJZCwgbWUpIHtcblx0dmFyIGhvdCA9IHtcblx0XHQvLyBwcml2YXRlIHN0dWZmXG5cdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuXHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuXHRcdF9zZWxmSW52YWxpZGF0ZWQ6IGZhbHNlLFxuXHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuXHRcdF9tYWluOiBjdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXHRcdF9yZXF1aXJlU2VsZjogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBtZS5wYXJlbnRzLnNsaWNlKCk7XG5cdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSBtb2R1bGVJZDtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuXHRcdH0sXG5cblx0XHQvLyBNb2R1bGUgQVBJXG5cdFx0YWN0aXZlOiB0cnVlLFxuXHRcdGFjY2VwdDogZnVuY3Rpb24gKGRlcCwgY2FsbGJhY2spIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0fSxcblx0XHRkZWNsaW5lOiBmdW5jdGlvbiAoZGVwKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuXHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuXHRcdH0sXG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXHRcdGludmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMuX3NlbGZJbnZhbGlkYXRlZCA9IHRydWU7XG5cdFx0XHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRcdFx0Y2FzZSBcImlkbGVcIjpcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdFx0Y2FzZSBcImNoZWNrXCI6XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlXCI6XG5cdFx0XHRcdGNhc2UgXCJhcHBseVwiOlxuXHRcdFx0XHRcdChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgfHwgW10pLnB1c2goXG5cdFx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Ly8gaWdub3JlIHJlcXVlc3RzIGluIGVycm9yIHN0YXRlc1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuXHRcdGNoZWNrOiBob3RDaGVjayxcblx0XHRhcHBseTogaG90QXBwbHksXG5cdFx0c3RhdHVzOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0aWYgKCFsKSByZXR1cm4gY3VycmVudFN0YXR1cztcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHZhciBpZHggPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcblx0XHRcdGlmIChpZHggPj0gMCkgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cblx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcblx0XHRkYXRhOiBjdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cblx0fTtcblx0Y3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuXHRyZXR1cm4gaG90O1xufVxuXG5mdW5jdGlvbiBzZXRTdGF0dXMobmV3U3RhdHVzKSB7XG5cdGN1cnJlbnRTdGF0dXMgPSBuZXdTdGF0dXM7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuXHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG59XG5cbmZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHtcblx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXHRcdFx0YmxvY2tpbmdQcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0d2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMucHVzaChwcm9taXNlKTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0fVxufVxuXG5mdW5jdGlvbiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbikge1xuXHRpZiAoYmxvY2tpbmdQcm9taXNlcy5sZW5ndGggPT09IDApIHJldHVybiBmbigpO1xuXHR2YXIgYmxvY2tlciA9IGJsb2NraW5nUHJvbWlzZXM7XG5cdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0cmV0dXJuIFByb21pc2UuYWxsKGJsb2NrZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbik7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBob3RDaGVjayhhcHBseU9uVXBkYXRlKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcImlkbGVcIikge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuXHR9XG5cdHNldFN0YXR1cyhcImNoZWNrXCIpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNKCkudGhlbihmdW5jdGlvbiAodXBkYXRlKSB7XG5cdFx0aWYgKCF1cGRhdGUpIHtcblx0XHRcdHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gXCJyZWFkeVwiIDogXCJpZGxlXCIpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0c2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcblxuXHRcdHZhciB1cGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRcdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDKS5yZWR1Y2UoZnVuY3Rpb24gKFxuXHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0a2V5XG5cdFx0XHQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJDW2tleV0oXG5cdFx0XHRcdFx0dXBkYXRlLmMsXG5cdFx0XHRcdFx0dXBkYXRlLnIsXG5cdFx0XHRcdFx0dXBkYXRlLm0sXG5cdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMsXG5cdFx0XHRcdFx0dXBkYXRlZE1vZHVsZXNcblx0XHRcdFx0KTtcblx0XHRcdFx0cmV0dXJuIHByb21pc2VzO1xuXHRcdFx0fSxcblx0XHRcdFtdKVxuXHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoYXBwbHlPblVwZGF0ZSkge1xuXHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHVwZGF0ZWRNb2R1bGVzO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwicmVhZHlcIikge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxBcHBseShvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cblx0dmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gaGFuZGxlcihvcHRpb25zKTtcblx0fSk7XG5cdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXG5cdHZhciBlcnJvcnMgPSByZXN1bHRzXG5cdFx0Lm1hcChmdW5jdGlvbiAocikge1xuXHRcdFx0cmV0dXJuIHIuZXJyb3I7XG5cdFx0fSlcblx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuXHRcdHNldFN0YXR1cyhcImFib3J0XCIpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yc1swXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuXHRzZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuXG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpO1xuXHR9KTtcblxuXHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG5cdHNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG5cdHZhciBlcnJvcjtcblx0dmFyIHJlcG9ydEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuXHR9O1xuXG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmFwcGx5KSB7XG5cdFx0XHR2YXIgbW9kdWxlcyA9IHJlc3VsdC5hcHBseShyZXBvcnRFcnJvcik7XG5cdFx0XHRpZiAobW9kdWxlcykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChtb2R1bGVzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcblx0aWYgKGVycm9yKSB7XG5cdFx0c2V0U3RhdHVzKFwiZmFpbFwiKTtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9KTtcblx0fVxuXG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG5cdFx0XHRvdXRkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0aWYgKGxpc3QuaW5kZXhPZihtb2R1bGVJZCkgPCAwKSBsaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gbGlzdDtcblx0XHR9KTtcblx0fVxuXG5cdHNldFN0YXR1cyhcImlkbGVcIik7XG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7XG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRpZiAoIWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzKSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG52YXIgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdDtcbnZhciB3YWl0aW5nVXBkYXRlUmVzb2x2ZXMgPSB7fTtcbmZ1bmN0aW9uIGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gcmVzb2x2ZTtcblx0XHQvLyBzdGFydCB1cGRhdGUgY2h1bmsgbG9hZGluZ1xuXHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmh1KGNodW5rSWQpO1xuXHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHRcdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkXG5cdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBob3QgdXBkYXRlIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkKTtcblx0fSk7XG59XG5cbnNlbGZbXCJ3ZWJwYWNrSG90VXBkYXRlZ2VtX3B1enpsZVwiXSA9IChjaHVua0lkLCBtb3JlTW9kdWxlcywgcnVudGltZSkgPT4ge1xuXHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0aWYoY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCkgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgY3VycmVudFVwZGF0ZVJ1bnRpbWUucHVzaChydW50aW1lKTtcblx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKCk7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHR9XG59O1xuXG52YXIgY3VycmVudFVwZGF0ZUNodW5rcztcbnZhciBjdXJyZW50VXBkYXRlO1xudmFyIGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGVSdW50aW1lO1xuZnVuY3Rpb24gYXBwbHlIYW5kbGVyKG9wdGlvbnMpIHtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikgZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtcjtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHVuZGVmaW5lZDtcblx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKHVwZGF0ZU1vZHVsZUlkKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG5cdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cblx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMubWFwKGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y2hhaW46IFtpZF0sXG5cdFx0XHRcdGlkOiBpZFxuXHRcdFx0fTtcblx0XHR9KTtcblx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuXHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuXHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCFtb2R1bGUgfHxcblx0XHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCAmJiAhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkKVxuXHRcdFx0KVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG5cdFx0XHRcdHZhciBwYXJlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbcGFyZW50SWRdO1xuXHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG5cdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcblx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcblx0XHRcdFx0cXVldWUucHVzaCh7XG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRpZDogcGFyZW50SWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcblx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcblx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuXHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gYltpXTtcblx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcblx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuXHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG5cdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUobW9kdWxlKSB7XG5cdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyBtb2R1bGUuaWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcblx0XHQpO1xuXHR9O1xuXG5cdGZvciAodmFyIG1vZHVsZUlkIGluIGN1cnJlbnRVcGRhdGUpIHtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdFx0dmFyIG5ld01vZHVsZUZhY3RvcnkgPSBjdXJyZW50VXBkYXRlW21vZHVsZUlkXTtcblx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cblx0XHRcdHZhciByZXN1bHQ7XG5cdFx0XHRpZiAobmV3TW9kdWxlRmFjdG9yeSkge1xuXHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMobW9kdWxlSWQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0ID0ge1xuXHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG5cdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcblx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcblx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuXHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuXHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGVycm9yOiBhYm9ydEVycm9yXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9BcHBseSkge1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IG5ld01vZHVsZUZhY3Rvcnk7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG5cdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcblx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRjdXJyZW50VXBkYXRlID0gdW5kZWZpbmVkO1xuXG5cdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cblx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuXHRmb3IgKHZhciBqID0gMDsgaiA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGorKykge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2pdO1xuXHRcdGlmIChcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXSAmJlxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkICYmXG5cdFx0XHQvLyByZW1vdmVkIHNlbGYtYWNjZXB0ZWQgbW9kdWxlcyBzaG91bGQgbm90IGJlIHJlcXVpcmVkXG5cdFx0XHRhcHBsaWVkVXBkYXRlW291dGRhdGVkTW9kdWxlSWRdICE9PSB3YXJuVW5leHBlY3RlZFJlcXVpcmUgJiZcblx0XHRcdC8vIHdoZW4gY2FsbGVkIGludmFsaWRhdGUgc2VsZi1hY2NlcHRpbmcgaXMgbm90IHBvc3NpYmxlXG5cdFx0XHQhX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdLmhvdC5fc2VsZkludmFsaWRhdGVkXG5cdFx0KSB7XG5cdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG5cdFx0XHRcdG1vZHVsZTogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0cmVxdWlyZTogX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdLmhvdC5fcmVxdWlyZVNlbGYsXG5cdFx0XHRcdGVycm9ySGFuZGxlcjogX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG5cblx0cmV0dXJuIHtcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHR9KTtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gdW5kZWZpbmVkO1xuXG5cdFx0XHR2YXIgaWR4O1xuXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG5cdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcblx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuXHRcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0ZGlzcG9zZUhhbmRsZXJzW2pdLmNhbGwobnVsbCwgZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJEW21vZHVsZUlkXSA9IGRhdGE7XG5cblx0XHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcblx0XHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcblx0XHRcdFx0ZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgY2hpbGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcblx0XHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuXHRcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuXHRcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cblx0XHRcdHZhciBkZXBlbmRlbmN5O1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YXBwbHk6IGZ1bmN0aW9uIChyZXBvcnRFcnJvcikge1xuXHRcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG5cdFx0XHRmb3IgKHZhciB1cGRhdGVNb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oYXBwbGllZFVwZGF0ZSwgdXBkYXRlTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW3VwZGF0ZU1vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJ1biBuZXcgcnVudGltZSBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRVcGRhdGVSdW50aW1lLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lW2ldKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0dmFyIGFjY2VwdENhbGxiYWNrID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0aWYgKGFjY2VwdENhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGFjY2VwdENhbGxiYWNrKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGFjY2VwdENhbGxiYWNrKTtcblx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MucHVzaChkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBjYWxsYmFja3MubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3Nba10uY2FsbChudWxsLCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgbyA9IDA7IG8gPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBvKyspIHtcblx0XHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbb107XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGl0ZW0ucmVxdWlyZShtb2R1bGVJZCk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcblx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuXHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIyKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG91dGRhdGVkTW9kdWxlcztcblx0XHR9XG5cdH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkuanNvbnAgPSBmdW5jdGlvbiAobW9kdWxlSWQsIGFwcGx5SGFuZGxlcnMpIHtcblx0aWYgKCFjdXJyZW50VXBkYXRlKSB7XG5cdFx0Y3VycmVudFVwZGF0ZSA9IHt9O1xuXHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSBbXTtcblx0XHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0fVxuXHRpZiAoIV9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF07XG5cdH1cbn07XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMuanNvbnAgPSBmdW5jdGlvbiAoXG5cdGNodW5rSWRzLFxuXHRyZW1vdmVkQ2h1bmtzLFxuXHRyZW1vdmVkTW9kdWxlcyxcblx0cHJvbWlzZXMsXG5cdGFwcGx5SGFuZGxlcnMsXG5cdHVwZGF0ZWRNb2R1bGVzTGlzdFxuKSB7XG5cdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0ge307XG5cdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gcmVtb3ZlZENodW5rcztcblx0Y3VycmVudFVwZGF0ZSA9IHJlbW92ZWRNb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcblx0XHRvYmpba2V5XSA9IGZhbHNlO1xuXHRcdHJldHVybiBvYmo7XG5cdH0sIHt9KTtcblx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0Y2h1bmtJZHMuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdGlmIChcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZFxuXHRcdCkge1xuXHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgdXBkYXRlZE1vZHVsZXNMaXN0KSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHR9XG5cdH0pO1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yID0gZnVuY3Rpb24gKGNodW5rSWQsIHByb21pc2VzKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3MgJiZcblx0XHRcdFx0IV9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZFxuXHRcdFx0KSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpKTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNID0gKCkgPT4ge1xuXHRpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnQ6IG5lZWQgZmV0Y2ggQVBJXCIpO1xuXHRyZXR1cm4gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGKCkpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0aWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybjsgLy8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuXHRcdGlmKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHVwZGF0ZSBtYW5pZmVzdCBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdH0pO1xufTtcblxuLy8gbm8gZGVmZXJyZWQgc3RhcnR1cFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGVcbl9fd2VicGFja19yZXF1aXJlX18oMTM0KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=